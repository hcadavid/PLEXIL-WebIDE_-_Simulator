


<!DOCTYPE html>
<html lang="en" class=" is-copy-enabled">
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# object: http://ogp.me/ns/object# article: http://ogp.me/ns/article# profile: http://ogp.me/ns/profile#">
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta http-equiv="Content-Language" content="en">
    <meta name="viewport" content="width=1020">
    
    
    <title>box2dweb/Box2d.min.js at master · hecht-software/box2dweb</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-touch-icon-114.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-touch-icon-114.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-touch-icon-144.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-touch-icon-144.png">
    <meta property="fb:app_id" content="1401488693436528">

      <meta content="@github" name="twitter:site" /><meta content="summary" name="twitter:card" /><meta content="hecht-software/box2dweb" name="twitter:title" /><meta content="Automatically exported from code.google.com/p/box2dweb" name="twitter:description" /><meta content="https://avatars3.githubusercontent.com/u/13943237?v=3&amp;s=400" name="twitter:image:src" />
      <meta content="GitHub" property="og:site_name" /><meta content="object" property="og:type" /><meta content="https://avatars3.githubusercontent.com/u/13943237?v=3&amp;s=400" property="og:image" /><meta content="hecht-software/box2dweb" property="og:title" /><meta content="https://github.com/hecht-software/box2dweb" property="og:url" /><meta content="Automatically exported from code.google.com/p/box2dweb" property="og:description" />
      <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">
    <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">
    <link rel="assets" href="https://assets-cdn.github.com/">
    <link rel="web-socket" href="wss://live.github.com/_sockets/MTA1MjUwODE6ZmVlYzcxZjY1OTY2MTNhZjA2NTA2ZjE4MGU1Y2RjNTI6ZmUzNjhkNmM0ZTM5ZTAyYWQ2ZDkxNzI2NjM4NWNkMWVmMzkxZmQwYzBkMzVhYWQ5ZGI1MjE1YWUxNDU3Yzk2ZQ==--4035facebe6ad3feecb07a0ee3b63a3849f6f74b">
    <meta name="pjax-timeout" content="1000">
    <link rel="sudo-modal" href="/sessions/sudo_modal">

    <meta name="msapplication-TileImage" content="/windows-tile.png">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="selected-link" value="repo_source" data-pjax-transient>

    <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
    <meta name="google-analytics" content="UA-3769691-2">

<meta content="collector.githubapp.com" name="octolytics-host" /><meta content="collector-cdn.github.com" name="octolytics-script-host" /><meta content="github" name="octolytics-app-id" /><meta content="BE18964E:07CA:449EBE6:5617DA28" name="octolytics-dimension-request_id" /><meta content="10525081" name="octolytics-actor-id" /><meta content="hectorateci" name="octolytics-actor-login" /><meta content="35e850ae069397b7a54574b2fdce912e452fc6fa705274736ce47d69ed741d84" name="octolytics-actor-hash" />

<meta content="Rails, view, blob#show" data-pjax-transient="true" name="analytics-event" />


  <meta class="js-ga-set" name="dimension1" content="Logged In">
    <meta class="js-ga-set" name="dimension4" content="Current repo nav">




    <meta name="is-dotcom" content="true">
        <meta name="hostname" content="github.com">
    <meta name="user-login" content="hectorateci">

      <link rel="mask-icon" href="https://assets-cdn.github.com/pinned-octocat.svg" color="#4078c0">
      <link rel="icon" type="image/x-icon" href="https://assets-cdn.github.com/favicon.ico">

      <!-- </textarea> --><!-- '"` --><meta content="authenticity_token" name="csrf-param" />
<meta content="OecVd3suex5GJVSyKdePM0oayi2Bpi0U6ym4ktBtiIG1bwQ8ZJ/tOPA8rmpSWVYnIK/U8C+fHi4NDVGw3qMDRw==" name="csrf-token" />
    <meta content="6122148a6055ec22f5572b7845abe26f3606ff42" name="form-nonce" />

    <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/github-146afd802a575b0ac3ab74b702dd213fe99b0fdab91c530c4be6777278d548ab.css" integrity="sha256-FGr9gCpXWwrDq3S3At0hP+mbD9q5HFMMS+Z3cnjVSKs=" media="all" rel="stylesheet" />
    <link crossorigin="anonymous" href="https://assets-cdn.github.com/assets/github2-5fbd51630dd27a79b6107d38e57e4c6e8818d18b1d88f4df4bc3f145e211aa82.css" integrity="sha256-X71RYw3Senm2EH045X5MbogY0YsdiPTfS8PxReIRqoI=" media="all" rel="stylesheet" />
    
    
    


    <meta http-equiv="x-pjax-version" content="de94313abfcb2b2e2f368e2e3020774f">

      
  <meta name="description" content="Automatically exported from code.google.com/p/box2dweb">
  <meta name="go-import" content="github.com/hecht-software/box2dweb git https://github.com/hecht-software/box2dweb.git">

  <meta content="13943237" name="octolytics-dimension-user_id" /><meta content="hecht-software" name="octolytics-dimension-user_login" /><meta content="41297778" name="octolytics-dimension-repository_id" /><meta content="hecht-software/box2dweb" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="41297778" name="octolytics-dimension-repository_network_root_id" /><meta content="hecht-software/box2dweb" name="octolytics-dimension-repository_network_root_nwo" />
  <link href="https://github.com/hecht-software/box2dweb/commits/master.atom" rel="alternate" title="Recent Commits to box2dweb:master" type="application/atom+xml">

  </head>


  <body class="logged_in   env-production macintosh vis-public page-blob">
    <a href="#start-of-content" tabindex="1" class="accessibility-aid js-skip-to-content">Skip to content</a>

    
    
    



      <div class="header header-logged-in true" role="banner">
  <div class="container clearfix">

    <a class="header-logo-invertocat" href="https://github.com/" data-hotkey="g d" aria-label="Homepage" data-ga-click="Header, go to dashboard, icon:logo">
  <span class="mega-octicon octicon-mark-github"></span>
</a>


      <div class="site-search repo-scope js-site-search" role="search">
          <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/hecht-software/box2dweb/search" class="js-site-search-form" data-global-search-url="/search" data-repo-search-url="/hecht-software/box2dweb/search" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
  <label class="js-chromeless-input-container form-control">
    <div class="scope-badge">This repository</div>
    <input type="text"
      class="js-site-search-focus js-site-search-field is-clearable chromeless-input"
      data-hotkey="s"
      name="q"
      placeholder="Search"
      aria-label="Search this repository"
      data-global-scope-placeholder="Search GitHub"
      data-repo-scope-placeholder="Search"
      tabindex="1"
      autocapitalize="off">
  </label>
</form>
      </div>

      <ul class="header-nav left" role="navigation">
        <li class="header-nav-item">
          <a href="/pulls" class="js-selected-navigation-item header-nav-link" data-ga-click="Header, click, Nav menu - item:pulls context:user" data-hotkey="g p" data-selected-links="/pulls /pulls/assigned /pulls/mentioned /pulls">
            Pull requests
</a>        </li>
        <li class="header-nav-item">
          <a href="/issues" class="js-selected-navigation-item header-nav-link" data-ga-click="Header, click, Nav menu - item:issues context:user" data-hotkey="g i" data-selected-links="/issues /issues/assigned /issues/mentioned /issues">
            Issues
</a>        </li>
          <li class="header-nav-item">
            <a class="header-nav-link" href="https://gist.github.com/" data-ga-click="Header, go to gist, text:gist">Gist</a>
          </li>
      </ul>

    
<ul class="header-nav user-nav right" id="user-links">
  <li class="header-nav-item">
      <span class="js-socket-channel js-updatable-content"
        data-channel="notification-changed:hectorateci"
        data-url="/notifications/header">
      <a href="/notifications" aria-label="You have no unread notifications" class="header-nav-link notification-indicator tooltipped tooltipped-s" data-ga-click="Header, go to notifications, icon:read" data-hotkey="g n">
          <span class="mail-status all-read"></span>
          <span class="octicon octicon-bell"></span>
</a>  </span>

  </li>

  <li class="header-nav-item dropdown js-menu-container">
    <a class="header-nav-link tooltipped tooltipped-s js-menu-target" href="/new"
       aria-label="Create new…"
       data-ga-click="Header, create new, icon:add">
      <span class="octicon octicon-plus left"></span>
      <span class="dropdown-caret"></span>
    </a>

    <div class="dropdown-menu-content js-menu-content">
      <ul class="dropdown-menu dropdown-menu-sw">
        
<a class="dropdown-item" href="/new" data-ga-click="Header, create new repository">
  New repository
</a>


  <a class="dropdown-item" href="/organizations/new" data-ga-click="Header, create new organization">
    New organization
  </a>



  <div class="dropdown-divider"></div>
  <div class="dropdown-header">
    <span title="hecht-software/box2dweb">This repository</span>
  </div>
    <a class="dropdown-item" href="/hecht-software/box2dweb/issues/new" data-ga-click="Header, create new issue">
      New issue
    </a>

      </ul>
    </div>
  </li>

  <li class="header-nav-item dropdown js-menu-container">
    <a class="header-nav-link name tooltipped tooltipped-s js-menu-target" href="/hectorateci"
       aria-label="View profile and more"
       data-ga-click="Header, show menu, icon:avatar">
      <img alt="@hectorateci" class="avatar" height="20" src="https://avatars3.githubusercontent.com/u/10525081?v=3&amp;s=40" width="20" />
      <span class="dropdown-caret"></span>
    </a>

    <div class="dropdown-menu-content js-menu-content">
      <div class="dropdown-menu  dropdown-menu-sw">
        <div class=" dropdown-header header-nav-current-user css-truncate">
            Signed in as <strong class="css-truncate-target">hectorateci</strong>

        </div>


        <div class="dropdown-divider"></div>

          <a class="dropdown-item" href="/hectorateci" data-ga-click="Header, go to profile, text:your profile">
            Your profile
          </a>
        <a class="dropdown-item" href="/stars" data-ga-click="Header, go to starred repos, text:your stars">
          Your stars
        </a>
        <a class="dropdown-item" href="/explore" data-ga-click="Header, go to explore, text:explore">
          Explore
        </a>
          <a class="dropdown-item" href="/integrations" data-ga-click="Header, go to integrations, text:integrations">
            Integrations
          </a>
        <a class="dropdown-item" href="https://help.github.com" data-ga-click="Header, go to help, text:help">
          Help
        </a>

          <div class="dropdown-divider"></div>

          <a class="dropdown-item" href="/settings/profile" data-ga-click="Header, go to settings, icon:settings">
            Settings
          </a>

          <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/logout" class="logout-form" data-form-nonce="6122148a6055ec22f5572b7845abe26f3606ff42" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="JHnpgGf6Tfk27AHOAfCW8y8jfbAdeUol57p5qnGV1S1r6IzGc45Hxkm1KZg0S6j8KNuiY3aYZG3HZpEe8/sBDw==" /></div>
            <button class="dropdown-item dropdown-signout" data-ga-click="Header, sign out, icon:logout">
              Sign out
            </button>
</form>
      </div>
    </div>
  </li>
</ul>


    
  </div>
</div>

      

      


    <div id="start-of-content" class="accessibility-aid"></div>

    <div id="js-flash-container">
</div>


    <div role="main" class="main-content">
        <div itemscope itemtype="http://schema.org/WebPage">
    <div class="pagehead repohead instapaper_ignore readability-menu">

      <div class="container">

        <div class="clearfix">
          

<ul class="pagehead-actions">

  <li>
      <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/notifications/subscribe" class="js-social-container" data-autosubmit="true" data-form-nonce="6122148a6055ec22f5572b7845abe26f3606ff42" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="ZVamPV9u6uuYjX26Dz54iGclKCGeqmH0c1JR9wvmvIIAK+pbqjSpuqA7T4Jh1CMQa7RPnhixnrfLqZDsagq2CA==" /></div>    <input id="repository_id" name="repository_id" type="hidden" value="41297778" />

      <div class="select-menu js-menu-container js-select-menu">
        <a href="/hecht-software/box2dweb/subscription"
          class="btn btn-sm btn-with-count select-menu-button js-menu-target" role="button" tabindex="0" aria-haspopup="true"
          data-ga-click="Repository, click Watch settings, action:blob#show">
          <span class="js-select-button">
            <span class="octicon octicon-eye"></span>
            Watch
          </span>
        </a>
        <a class="social-count js-social-count" href="/hecht-software/box2dweb/watchers">
          2
        </a>

        <div class="select-menu-modal-holder">
          <div class="select-menu-modal subscription-menu-modal js-menu-content" aria-hidden="true">
            <div class="select-menu-header">
              <span class="select-menu-title">Notifications</span>
              <span class="octicon octicon-x js-menu-close" role="button" aria-label="Close"></span>
            </div>

            <div class="select-menu-list js-navigation-container" role="menu">

              <div class="select-menu-item js-navigation-item selected" role="menuitem" tabindex="0">
                <span class="select-menu-item-icon octicon octicon-check"></span>
                <div class="select-menu-item-text">
                  <input checked="checked" id="do_included" name="do" type="radio" value="included" />
                  <span class="select-menu-item-heading">Not watching</span>
                  <span class="description">Be notified when participating or @mentioned.</span>
                  <span class="js-select-button-text hidden-select-button-text">
                    <span class="octicon octicon-eye"></span>
                    Watch
                  </span>
                </div>
              </div>

              <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
                <span class="select-menu-item-icon octicon octicon octicon-check"></span>
                <div class="select-menu-item-text">
                  <input id="do_subscribed" name="do" type="radio" value="subscribed" />
                  <span class="select-menu-item-heading">Watching</span>
                  <span class="description">Be notified of all conversations.</span>
                  <span class="js-select-button-text hidden-select-button-text">
                    <span class="octicon octicon-eye"></span>
                    Unwatch
                  </span>
                </div>
              </div>

              <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
                <span class="select-menu-item-icon octicon octicon-check"></span>
                <div class="select-menu-item-text">
                  <input id="do_ignore" name="do" type="radio" value="ignore" />
                  <span class="select-menu-item-heading">Ignoring</span>
                  <span class="description">Never be notified.</span>
                  <span class="js-select-button-text hidden-select-button-text">
                    <span class="octicon octicon-mute"></span>
                    Stop ignoring
                  </span>
                </div>
              </div>

            </div>

          </div>
        </div>
      </div>
</form>
  </li>

  <li>
    
  <div class="js-toggler-container js-social-container starring-container ">

    <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/hecht-software/box2dweb/unstar" class="js-toggler-form starred js-unstar-button" data-form-nonce="6122148a6055ec22f5572b7845abe26f3606ff42" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="IXNPia3/Rd6tRM+6hPkhZ1kk8FRpOee8W8qTkPEbaVHw99ZitHoHK9bmp0org5ZhgaVXHANiRIn5O3WoUSu8rg==" /></div>
      <button
        class="btn btn-sm btn-with-count js-toggler-target"
        aria-label="Unstar this repository" title="Unstar hecht-software/box2dweb"
        data-ga-click="Repository, click unstar button, action:blob#show; text:Unstar">
        <span class="octicon octicon-star"></span>
        Unstar
      </button>
        <a class="social-count js-social-count" href="/hecht-software/box2dweb/stargazers">
          7
        </a>
</form>
    <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/hecht-software/box2dweb/star" class="js-toggler-form unstarred js-star-button" data-form-nonce="6122148a6055ec22f5572b7845abe26f3606ff42" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="+YPQmhozFtsA1AgNSp+kUseok747zvtspZI30owUmi4uRjCZBoXyeYpsJEkz9yhJ/354Cv8Hl2J5Mw+jMljeoA==" /></div>
      <button
        class="btn btn-sm btn-with-count js-toggler-target"
        aria-label="Star this repository" title="Star hecht-software/box2dweb"
        data-ga-click="Repository, click star button, action:blob#show; text:Star">
        <span class="octicon octicon-star"></span>
        Star
      </button>
        <a class="social-count js-social-count" href="/hecht-software/box2dweb/stargazers">
          7
        </a>
</form>  </div>

  </li>

  <li>
          <a href="#fork-destination-box" class="btn btn-sm btn-with-count"
              title="Fork your own copy of hecht-software/box2dweb to your account"
              aria-label="Fork your own copy of hecht-software/box2dweb to your account"
              rel="facebox"
              data-ga-click="Repository, show fork modal, action:blob#show; text:Fork">
            <span class="octicon octicon-repo-forked"></span>
            Fork
          </a>

          <div id="fork-destination-box" style="display: none;">
            <h2 class="facebox-header" data-facebox-id="facebox-header">Where should we fork this repository?</h2>
            <include-fragment src=""
                class="js-fork-select-fragment fork-select-fragment"
                data-url="/hecht-software/box2dweb/fork?fragment=1">
              <img alt="Loading" height="64" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-128.gif" width="64" />
            </include-fragment>
          </div>

    <a href="/hecht-software/box2dweb/network" class="social-count">
      4
    </a>
  </li>
</ul>

          <h1 itemscope itemtype="http://data-vocabulary.org/Breadcrumb" class="entry-title public ">
  <span class="mega-octicon octicon-repo"></span>
  <span class="author"><a href="/hecht-software" class="url fn" itemprop="url" rel="author"><span itemprop="title">hecht-software</span></a></span><!--
--><span class="path-divider">/</span><!--
--><strong><a href="/hecht-software/box2dweb" data-pjax="#js-repo-pjax-container">box2dweb</a></strong>

  <span class="page-context-loader">
    <img alt="" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
  </span>

</h1>

        </div>
      </div>
    </div>

    <div class="container">
      <div class="repository-with-sidebar repo-container new-discussion-timeline ">
        <div class="repository-sidebar clearfix">
          
<nav class="sunken-menu repo-nav js-repo-nav js-sidenav-container-pjax js-octicon-loaders"
     role="navigation"
     data-pjax="#js-repo-pjax-container"
     data-issue-count-url="/hecht-software/box2dweb/issues/counts">
  <ul class="sunken-menu-group">
    <li class="tooltipped tooltipped-w" aria-label="Code">
      <a href="/hecht-software/box2dweb" aria-label="Code" aria-selected="true" class="js-selected-navigation-item selected sunken-menu-item" data-hotkey="g c" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches /hecht-software/box2dweb">
        <span class="octicon octicon-code"></span> <span class="full-word">Code</span>
        <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>

      <li class="tooltipped tooltipped-w" aria-label="Issues">
        <a href="/hecht-software/box2dweb/issues" aria-label="Issues" class="js-selected-navigation-item sunken-menu-item" data-hotkey="g i" data-selected-links="repo_issues repo_labels repo_milestones /hecht-software/box2dweb/issues">
          <span class="octicon octicon-issue-opened"></span> <span class="full-word">Issues</span>
          <span class="js-issue-replace-counter"></span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

    <li class="tooltipped tooltipped-w" aria-label="Pull requests">
      <a href="/hecht-software/box2dweb/pulls" aria-label="Pull requests" class="js-selected-navigation-item sunken-menu-item" data-hotkey="g p" data-selected-links="repo_pulls /hecht-software/box2dweb/pulls">
          <span class="octicon octicon-git-pull-request"></span> <span class="full-word">Pull requests</span>
          <span class="js-pull-replace-counter"></span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>

      <li class="tooltipped tooltipped-w" aria-label="Wiki">
        <a href="/hecht-software/box2dweb/wiki" aria-label="Wiki" class="js-selected-navigation-item sunken-menu-item" data-hotkey="g w" data-selected-links="repo_wiki /hecht-software/box2dweb/wiki">
          <span class="octicon octicon-book"></span> <span class="full-word">Wiki</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>
  </ul>
  <div class="sunken-menu-separator"></div>
  <ul class="sunken-menu-group">

    <li class="tooltipped tooltipped-w" aria-label="Pulse">
      <a href="/hecht-software/box2dweb/pulse" aria-label="Pulse" class="js-selected-navigation-item sunken-menu-item" data-selected-links="pulse /hecht-software/box2dweb/pulse">
        <span class="octicon octicon-pulse"></span> <span class="full-word">Pulse</span>
        <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>

    <li class="tooltipped tooltipped-w" aria-label="Graphs">
      <a href="/hecht-software/box2dweb/graphs" aria-label="Graphs" class="js-selected-navigation-item sunken-menu-item" data-selected-links="repo_graphs repo_contributors /hecht-software/box2dweb/graphs">
        <span class="octicon octicon-graph"></span> <span class="full-word">Graphs</span>
        <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>    </li>
  </ul>


</nav>

            <div class="only-with-full-nav">
                
<div class="js-clone-url clone-url open"
  data-protocol-type="http">
  <h3 class="text-small"><span class="text-emphasized">HTTPS</span> clone URL</h3>
  <div class="input-group js-zeroclipboard-container">
    <input type="text" class="input-mini text-small input-monospace js-url-field js-zeroclipboard-target"
           value="https://github.com/hecht-software/box2dweb.git" readonly="readonly" aria-label="HTTPS clone URL">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard btn btn-sm zeroclipboard-button tooltipped tooltipped-s" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  
<div class="js-clone-url clone-url "
  data-protocol-type="ssh">
  <h3 class="text-small"><span class="text-emphasized">SSH</span> clone URL</h3>
  <div class="input-group js-zeroclipboard-container">
    <input type="text" class="input-mini text-small input-monospace js-url-field js-zeroclipboard-target"
           value="git@github.com:hecht-software/box2dweb.git" readonly="readonly" aria-label="SSH clone URL">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard btn btn-sm zeroclipboard-button tooltipped tooltipped-s" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  
<div class="js-clone-url clone-url "
  data-protocol-type="subversion">
  <h3 class="text-small"><span class="text-emphasized">Subversion</span> checkout URL</h3>
  <div class="input-group js-zeroclipboard-container">
    <input type="text" class="input-mini text-small input-monospace js-url-field js-zeroclipboard-target"
           value="https://github.com/hecht-software/box2dweb" readonly="readonly" aria-label="Subversion checkout URL">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard btn btn-sm zeroclipboard-button tooltipped tooltipped-s" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>



<div class="clone-options text-small">You can clone with
  <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/users/set_protocol?protocol_selector=http&amp;protocol_type=clone" class="inline-form js-clone-selector-form is-enabled" data-form-nonce="6122148a6055ec22f5572b7845abe26f3606ff42" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="u+iphVPYXLHBxGnl5paSpBlH5QvGm1sqXNGIx7VHq1AmKbOZfqWp3ze5w2ivhjS86AWBR3hmlHOjF29w36cRqQ==" /></div><button class="btn-link js-clone-selector" data-protocol="http" type="submit">HTTPS</button></form>, <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/users/set_protocol?protocol_selector=ssh&amp;protocol_type=clone" class="inline-form js-clone-selector-form is-enabled" data-form-nonce="6122148a6055ec22f5572b7845abe26f3606ff42" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="q9BYgIeFLmovjt/xsA8G1cnH4fezmIzzcqpYA/pJcOvhzsR6O90huFm7/YKChyuHrcLb7CbMNCLFqis+TWR3Cw==" /></div><button class="btn-link js-clone-selector" data-protocol="ssh" type="submit">SSH</button></form>, or <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/users/set_protocol?protocol_selector=subversion&amp;protocol_type=clone" class="inline-form js-clone-selector-form is-enabled" data-form-nonce="6122148a6055ec22f5572b7845abe26f3606ff42" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="Ebwptgswop0E+5uywooOVEfZP7i8pdt90Z36jUbS6wvIh+rYJVYwSsuwQ/aqA0orwR/jZYDMs8h++YtYEIdexw==" /></div><button class="btn-link js-clone-selector" data-protocol="subversion" type="submit">Subversion</button></form>.
  <a href="https://help.github.com/articles/which-remote-url-should-i-use" class="help tooltipped tooltipped-n" aria-label="Get help on which URL is right for you.">
    <span class="octicon octicon-question"></span>
  </a>
</div>
  <a href="https://mac.github.com" class="btn btn-sm sidebar-button" title="Save hecht-software/box2dweb to your computer and use it in GitHub Desktop." aria-label="Save hecht-software/box2dweb to your computer and use it in GitHub Desktop.">
    <span class="octicon octicon-desktop-download"></span>
    Clone in Desktop
  </a>

              <a href="/hecht-software/box2dweb/archive/master.zip"
                 class="btn btn-sm sidebar-button"
                 aria-label="Download the contents of hecht-software/box2dweb as a zip file"
                 title="Download the contents of hecht-software/box2dweb as a zip file"
                 rel="nofollow">
                <span class="octicon octicon-cloud-download"></span>
                Download ZIP
              </a>
            </div>
        </div>
        <div id="js-repo-pjax-container" class="repository-content context-loader-container" data-pjax-container>

          

<a href="/hecht-software/box2dweb/blob/03ff76dac7f9961668011b44c5ae716a30dd0b6f/Box2d.min.js" class="hidden js-permalink-shortcut" data-hotkey="y">Permalink</a>

<!-- blob contrib key: blob_contributors:v21:c77fd346d2e3a9aaecdc12b399a9509a -->

  <div class="file-navigation js-zeroclipboard-container">
    
<div class="select-menu js-menu-container js-select-menu left">
  <span class="btn btn-sm select-menu-button js-menu-target css-truncate" data-hotkey="w"
    title="master"
    role="button" aria-label="Switch branches or tags" tabindex="0" aria-haspopup="true">
    <i>Branch:</i>
    <span class="js-select-button css-truncate-target">master</span>
  </span>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax aria-hidden="true">

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <span class="select-menu-title">Switch branches/tags</span>
        <span class="octicon octicon-x js-menu-close" role="button" aria-label="Close"></span>
      </div>

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" data-filter-placeholder="Filter branches/tags" class="js-select-menu-tab" role="tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" data-filter-placeholder="Find a tag…" class="js-select-menu-tab" role="tab">Tags</a>
            </li>
          </ul>
        </div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches" role="menu">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <a class="select-menu-item js-navigation-item js-navigation-open selected"
               href="/hecht-software/box2dweb/blob/master/Box2d.min.js"
               data-name="master"
               data-skip-pjax="true"
               rel="nofollow">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <span class="select-menu-item-text css-truncate-target" title="master">
                master
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/hecht-software/box2dweb/blob/wiki/Box2d.min.js"
               data-name="wiki"
               data-skip-pjax="true"
               rel="nofollow">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <span class="select-menu-item-text css-truncate-target" title="wiki">
                wiki
              </span>
            </a>
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/hecht-software/box2dweb/tree/v2.1a.4/Box2d.min.js"
                 data-name="v2.1a.4"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="v2.1a.4">v2.1a.4</a>
            </div>
        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div>

    </div>
  </div>
</div>

    <div class="btn-group right">
      <a href="/hecht-software/box2dweb/find/master"
            class="js-show-file-finder btn btn-sm empty-icon tooltipped tooltipped-nw"
            data-pjax
            data-hotkey="t"
            aria-label="Quickly jump between files">
        <span class="octicon octicon-list-unordered"></span>
      </a>
      <button aria-label="Copy file path to clipboard" class="js-zeroclipboard btn btn-sm zeroclipboard-button tooltipped tooltipped-s" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </div>

    <div class="breadcrumb js-zeroclipboard-target">
      <span class="repo-root js-repo-root"><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/hecht-software/box2dweb" class="" data-branch="master" data-pjax="true" itemscope="url"><span itemprop="title">box2dweb</span></a></span></span><span class="separator">/</span><strong class="final-path">Box2d.min.js</strong>
    </div>
  </div>


  <div class="commit file-history-tease">
    <div class="file-history-tease-header">
        <img alt="" class="avatar" height="24" src="https://0.gravatar.com/avatar/109a08c9f04024418a1b65ddd88a0e00?d=https%3A%2F%2Fassets-cdn.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png&amp;r=x&amp;s=140" width="24" />
        <span class="author"><span>Uli.Hecht</span></span>
        <time datetime="2011-06-07T09:56:07Z" is="relative-time">Jun 7, 2011</time>
        <div class="commit-title">
            <a href="/hecht-software/box2dweb/commit/c8aff6e9d295a9d72e1728e76b6d1d5fdcf616f5" class="message" data-pjax="true" title="(Fixes issue #17) : Doesn't work with FF 3.6">(Fixes issue</a> <a href="https://github.com/hecht-software/box2dweb/issues/17" class="issue-link" title="Doesn't work with FF 3.6">#17</a><a href="/hecht-software/box2dweb/commit/c8aff6e9d295a9d72e1728e76b6d1d5fdcf616f5" class="message" data-pjax="true" title="(Fixes issue #17) : Doesn't work with FF 3.6">) : Doesn't work with FF 3.6</a>
        </div>
    </div>

    <div class="participation">
      <p class="quickstat">
        <a href="#blob_contributors_box" rel="facebox">
          <strong>0</strong>
           contributors
        </a>
      </p>
      
    </div>
    <div id="blob_contributors_box" style="display:none">
      <h2 class="facebox-header" data-facebox-id="facebox-header">Users who have contributed to this file</h2>
      <ul class="facebox-user-list" data-facebox-id="facebox-description">
      </ul>
    </div>
  </div>

<div class="file">
  <div class="file-header">
  <div class="file-actions">

    <div class="btn-group">
      <a href="/hecht-software/box2dweb/raw/master/Box2d.min.js" class="btn btn-sm " id="raw-url">Raw</a>
        <a href="/hecht-software/box2dweb/blame/master/Box2d.min.js" class="btn btn-sm js-update-url-with-hash">Blame</a>
      <a href="/hecht-software/box2dweb/commits/master/Box2d.min.js" class="btn btn-sm " rel="nofollow">History</a>
    </div>

      <a class="octicon-btn tooltipped tooltipped-nw"
         href="https://mac.github.com"
         aria-label="Open this file in GitHub Desktop"
         data-ga-click="Repository, open with desktop, type:mac">
          <span class="octicon octicon-device-desktop"></span>
      </a>

        <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/hecht-software/box2dweb/edit/master/Box2d.min.js" class="inline-form js-update-url-with-hash" data-form-nonce="6122148a6055ec22f5572b7845abe26f3606ff42" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="xEy44g/pUqBUt4qK32HlUa3Bs8avd8YLAVUoW19U68YGwsadA7XzMDEiK+5wYliJoALIljF1Q7Rd5qQhy3eVSA==" /></div>
          <button class="octicon-btn tooltipped tooltipped-nw" type="submit"
            aria-label="Fork this project and edit the file" data-hotkey="e" data-disable-with>
            <span class="octicon octicon-pencil"></span>
          </button>
</form>        <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="/hecht-software/box2dweb/delete/master/Box2d.min.js" class="inline-form" data-form-nonce="6122148a6055ec22f5572b7845abe26f3606ff42" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="AHUK786pM+cD+4+JQC9hzI0U+LYGa+DMNhc13YPgovfEHYJUxW3XvvU0MJY4/78MHC13LcCZ3OkMf9hyDzPX8w==" /></div>
          <button class="octicon-btn octicon-btn-danger tooltipped tooltipped-nw" type="submit"
            aria-label="Fork this project and delete the file" data-disable-with>
            <span class="octicon octicon-trashcan"></span>
          </button>
</form>  </div>

  <div class="file-info">
      446 lines (445 sloc)
      <span class="file-info-divider"></span>
    220 KB
  </div>
</div>

  

  <div class="blob-wrapper data type-javascript">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Box2D<span class="pl-k">=</span>{};</td>
      </tr>
      <tr>
        <td id="L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="LC2" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(<span class="pl-smi">F</span>,<span class="pl-smi">G</span>){<span class="pl-k">function</span> <span class="pl-en">K</span>(){}<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-c1">Object</span>.<span class="pl-c1">prototype</span>.defineProperty <span class="pl-k">instanceof</span> <span class="pl-c1">Function</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-c1">Object</span>.<span class="pl-c1">prototype</span>.__defineGetter__ <span class="pl-k">instanceof</span> <span class="pl-c1">Function</span><span class="pl-k">&amp;&amp;</span><span class="pl-c1">Object</span>.<span class="pl-c1">prototype</span>.__defineSetter__ <span class="pl-k">instanceof</span> <span class="pl-c1">Function</span>)<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>,<span class="pl-smi">w</span>,<span class="pl-smi">A</span>){A.get <span class="pl-k">instanceof</span> <span class="pl-c1">Function</span><span class="pl-k">&amp;&amp;</span>y.__defineGetter__(w,A.get);A.set <span class="pl-k">instanceof</span> <span class="pl-c1">Function</span><span class="pl-k">&amp;&amp;</span>y.__defineSetter__(w,A.set)};<span class="pl-c1">F</span>.<span class="pl-en">inherit</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>,<span class="pl-smi">w</span>){<span class="pl-c1">K</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span>w.<span class="pl-c1">prototype</span>;<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>;<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">constructor</span><span class="pl-k">=</span>y};<span class="pl-c1">F</span>.<span class="pl-en">generateCallback</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>,<span class="pl-smi">w</span>){<span class="pl-k">return</span> <span class="pl-k">function</span>(){w.<span class="pl-c1">apply</span>(y,arguments)}};</td>
      </tr>
      <tr>
        <td id="L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="LC3" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">F</span>.<span class="pl-en">NVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span>G)y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> w<span class="pl-k">=</span><span class="pl-c1">Array</span>(y<span class="pl-k">||</span><span class="pl-c1">0</span>),A<span class="pl-k">=</span><span class="pl-c1">0</span>;A<span class="pl-k">&lt;</span>y;<span class="pl-k">++</span>A)w[A]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> w};<span class="pl-c1">F</span>.<span class="pl-en">is</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>,<span class="pl-smi">w</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span><span class="pl-c1">null</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>;<span class="pl-k">if</span>(w <span class="pl-k">instanceof</span> <span class="pl-c1">Function</span><span class="pl-k">&amp;&amp;</span>y <span class="pl-k">instanceof</span> w)<span class="pl-k">return</span> <span class="pl-c1">true</span>;<span class="pl-k">if</span>(y.<span class="pl-c1">constructor</span>.__implements<span class="pl-k">!=</span>G<span class="pl-k">&amp;&amp;</span>y.<span class="pl-c1">constructor</span>.__implements[w])<span class="pl-k">return</span> <span class="pl-c1">true</span>;<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-c1">F</span>.<span class="pl-en">parseUInt</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(<span class="pl-c1">parseInt</span>(y))}})(Box2D);<span class="pl-k">var</span> Vector<span class="pl-k">=</span><span class="pl-c1">Array</span>,Vector_a2j_Number<span class="pl-k">=</span>Box2D.NVector;<span class="pl-k">if</span>(<span class="pl-k">typeof</span> Box2D<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)Box2D<span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">typeof</span> Box2D.Collision<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)Box2D.Collision<span class="pl-k">=</span>{};</td>
      </tr>
      <tr>
        <td id="L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="LC4" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-k">typeof</span> Box2D.Collision.Shapes<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)Box2D.Collision.Shapes<span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">typeof</span> Box2D.Common<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)Box2D.Common<span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">typeof</span> Box2D.Common.<span class="pl-c1">Math</span><span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)Box2D.Common.<span class="pl-c1">Math</span><span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">typeof</span> Box2D.Dynamics<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)Box2D.Dynamics<span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">typeof</span> Box2D.Dynamics.Contacts<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)Box2D.Dynamics.Contacts<span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">typeof</span> Box2D.Dynamics.Controllers<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)Box2D.Dynamics.Controllers<span class="pl-k">=</span>{};<span class="pl-k">if</span>(<span class="pl-k">typeof</span> Box2D.Dynamics.Joints<span class="pl-k">===</span><span class="pl-s"><span class="pl-pds">&quot;</span>undefined<span class="pl-pds">&quot;</span></span>)Box2D.Dynamics.Joints<span class="pl-k">=</span>{};</td>
      </tr>
      <tr>
        <td id="L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="LC5" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">function</span> <span class="pl-en">F</span>(){F.b2AABB.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">G</span>(){G.b2Bound.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">K</span>(){K.b2BoundValues.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>K<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2BoundValues.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">y</span>(){y.b2Collision.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">w</span>(){w.b2ContactID.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>w<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2ContactID.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">A</span>(){A.b2ContactPoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">U</span>(){U.b2Distance.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">p</span>(){p.b2DistanceInput.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,</td>
      </tr>
      <tr>
        <td id="L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="LC6" class="blob-code blob-code-inner js-file-line">arguments)}<span class="pl-k">function</span> <span class="pl-en">B</span>(){B.b2DistanceOutput.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Q</span>(){Q.b2DistanceProxy.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">V</span>(){V.b2DynamicTree.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>V<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2DynamicTree.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">M</span>(){M.b2DynamicTreeBroadPhase.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">L</span>(){L.b2DynamicTreeNode.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">I</span>(){I.b2DynamicTreePair.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">W</span>(){W.b2Manifold.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>W<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2Manifold.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}</td>
      </tr>
      <tr>
        <td id="L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="LC7" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">Y</span>(){Y.b2ManifoldPoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>Y<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2ManifoldPoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">k</span>(){k.b2Point.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">z</span>(){z.b2RayCastInput.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>z<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2RayCastInput.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">u</span>(){u.b2RayCastOutput.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">D</span>(){D.b2Segment.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">H</span>(){H.b2SeparationFunction.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">O</span>(){O.b2Simplex.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="LC8" class="blob-code blob-code-inner js-file-line">O<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2Simplex.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">E</span>(){E.b2SimplexCache.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">R</span>(){R.b2SimplexVertex.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">N</span>(){N.b2TimeOfImpact.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">S</span>(){S.b2TOIInput.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">aa</span>(){aa.b2WorldManifold.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>aa<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2WorldManifold.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Z</span>(){Z.ClipVertex.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">d</span>(){d.Features.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">h</span>(){h.b2CircleShape.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);</td>
      </tr>
      <tr>
        <td id="L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="LC9" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>h<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2CircleShape.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">l</span>(){l.b2EdgeChainDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>l<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2EdgeChainDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">j</span>(){j.b2EdgeShape.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>j<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2EdgeShape.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">o</span>(){o.b2MassData.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">q</span>(){q.b2PolygonShape.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>q<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2PolygonShape.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">n</span>(){n.b2Shape.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="LC10" class="blob-code blob-code-inner js-file-line">n<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2Shape.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">a</span>(){a.b2Color.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>a<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2Color.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">c</span>(){c.b2Settings.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">g</span>(){g.b2Mat22.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>g<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2Mat22.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">b</span>(){b.b2Mat33.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>b<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2Mat33.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">e</span>(){e.b2Math.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">f</span>(){f.b2Sweep.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">m</span>(){m.b2Transform.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,</td>
      </tr>
      <tr>
        <td id="L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="LC11" class="blob-code blob-code-inner js-file-line">arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>m<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2Transform.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">r</span>(){r.b2Vec2.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>r<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2Vec2.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">s</span>(){s.b2Vec3.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>s<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2Vec3.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">v</span>(){v.b2Body.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>v<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2Body.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">t</span>(){t.b2BodyDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>t<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2BodyDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">x</span>(){x.b2ContactFilter.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,</td>
      </tr>
      <tr>
        <td id="L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="LC12" class="blob-code blob-code-inner js-file-line">arguments)}<span class="pl-k">function</span> <span class="pl-en">C</span>(){C.b2ContactImpulse.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">J</span>(){J.b2ContactListener.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">T</span>(){T.b2ContactManager.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>T<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2ContactManager.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">P</span>(){P.b2DebugDraw.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>P<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2DebugDraw.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">X</span>(){X.b2DestructionListener.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">$</span>(){$.b2FilterData.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">ba</span>(){ba.b2Fixture.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);</td>
      </tr>
      <tr>
        <td id="L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="LC13" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>ba<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2Fixture.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">ca</span>(){ca.b2FixtureDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>ca<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2FixtureDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">da</span>(){da.b2Island.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>da<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2Island.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Fa</span>(){Fa.b2TimeStep.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">ea</span>(){ea.b2World.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>ea<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2World.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Ga</span>(){Ga.b2CircleContact.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">fa</span>(){fa.b2Contact.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,</td>
      </tr>
      <tr>
        <td id="L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="LC14" class="blob-code blob-code-inner js-file-line">arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>fa<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2Contact.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">ga</span>(){ga.b2ContactConstraint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>ga<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2ContactConstraint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Ha</span>(){Ha.b2ContactConstraintPoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Ia</span>(){Ia.b2ContactEdge.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">ha</span>(){ha.b2ContactFactory.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>ha<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2ContactFactory.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Ja</span>(){Ja.b2ContactRegister.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Ka</span>(){Ka.b2ContactResult.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,</td>
      </tr>
      <tr>
        <td id="L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="LC15" class="blob-code blob-code-inner js-file-line">arguments)}<span class="pl-k">function</span> <span class="pl-en">ia</span>(){ia.b2ContactSolver.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>ia<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2ContactSolver.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">La</span>(){La.b2EdgeAndCircleContact.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">ja</span>(){ja.b2NullContact.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>ja<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2NullContact.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Ma</span>(){Ma.b2PolyAndCircleContact.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Na</span>(){Na.b2PolyAndEdgeContact.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Oa</span>(){Oa.b2PolygonContact.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">ka</span>(){ka.b2PositionSolverManifold.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,</td>
      </tr>
      <tr>
        <td id="L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="LC16" class="blob-code blob-code-inner js-file-line">arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>ka<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2PositionSolverManifold.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Pa</span>(){Pa.b2BuoyancyController.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Qa</span>(){Qa.b2ConstantAccelController.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Ra</span>(){Ra.b2ConstantForceController.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Sa</span>(){Sa.b2Controller.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Ta</span>(){Ta.b2ControllerEdge.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Ua</span>(){Ua.b2GravityController.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Va</span>(){Va.b2TensorDampingController.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}</td>
      </tr>
      <tr>
        <td id="L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="LC17" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">la</span>(){la.b2DistanceJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>la<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2DistanceJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">ma</span>(){ma.b2DistanceJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>ma<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2DistanceJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">na</span>(){na.b2FrictionJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>na<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2FrictionJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">oa</span>(){oa.b2FrictionJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>oa<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2FrictionJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">pa</span>(){pa.b2GearJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,</td>
      </tr>
      <tr>
        <td id="L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="LC18" class="blob-code blob-code-inner js-file-line">arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>pa<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2GearJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">qa</span>(){qa.b2GearJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>qa<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2GearJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Wa</span>(){Wa.b2Jacobian.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">ra</span>(){ra.b2Joint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>ra<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2Joint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">sa</span>(){sa.b2JointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>sa<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2JointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Xa</span>(){Xa.b2JointEdge.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}</td>
      </tr>
      <tr>
        <td id="L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="LC19" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span> <span class="pl-en">ta</span>(){ta.b2LineJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>ta<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2LineJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">ua</span>(){ua.b2LineJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>ua<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2LineJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">va</span>(){va.b2MouseJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>va<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2MouseJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">wa</span>(){wa.b2MouseJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>wa<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2MouseJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">xa</span>(){xa.b2PrismaticJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,</td>
      </tr>
      <tr>
        <td id="L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="LC20" class="blob-code blob-code-inner js-file-line">arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>xa<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2PrismaticJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">ya</span>(){ya.b2PrismaticJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>ya<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2PrismaticJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">za</span>(){za.b2PulleyJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>za<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2PulleyJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Aa</span>(){Aa.b2PulleyJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>Aa<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2PulleyJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Ba</span>(){Ba.b2RevoluteJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);</td>
      </tr>
      <tr>
        <td id="L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="LC21" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>Ba<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2RevoluteJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Ca</span>(){Ca.b2RevoluteJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>Ca<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2RevoluteJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Da</span>(){Da.b2WeldJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>Da<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2WeldJoint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}<span class="pl-k">function</span> <span class="pl-en">Ea</span>(){Ea.b2WeldJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.<span class="pl-c1">constructor</span><span class="pl-k">===</span>Ea<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.b2WeldJointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)}Box2D.Collision.IBroadPhase<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Box2D.Collision.IBroadPhase<span class="pl-pds">&quot;</span></span>;Box2D.Collision.b2AABB<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="LC22" class="blob-code blob-code-inner js-file-line">F;Box2D.Collision.b2Bound<span class="pl-k">=</span>G;Box2D.Collision.b2BoundValues<span class="pl-k">=</span>K;Box2D.Collision.b2Collision<span class="pl-k">=</span>y;Box2D.Collision.b2ContactID<span class="pl-k">=</span>w;Box2D.Collision.b2ContactPoint<span class="pl-k">=</span>A;Box2D.Collision.b2Distance<span class="pl-k">=</span>U;Box2D.Collision.b2DistanceInput<span class="pl-k">=</span>p;Box2D.Collision.b2DistanceOutput<span class="pl-k">=</span>B;Box2D.Collision.b2DistanceProxy<span class="pl-k">=</span>Q;Box2D.Collision.b2DynamicTree<span class="pl-k">=</span>V;Box2D.Collision.b2DynamicTreeBroadPhase<span class="pl-k">=</span>M;Box2D.Collision.b2DynamicTreeNode<span class="pl-k">=</span>L;Box2D.Collision.b2DynamicTreePair<span class="pl-k">=</span>I;Box2D.Collision.b2Manifold<span class="pl-k">=</span>W;Box2D.Collision.b2ManifoldPoint<span class="pl-k">=</span>Y;Box2D.Collision.b2Point<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="LC23" class="blob-code blob-code-inner js-file-line">k;Box2D.Collision.b2RayCastInput<span class="pl-k">=</span>z;Box2D.Collision.b2RayCastOutput<span class="pl-k">=</span>u;Box2D.Collision.b2Segment<span class="pl-k">=</span>D;Box2D.Collision.b2SeparationFunction<span class="pl-k">=</span>H;Box2D.Collision.b2Simplex<span class="pl-k">=</span>O;Box2D.Collision.b2SimplexCache<span class="pl-k">=</span>E;Box2D.Collision.b2SimplexVertex<span class="pl-k">=</span>R;Box2D.Collision.b2TimeOfImpact<span class="pl-k">=</span>N;Box2D.Collision.b2TOIInput<span class="pl-k">=</span>S;Box2D.Collision.b2WorldManifold<span class="pl-k">=</span>aa;Box2D.Collision.ClipVertex<span class="pl-k">=</span>Z;Box2D.Collision.Features<span class="pl-k">=</span>d;Box2D.Collision.Shapes.b2CircleShape<span class="pl-k">=</span>h;Box2D.Collision.Shapes.b2EdgeChainDef<span class="pl-k">=</span>l;Box2D.Collision.Shapes.b2EdgeShape<span class="pl-k">=</span>j;Box2D.Collision.Shapes.b2MassData<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="LC24" class="blob-code blob-code-inner js-file-line">o;Box2D.Collision.Shapes.b2PolygonShape<span class="pl-k">=</span>q;Box2D.Collision.Shapes.b2Shape<span class="pl-k">=</span>n;Box2D.Common.b2internal<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">&quot;</span>Box2D.Common.b2internal<span class="pl-pds">&quot;</span></span>;Box2D.Common.b2Color<span class="pl-k">=</span>a;Box2D.Common.b2Settings<span class="pl-k">=</span>c;Box2D.Common.<span class="pl-c1">Math</span>.b2Mat22<span class="pl-k">=</span>g;Box2D.Common.<span class="pl-c1">Math</span>.b2Mat33<span class="pl-k">=</span>b;Box2D.Common.<span class="pl-c1">Math</span>.b2Math<span class="pl-k">=</span>e;Box2D.Common.<span class="pl-c1">Math</span>.b2Sweep<span class="pl-k">=</span>f;Box2D.Common.<span class="pl-c1">Math</span>.b2Transform<span class="pl-k">=</span>m;Box2D.Common.<span class="pl-c1">Math</span>.b2Vec2<span class="pl-k">=</span>r;Box2D.Common.<span class="pl-c1">Math</span>.b2Vec3<span class="pl-k">=</span>s;Box2D.Dynamics.b2Body<span class="pl-k">=</span>v;Box2D.Dynamics.b2BodyDef<span class="pl-k">=</span>t;Box2D.Dynamics.b2ContactFilter<span class="pl-k">=</span>x;Box2D.Dynamics.b2ContactImpulse<span class="pl-k">=</span>C;Box2D.Dynamics.b2ContactListener<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="LC25" class="blob-code blob-code-inner js-file-line">J;Box2D.Dynamics.b2ContactManager<span class="pl-k">=</span>T;Box2D.Dynamics.b2DebugDraw<span class="pl-k">=</span>P;Box2D.Dynamics.b2DestructionListener<span class="pl-k">=</span>X;Box2D.Dynamics.b2FilterData<span class="pl-k">=</span>$;Box2D.Dynamics.b2Fixture<span class="pl-k">=</span>ba;Box2D.Dynamics.b2FixtureDef<span class="pl-k">=</span>ca;Box2D.Dynamics.b2Island<span class="pl-k">=</span>da;Box2D.Dynamics.b2TimeStep<span class="pl-k">=</span>Fa;Box2D.Dynamics.b2World<span class="pl-k">=</span>ea;Box2D.Dynamics.Contacts.b2CircleContact<span class="pl-k">=</span>Ga;Box2D.Dynamics.Contacts.b2Contact<span class="pl-k">=</span>fa;Box2D.Dynamics.Contacts.b2ContactConstraint<span class="pl-k">=</span>ga;Box2D.Dynamics.Contacts.b2ContactConstraintPoint<span class="pl-k">=</span>Ha;Box2D.Dynamics.Contacts.b2ContactEdge<span class="pl-k">=</span>Ia;Box2D.Dynamics.Contacts.b2ContactFactory<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="LC26" class="blob-code blob-code-inner js-file-line">ha;Box2D.Dynamics.Contacts.b2ContactRegister<span class="pl-k">=</span>Ja;Box2D.Dynamics.Contacts.b2ContactResult<span class="pl-k">=</span>Ka;Box2D.Dynamics.Contacts.b2ContactSolver<span class="pl-k">=</span>ia;Box2D.Dynamics.Contacts.b2EdgeAndCircleContact<span class="pl-k">=</span>La;Box2D.Dynamics.Contacts.b2NullContact<span class="pl-k">=</span>ja;Box2D.Dynamics.Contacts.b2PolyAndCircleContact<span class="pl-k">=</span>Ma;Box2D.Dynamics.Contacts.b2PolyAndEdgeContact<span class="pl-k">=</span>Na;Box2D.Dynamics.Contacts.b2PolygonContact<span class="pl-k">=</span>Oa;Box2D.Dynamics.Contacts.b2PositionSolverManifold<span class="pl-k">=</span>ka;Box2D.Dynamics.Controllers.b2BuoyancyController<span class="pl-k">=</span>Pa;Box2D.Dynamics.Controllers.b2ConstantAccelController<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="LC27" class="blob-code blob-code-inner js-file-line">Qa;Box2D.Dynamics.Controllers.b2ConstantForceController<span class="pl-k">=</span>Ra;Box2D.Dynamics.Controllers.b2Controller<span class="pl-k">=</span>Sa;Box2D.Dynamics.Controllers.b2ControllerEdge<span class="pl-k">=</span>Ta;Box2D.Dynamics.Controllers.b2GravityController<span class="pl-k">=</span>Ua;Box2D.Dynamics.Controllers.b2TensorDampingController<span class="pl-k">=</span>Va;Box2D.Dynamics.Joints.b2DistanceJoint<span class="pl-k">=</span>la;Box2D.Dynamics.Joints.b2DistanceJointDef<span class="pl-k">=</span>ma;Box2D.Dynamics.Joints.b2FrictionJoint<span class="pl-k">=</span>na;Box2D.Dynamics.Joints.b2FrictionJointDef<span class="pl-k">=</span>oa;Box2D.Dynamics.Joints.b2GearJoint<span class="pl-k">=</span>pa;Box2D.Dynamics.Joints.b2GearJointDef<span class="pl-k">=</span>qa;</td>
      </tr>
      <tr>
        <td id="L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="LC28" class="blob-code blob-code-inner js-file-line">Box2D.Dynamics.Joints.b2Jacobian<span class="pl-k">=</span>Wa;Box2D.Dynamics.Joints.b2Joint<span class="pl-k">=</span>ra;Box2D.Dynamics.Joints.b2JointDef<span class="pl-k">=</span>sa;Box2D.Dynamics.Joints.b2JointEdge<span class="pl-k">=</span>Xa;Box2D.Dynamics.Joints.b2LineJoint<span class="pl-k">=</span>ta;Box2D.Dynamics.Joints.b2LineJointDef<span class="pl-k">=</span>ua;Box2D.Dynamics.Joints.b2MouseJoint<span class="pl-k">=</span>va;Box2D.Dynamics.Joints.b2MouseJointDef<span class="pl-k">=</span>wa;Box2D.Dynamics.Joints.b2PrismaticJoint<span class="pl-k">=</span>xa;Box2D.Dynamics.Joints.b2PrismaticJointDef<span class="pl-k">=</span>ya;Box2D.Dynamics.Joints.b2PulleyJoint<span class="pl-k">=</span>za;Box2D.Dynamics.Joints.b2PulleyJointDef<span class="pl-k">=</span>Aa;Box2D.Dynamics.Joints.b2RevoluteJoint<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L29" class="blob-num js-line-number" data-line-number="29"></td>
        <td id="LC29" class="blob-code blob-code-inner js-file-line">Ba;Box2D.Dynamics.Joints.b2RevoluteJointDef<span class="pl-k">=</span>Ca;Box2D.Dynamics.Joints.b2WeldJoint<span class="pl-k">=</span>Da;Box2D.Dynamics.Joints.b2WeldJointDef<span class="pl-k">=</span>Ea})();Box2D.postDefs<span class="pl-k">=</span>[];</td>
      </tr>
      <tr>
        <td id="L30" class="blob-num js-line-number" data-line-number="30"></td>
        <td id="LC30" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> F<span class="pl-k">=</span>Box2D.Collision.Shapes.b2CircleShape,G<span class="pl-k">=</span>Box2D.Collision.Shapes.b2PolygonShape,K<span class="pl-k">=</span>Box2D.Collision.Shapes.b2Shape,y<span class="pl-k">=</span>Box2D.Common.b2Settings,w<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Math,A<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Sweep,U<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Transform,p<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Vec2,B<span class="pl-k">=</span>Box2D.Collision.b2AABB,Q<span class="pl-k">=</span>Box2D.Collision.b2Bound,V<span class="pl-k">=</span>Box2D.Collision.b2BoundValues,M<span class="pl-k">=</span>Box2D.Collision.b2Collision,L<span class="pl-k">=</span>Box2D.Collision.b2ContactID,I<span class="pl-k">=</span>Box2D.Collision.b2ContactPoint,W<span class="pl-k">=</span>Box2D.Collision.b2Distance,Y<span class="pl-k">=</span>Box2D.Collision.b2DistanceInput,</td>
      </tr>
      <tr>
        <td id="L31" class="blob-num js-line-number" data-line-number="31"></td>
        <td id="LC31" class="blob-code blob-code-inner js-file-line">k<span class="pl-k">=</span>Box2D.Collision.b2DistanceOutput,z<span class="pl-k">=</span>Box2D.Collision.b2DistanceProxy,u<span class="pl-k">=</span>Box2D.Collision.b2DynamicTree,D<span class="pl-k">=</span>Box2D.Collision.b2DynamicTreeBroadPhase,H<span class="pl-k">=</span>Box2D.Collision.b2DynamicTreeNode,O<span class="pl-k">=</span>Box2D.Collision.b2DynamicTreePair,E<span class="pl-k">=</span>Box2D.Collision.b2Manifold,R<span class="pl-k">=</span>Box2D.Collision.b2ManifoldPoint,N<span class="pl-k">=</span>Box2D.Collision.b2Point,S<span class="pl-k">=</span>Box2D.Collision.b2RayCastInput,aa<span class="pl-k">=</span>Box2D.Collision.b2RayCastOutput,Z<span class="pl-k">=</span>Box2D.Collision.b2Segment,d<span class="pl-k">=</span>Box2D.Collision.b2SeparationFunction,h<span class="pl-k">=</span>Box2D.Collision.b2Simplex,l<span class="pl-k">=</span>Box2D.Collision.b2SimplexCache,j<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L32" class="blob-num js-line-number" data-line-number="32"></td>
        <td id="LC32" class="blob-code blob-code-inner js-file-line">Box2D.Collision.b2SimplexVertex,o<span class="pl-k">=</span>Box2D.Collision.b2TimeOfImpact,q<span class="pl-k">=</span>Box2D.Collision.b2TOIInput,n<span class="pl-k">=</span>Box2D.Collision.b2WorldManifold,a<span class="pl-k">=</span>Box2D.Collision.ClipVertex,c<span class="pl-k">=</span>Box2D.Collision.Features,g<span class="pl-k">=</span>Box2D.Collision.IBroadPhase;<span class="pl-c1">B</span>.<span class="pl-en">b2AABB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.lowerBound<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-v">this</span>.upperBound<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsValid</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.upperBound.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.lowerBound.<span class="pl-c1">y</span>;<span class="pl-k">return</span> b<span class="pl-k">=</span>(b<span class="pl-k">=</span><span class="pl-v">this</span>.upperBound.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.lowerBound.<span class="pl-c1">x</span><span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>b<span class="pl-k">&gt;=</span><span class="pl-c1">0</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.lowerBound.IsValid()<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.upperBound.IsValid()};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetCenter</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">p</span>((<span class="pl-v">this</span>.lowerBound.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L33" class="blob-num js-line-number" data-line-number="33"></td>
        <td id="LC33" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.upperBound.<span class="pl-c1">x</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>,(<span class="pl-v">this</span>.lowerBound.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.upperBound.<span class="pl-c1">y</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>)};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetExtents</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">p</span>((<span class="pl-v">this</span>.upperBound.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.lowerBound.<span class="pl-c1">x</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>,(<span class="pl-v">this</span>.upperBound.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.lowerBound.<span class="pl-c1">y</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>)};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Contains</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-k">return</span> e<span class="pl-k">=</span>(e<span class="pl-k">=</span>(e<span class="pl-k">=</span>(e<span class="pl-k">=</span>e<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.lowerBound.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span>b.lowerBound.<span class="pl-c1">x</span>)<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.lowerBound.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span>b.lowerBound.<span class="pl-c1">y</span>)<span class="pl-k">&amp;&amp;</span>b.upperBound.<span class="pl-c1">x</span><span class="pl-k">&lt;=</span><span class="pl-v">this</span>.upperBound.<span class="pl-c1">x</span>)<span class="pl-k">&amp;&amp;</span>b.upperBound.<span class="pl-c1">y</span><span class="pl-k">&lt;=</span><span class="pl-v">this</span>.upperBound.<span class="pl-c1">y</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=-</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>,m<span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>,r<span class="pl-k">=</span>e.p1.<span class="pl-c1">x</span>,s<span class="pl-k">=</span>e.p1.<span class="pl-c1">y</span>,v<span class="pl-k">=</span>e.p2.<span class="pl-c1">x</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L34" class="blob-num js-line-number" data-line-number="34"></td>
        <td id="LC34" class="blob-code blob-code-inner js-file-line">e.p1.<span class="pl-c1">x</span>,t<span class="pl-k">=</span>e.p2.<span class="pl-c1">y</span><span class="pl-k">-</span>e.p1.<span class="pl-c1">y</span>,x<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(t),C<span class="pl-k">=</span>b.normal,J<span class="pl-k">=</span><span class="pl-c1">0</span>,T<span class="pl-k">=</span><span class="pl-c1">0</span>,P<span class="pl-k">=</span>J<span class="pl-k">=</span><span class="pl-c1">0</span>;P<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(v)<span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>){<span class="pl-k">if</span>(r<span class="pl-k">&lt;</span><span class="pl-v">this</span>.lowerBound.<span class="pl-c1">x</span><span class="pl-k">||</span><span class="pl-v">this</span>.upperBound.<span class="pl-c1">x</span><span class="pl-k">&lt;</span>r)<span class="pl-k">return</span> <span class="pl-c1">false</span>}<span class="pl-k">else</span>{J<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>v;T<span class="pl-k">=</span>(<span class="pl-v">this</span>.lowerBound.<span class="pl-c1">x</span><span class="pl-k">-</span>r)<span class="pl-k">*</span>J;J<span class="pl-k">=</span>(<span class="pl-v">this</span>.upperBound.<span class="pl-c1">x</span><span class="pl-k">-</span>r)<span class="pl-k">*</span>J;P<span class="pl-k">=-</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(T<span class="pl-k">&gt;</span>J){P<span class="pl-k">=</span>T;T<span class="pl-k">=</span>J;J<span class="pl-k">=</span>P;P<span class="pl-k">=</span><span class="pl-c1">1</span>}<span class="pl-k">if</span>(T<span class="pl-k">&gt;</span>f){C.<span class="pl-c1">x</span><span class="pl-k">=</span>P;C.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">=</span>T}m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(m,J);<span class="pl-k">if</span>(f<span class="pl-k">&gt;</span>m)<span class="pl-k">return</span> <span class="pl-c1">false</span>}<span class="pl-k">if</span>(x<span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>){<span class="pl-k">if</span>(s<span class="pl-k">&lt;</span><span class="pl-v">this</span>.lowerBound.<span class="pl-c1">y</span><span class="pl-k">||</span><span class="pl-v">this</span>.upperBound.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>s)<span class="pl-k">return</span> <span class="pl-c1">false</span>}<span class="pl-k">else</span>{J<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>t;T<span class="pl-k">=</span>(<span class="pl-v">this</span>.lowerBound.<span class="pl-c1">y</span><span class="pl-k">-</span>s)<span class="pl-k">*</span>J;J<span class="pl-k">=</span>(<span class="pl-v">this</span>.upperBound.<span class="pl-c1">y</span><span class="pl-k">-</span>s)<span class="pl-k">*</span>J;P<span class="pl-k">=-</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(T<span class="pl-k">&gt;</span>J){P<span class="pl-k">=</span>T;T<span class="pl-k">=</span>J;J<span class="pl-k">=</span>P;P<span class="pl-k">=</span><span class="pl-c1">1</span>}<span class="pl-k">if</span>(T<span class="pl-k">&gt;</span>f){C.<span class="pl-c1">y</span><span class="pl-k">=</span>P;C.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L35" class="blob-num js-line-number" data-line-number="35"></td>
        <td id="LC35" class="blob-code blob-code-inner js-file-line">T}m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(m,J);<span class="pl-k">if</span>(f<span class="pl-k">&gt;</span>m)<span class="pl-k">return</span> <span class="pl-c1">false</span>}b.fraction<span class="pl-k">=</span>f;<span class="pl-k">return</span> <span class="pl-c1">true</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">TestOverlap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span>b.lowerBound.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.upperBound.<span class="pl-c1">y</span>,f<span class="pl-k">=</span><span class="pl-v">this</span>.lowerBound.<span class="pl-c1">y</span><span class="pl-k">-</span>b.upperBound.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(b.lowerBound.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.upperBound.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">||</span>e<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.lowerBound.<span class="pl-c1">x</span><span class="pl-k">-</span>b.upperBound.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">||</span>f<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>;<span class="pl-k">return</span> <span class="pl-c1">true</span>};<span class="pl-c1">B</span>.<span class="pl-en">Combine</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>;f.Combine(b,e);<span class="pl-k">return</span> f};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Combine</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-v">this</span>.lowerBound.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(b.lowerBound.<span class="pl-c1">x</span>,e.lowerBound.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.lowerBound.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(b.lowerBound.<span class="pl-c1">y</span>,e.lowerBound.<span class="pl-c1">y</span>);</td>
      </tr>
      <tr>
        <td id="L36" class="blob-num js-line-number" data-line-number="36"></td>
        <td id="LC36" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.upperBound.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(b.upperBound.<span class="pl-c1">x</span>,e.upperBound.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.upperBound.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(b.upperBound.<span class="pl-c1">y</span>,e.upperBound.<span class="pl-c1">y</span>)};<span class="pl-c1">Q</span>.<span class="pl-en">b2Bound</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsLower</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-v">this</span>.<span class="pl-c1">value</span><span class="pl-k">&amp;</span><span class="pl-c1">1</span>)<span class="pl-k">==</span><span class="pl-c1">0</span>};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsUpper</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-v">this</span>.<span class="pl-c1">value</span><span class="pl-k">&amp;</span><span class="pl-c1">1</span>)<span class="pl-k">==</span><span class="pl-c1">1</span>};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Swap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">value</span>,f<span class="pl-k">=</span><span class="pl-v">this</span>.proxy,m<span class="pl-k">=</span><span class="pl-v">this</span>.stabbingCount;<span class="pl-v">this</span>.<span class="pl-c1">value</span><span class="pl-k">=</span>b.<span class="pl-c1">value</span>;<span class="pl-v">this</span>.proxy<span class="pl-k">=</span>b.proxy;<span class="pl-v">this</span>.stabbingCount<span class="pl-k">=</span>b.stabbingCount;b.<span class="pl-c1">value</span><span class="pl-k">=</span>e;b.proxy<span class="pl-k">=</span>f;b.stabbingCount<span class="pl-k">=</span>m};<span class="pl-c1">V</span>.<span class="pl-en">b2BoundValues</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2BoundValues</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.lowerValues<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L37" class="blob-num js-line-number" data-line-number="37"></td>
        <td id="LC37" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>;<span class="pl-v">this</span>.lowerValues[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.lowerValues[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.upperValues<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>;<span class="pl-v">this</span>.upperValues[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.upperValues[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">M</span>.<span class="pl-en">b2Collision</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">M</span>.<span class="pl-en">ClipSegmentToLine</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>){<span class="pl-k">if</span>(m<span class="pl-k">===</span><span class="pl-c1">undefined</span>)m<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> r,s<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">=</span>e[<span class="pl-c1">0</span>];<span class="pl-k">var</span> v<span class="pl-k">=</span>r.v;r<span class="pl-k">=</span>e[<span class="pl-c1">1</span>];<span class="pl-k">var</span> t<span class="pl-k">=</span>r.v,x<span class="pl-k">=</span>f.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>f.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span><span class="pl-k">-</span>m;r<span class="pl-k">=</span>f.<span class="pl-c1">x</span><span class="pl-k">*</span>t.<span class="pl-c1">x</span><span class="pl-k">+</span>f.<span class="pl-c1">y</span><span class="pl-k">*</span>t.<span class="pl-c1">y</span><span class="pl-k">-</span>m;x<span class="pl-k">&lt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>b[s<span class="pl-k">++</span>].Set(e[<span class="pl-c1">0</span>]);r<span class="pl-k">&lt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>b[s<span class="pl-k">++</span>].Set(e[<span class="pl-c1">1</span>]);<span class="pl-k">if</span>(x<span class="pl-k">*</span>r<span class="pl-k">&lt;</span><span class="pl-c1">0</span>){f<span class="pl-k">=</span>x<span class="pl-k">/</span>(x<span class="pl-k">-</span>r);r<span class="pl-k">=</span>b[s];r<span class="pl-k">=</span>r.v;r.<span class="pl-c1">x</span><span class="pl-k">=</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>f<span class="pl-k">*</span>(t.<span class="pl-c1">x</span><span class="pl-k">-</span>v.<span class="pl-c1">x</span>);r.<span class="pl-c1">y</span><span class="pl-k">=</span>v.<span class="pl-c1">y</span><span class="pl-k">+</span>f<span class="pl-k">*</span>(t.<span class="pl-c1">y</span><span class="pl-k">-</span>v.<span class="pl-c1">y</span>);r<span class="pl-k">=</span>b[s];r.<span class="pl-c1">id</span><span class="pl-k">=</span>(x<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>e[<span class="pl-c1">0</span>]<span class="pl-k">:</span>e[<span class="pl-c1">1</span>]).<span class="pl-c1">id</span>;<span class="pl-k">++</span>s}<span class="pl-k">return</span> s};M.EdgeSeparation<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L38" class="blob-num js-line-number" data-line-number="38"></td>
        <td id="LC38" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){<span class="pl-k">if</span>(f<span class="pl-k">===</span><span class="pl-c1">undefined</span>)f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">parseInt</span>(b.m_vertexCount);<span class="pl-k">var</span> s<span class="pl-k">=</span>b.m_vertices;b<span class="pl-k">=</span>b.m_normals;<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(m.m_vertexCount),t<span class="pl-k">=</span>m.m_vertices,x,C;x<span class="pl-k">=</span>e.R;C<span class="pl-k">=</span>b[f];b<span class="pl-k">=</span>x.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>C.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>C.<span class="pl-c1">y</span>;m<span class="pl-k">=</span>x.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>C.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>C.<span class="pl-c1">y</span>;x<span class="pl-k">=</span>r.R;<span class="pl-k">var</span> J<span class="pl-k">=</span>x.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>b<span class="pl-k">+</span>x.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>m;x<span class="pl-k">=</span>x.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>b<span class="pl-k">+</span>x.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>m;<span class="pl-k">for</span>(<span class="pl-k">var</span> T<span class="pl-k">=</span><span class="pl-c1">0</span>,P<span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>,X<span class="pl-k">=</span><span class="pl-c1">0</span>;X<span class="pl-k">&lt;</span>v;<span class="pl-k">++</span>X){C<span class="pl-k">=</span>t[X];C<span class="pl-k">=</span>C.<span class="pl-c1">x</span><span class="pl-k">*</span>J<span class="pl-k">+</span>C.<span class="pl-c1">y</span><span class="pl-k">*</span>x;<span class="pl-k">if</span>(C<span class="pl-k">&lt;</span>P){P<span class="pl-k">=</span>C;T<span class="pl-k">=</span>X}}C<span class="pl-k">=</span>s[f];x<span class="pl-k">=</span>e.R;f<span class="pl-k">=</span>e.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>C.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>C.<span class="pl-c1">y</span>);e<span class="pl-k">=</span>e.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>C.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>C.<span class="pl-c1">y</span>);C<span class="pl-k">=</span>t[T];x<span class="pl-k">=</span>r.R;s<span class="pl-k">=</span>r.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>C.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L39" class="blob-num js-line-number" data-line-number="39"></td>
        <td id="LC39" class="blob-code blob-code-inner js-file-line">x.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>C.<span class="pl-c1">y</span>);r<span class="pl-k">=</span>r.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>C.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>C.<span class="pl-c1">y</span>);s<span class="pl-k">-=</span>f;r<span class="pl-k">-=</span>e;<span class="pl-k">return</span> s<span class="pl-k">*</span>b<span class="pl-k">+</span>r<span class="pl-k">*</span>m};<span class="pl-c1">M</span>.<span class="pl-en">FindMaxSeparation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(e.m_vertexCount),v<span class="pl-k">=</span>e.m_normals,t,x;x<span class="pl-k">=</span>r.R;t<span class="pl-k">=</span>m.m_centroid;<span class="pl-k">var</span> C<span class="pl-k">=</span>r.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>t.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>t.<span class="pl-c1">y</span>),J<span class="pl-k">=</span>r.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>t.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>t.<span class="pl-c1">y</span>);x<span class="pl-k">=</span>f.R;t<span class="pl-k">=</span>e.m_centroid;C<span class="pl-k">-=</span>f.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>t.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>t.<span class="pl-c1">y</span>);J<span class="pl-k">-=</span>f.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>t.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>t.<span class="pl-c1">y</span>);x<span class="pl-k">=</span>C<span class="pl-k">*</span>f.R.col1.<span class="pl-c1">x</span><span class="pl-k">+</span>J<span class="pl-k">*</span>f.R.col1.<span class="pl-c1">y</span>;J<span class="pl-k">=</span>C<span class="pl-k">*</span>f.R.col2.<span class="pl-c1">x</span><span class="pl-k">+</span>J<span class="pl-k">*</span>f.R.col2.<span class="pl-c1">y</span>;C<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> T<span class="pl-k">=-</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>,P<span class="pl-k">=</span><span class="pl-c1">0</span>;P<span class="pl-k">&lt;</span>s;<span class="pl-k">++</span>P){t<span class="pl-k">=</span>v[P];</td>
      </tr>
      <tr>
        <td id="L40" class="blob-num js-line-number" data-line-number="40"></td>
        <td id="LC40" class="blob-code blob-code-inner js-file-line">t<span class="pl-k">=</span>t.<span class="pl-c1">x</span><span class="pl-k">*</span>x<span class="pl-k">+</span>t.<span class="pl-c1">y</span><span class="pl-k">*</span>J;<span class="pl-k">if</span>(t<span class="pl-k">&gt;</span>T){T<span class="pl-k">=</span>t;C<span class="pl-k">=</span>P}}v<span class="pl-k">=</span>M.EdgeSeparation(e,f,C,m,r);t<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(C<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">?</span>C<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>s<span class="pl-k">-</span><span class="pl-c1">1</span>);x<span class="pl-k">=</span>M.EdgeSeparation(e,f,t,m,r);J<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(C<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>s<span class="pl-k">?</span>C<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>);T<span class="pl-k">=</span>M.EdgeSeparation(e,f,J,m,r);<span class="pl-k">var</span> X<span class="pl-k">=</span>P<span class="pl-k">=</span><span class="pl-c1">0</span>,$<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(x<span class="pl-k">&gt;</span>v<span class="pl-k">&amp;&amp;</span>x<span class="pl-k">&gt;</span>T){$<span class="pl-k">=-</span><span class="pl-c1">1</span>;P<span class="pl-k">=</span>t;X<span class="pl-k">=</span>x}<span class="pl-k">else</span> <span class="pl-k">if</span>(T<span class="pl-k">&gt;</span>v){$<span class="pl-k">=</span><span class="pl-c1">1</span>;P<span class="pl-k">=</span>J;X<span class="pl-k">=</span>T}<span class="pl-k">else</span>{b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>C;<span class="pl-k">return</span> v}<span class="pl-k">for</span>(;;){C<span class="pl-k">=</span>$<span class="pl-k">==-</span><span class="pl-c1">1</span><span class="pl-k">?</span>P<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">?</span>P<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>s<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>P<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>s<span class="pl-k">?</span>P<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>;v<span class="pl-k">=</span>M.EdgeSeparation(e,f,C,m,r);<span class="pl-k">if</span>(v<span class="pl-k">&gt;</span>X){P<span class="pl-k">=</span>C;X<span class="pl-k">=</span>v}<span class="pl-k">else</span> <span class="pl-k">break</span>}b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>P;<span class="pl-k">return</span> X};<span class="pl-c1">M</span>.<span class="pl-en">FindIncidentEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>,<span class="pl-smi">s</span>){<span class="pl-k">if</span>(m<span class="pl-k">===</span><span class="pl-c1">undefined</span>)m<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-c1">parseInt</span>(e.m_vertexCount);<span class="pl-k">var</span> v<span class="pl-k">=</span>e.m_normals,t<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(r.m_vertexCount);</td>
      </tr>
      <tr>
        <td id="L41" class="blob-num js-line-number" data-line-number="41"></td>
        <td id="LC41" class="blob-code blob-code-inner js-file-line">e<span class="pl-k">=</span>r.m_vertices;r<span class="pl-k">=</span>r.m_normals;<span class="pl-k">var</span> x;x<span class="pl-k">=</span>f.R;f<span class="pl-k">=</span>v[m];v<span class="pl-k">=</span>x.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>f.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>f.<span class="pl-c1">y</span>;<span class="pl-k">var</span> C<span class="pl-k">=</span>x.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>f.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>f.<span class="pl-c1">y</span>;x<span class="pl-k">=</span>s.R;f<span class="pl-k">=</span>x.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>v<span class="pl-k">+</span>x.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>C;C<span class="pl-k">=</span>x.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>v<span class="pl-k">+</span>x.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>C;v<span class="pl-k">=</span>f;x<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> J<span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>,T<span class="pl-k">=</span><span class="pl-c1">0</span>;T<span class="pl-k">&lt;</span>t;<span class="pl-k">++</span>T){f<span class="pl-k">=</span>r[T];f<span class="pl-k">=</span>v<span class="pl-k">*</span>f.<span class="pl-c1">x</span><span class="pl-k">+</span>C<span class="pl-k">*</span>f.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(f<span class="pl-k">&lt;</span>J){J<span class="pl-k">=</span>f;x<span class="pl-k">=</span>T}}r<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(x);v<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(r<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>t<span class="pl-k">?</span>r<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>);t<span class="pl-k">=</span>b[<span class="pl-c1">0</span>];f<span class="pl-k">=</span>e[r];x<span class="pl-k">=</span>s.R;t.v.<span class="pl-c1">x</span><span class="pl-k">=</span>s.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>f.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>f.<span class="pl-c1">y</span>);t.v.<span class="pl-c1">y</span><span class="pl-k">=</span>s.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>f.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>f.<span class="pl-c1">y</span>);t.<span class="pl-c1">id</span>.features.referenceEdge<span class="pl-k">=</span>m;t.<span class="pl-c1">id</span>.features.incidentEdge<span class="pl-k">=</span>r;t.<span class="pl-c1">id</span>.features.incidentVertex<span class="pl-k">=</span><span class="pl-c1">0</span>;t<span class="pl-k">=</span>b[<span class="pl-c1">1</span>];f<span class="pl-k">=</span>e[v];</td>
      </tr>
      <tr>
        <td id="L42" class="blob-num js-line-number" data-line-number="42"></td>
        <td id="LC42" class="blob-code blob-code-inner js-file-line">x<span class="pl-k">=</span>s.R;t.v.<span class="pl-c1">x</span><span class="pl-k">=</span>s.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>f.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>f.<span class="pl-c1">y</span>);t.v.<span class="pl-c1">y</span><span class="pl-k">=</span>s.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>f.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>f.<span class="pl-c1">y</span>);t.<span class="pl-c1">id</span>.features.referenceEdge<span class="pl-k">=</span>m;t.<span class="pl-c1">id</span>.features.incidentEdge<span class="pl-k">=</span>v;t.<span class="pl-c1">id</span>.features.incidentVertex<span class="pl-k">=</span><span class="pl-c1">1</span>};<span class="pl-c1">M</span>.<span class="pl-en">MakeClipPointVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(<span class="pl-c1">2</span>);b[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a</span>;b[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">a</span>;<span class="pl-k">return</span> b};<span class="pl-c1">M</span>.<span class="pl-en">CollidePolygons</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){<span class="pl-k">var</span> s;b.m_pointCount<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> v<span class="pl-k">=</span>e.m_radius<span class="pl-k">+</span>m.m_radius;s<span class="pl-k">=</span><span class="pl-c1">0</span>;M.s_edgeAO[<span class="pl-c1">0</span>]<span class="pl-k">=</span>s;<span class="pl-k">var</span> t<span class="pl-k">=</span>M.FindMaxSeparation(M.s_edgeAO,e,f,m,r);s<span class="pl-k">=</span>M.s_edgeAO[<span class="pl-c1">0</span>];<span class="pl-k">if</span>(<span class="pl-k">!</span>(t<span class="pl-k">&gt;</span>v)){<span class="pl-k">var</span> x<span class="pl-k">=</span><span class="pl-c1">0</span>;M.s_edgeBO[<span class="pl-c1">0</span>]<span class="pl-k">=</span>x;<span class="pl-k">var</span> C<span class="pl-k">=</span>M.FindMaxSeparation(M.s_edgeBO,</td>
      </tr>
      <tr>
        <td id="L43" class="blob-num js-line-number" data-line-number="43"></td>
        <td id="LC43" class="blob-code blob-code-inner js-file-line">m,r,e,f);x<span class="pl-k">=</span>M.s_edgeBO[<span class="pl-c1">0</span>];<span class="pl-k">if</span>(<span class="pl-k">!</span>(C<span class="pl-k">&gt;</span>v)){<span class="pl-k">var</span> J<span class="pl-k">=</span><span class="pl-c1">0</span>,T<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(C<span class="pl-k">&gt;</span><span class="pl-c1">0.98</span><span class="pl-k">*</span>t<span class="pl-k">+</span><span class="pl-c1">0.0010</span>){t<span class="pl-k">=</span>m;m<span class="pl-k">=</span>e;e<span class="pl-k">=</span>r;f<span class="pl-k">=</span>f;J<span class="pl-k">=</span>x;b.m_type<span class="pl-k">=</span>E.e_faceB;T<span class="pl-k">=</span><span class="pl-c1">1</span>}<span class="pl-k">else</span>{t<span class="pl-k">=</span>e;m<span class="pl-k">=</span>m;e<span class="pl-k">=</span>f;f<span class="pl-k">=</span>r;J<span class="pl-k">=</span>s;b.m_type<span class="pl-k">=</span>E.e_faceA;T<span class="pl-k">=</span><span class="pl-c1">0</span>}s<span class="pl-k">=</span>M.s_incidentEdge;M.FindIncidentEdge(s,t,e,J,m,f);x<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(t.m_vertexCount);r<span class="pl-k">=</span>t.m_vertices;t<span class="pl-k">=</span>r[J];<span class="pl-k">var</span> P;P<span class="pl-k">=</span>J<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>x<span class="pl-k">?</span>r[<span class="pl-c1">parseInt</span>(J<span class="pl-k">+</span><span class="pl-c1">1</span>)]<span class="pl-k">:</span>r[<span class="pl-c1">0</span>];J<span class="pl-k">=</span>M.s_localTangent;J.Set(P.<span class="pl-c1">x</span><span class="pl-k">-</span>t.<span class="pl-c1">x</span>,P.<span class="pl-c1">y</span><span class="pl-k">-</span>t.<span class="pl-c1">y</span>);J.Normalize();r<span class="pl-k">=</span>M.s_localNormal;r.<span class="pl-c1">x</span><span class="pl-k">=</span>J.<span class="pl-c1">y</span>;r.<span class="pl-c1">y</span><span class="pl-k">=-</span>J.<span class="pl-c1">x</span>;m<span class="pl-k">=</span>M.s_planePoint;m.Set(<span class="pl-c1">0.5</span><span class="pl-k">*</span>(t.<span class="pl-c1">x</span><span class="pl-k">+</span>P.<span class="pl-c1">x</span>),<span class="pl-c1">0.5</span><span class="pl-k">*</span>(t.<span class="pl-c1">y</span><span class="pl-k">+</span>P.<span class="pl-c1">y</span>));C<span class="pl-k">=</span>M.s_tangent;x<span class="pl-k">=</span>e.R;C.<span class="pl-c1">x</span><span class="pl-k">=</span>x.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>J.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>J.<span class="pl-c1">y</span>;C.<span class="pl-c1">y</span><span class="pl-k">=</span>x.col1.<span class="pl-c1">y</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L44" class="blob-num js-line-number" data-line-number="44"></td>
        <td id="LC44" class="blob-code blob-code-inner js-file-line">J.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>J.<span class="pl-c1">y</span>;<span class="pl-k">var</span> X<span class="pl-k">=</span>M.s_tangent2;X.<span class="pl-c1">x</span><span class="pl-k">=-</span>C.<span class="pl-c1">x</span>;X.<span class="pl-c1">y</span><span class="pl-k">=-</span>C.<span class="pl-c1">y</span>;J<span class="pl-k">=</span>M.s_normal;J.<span class="pl-c1">x</span><span class="pl-k">=</span>C.<span class="pl-c1">y</span>;J.<span class="pl-c1">y</span><span class="pl-k">=-</span>C.<span class="pl-c1">x</span>;<span class="pl-k">var</span> $<span class="pl-k">=</span>M.s_v11,ba<span class="pl-k">=</span>M.s_v12;$.<span class="pl-c1">x</span><span class="pl-k">=</span>e.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>t.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>t.<span class="pl-c1">y</span>);$.<span class="pl-c1">y</span><span class="pl-k">=</span>e.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>t.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>t.<span class="pl-c1">y</span>);ba.<span class="pl-c1">x</span><span class="pl-k">=</span>e.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>P.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>P.<span class="pl-c1">y</span>);ba.<span class="pl-c1">y</span><span class="pl-k">=</span>e.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>P.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>P.<span class="pl-c1">y</span>);e<span class="pl-k">=</span>J.<span class="pl-c1">x</span><span class="pl-k">*</span>$.<span class="pl-c1">x</span><span class="pl-k">+</span>J.<span class="pl-c1">y</span><span class="pl-k">*</span>$.<span class="pl-c1">y</span>;x<span class="pl-k">=</span>C.<span class="pl-c1">x</span><span class="pl-k">*</span>ba.<span class="pl-c1">x</span><span class="pl-k">+</span>C.<span class="pl-c1">y</span><span class="pl-k">*</span>ba.<span class="pl-c1">y</span><span class="pl-k">+</span>v;P<span class="pl-k">=</span>M.s_clipPoints1;t<span class="pl-k">=</span>M.s_clipPoints2;ba<span class="pl-k">=</span><span class="pl-c1">0</span>;ba<span class="pl-k">=</span>M.ClipSegmentToLine(P,s,X,<span class="pl-k">-</span>C.<span class="pl-c1">x</span><span class="pl-k">*</span>$.<span class="pl-c1">x</span><span class="pl-k">-</span>C.<span class="pl-c1">y</span><span class="pl-k">*</span>$.<span class="pl-c1">y</span><span class="pl-k">+</span>v);<span class="pl-k">if</span>(<span class="pl-k">!</span>(ba<span class="pl-k">&lt;</span><span class="pl-c1">2</span>)){ba<span class="pl-k">=</span>M.ClipSegmentToLine(t,P,C,x);<span class="pl-k">if</span>(<span class="pl-k">!</span>(ba<span class="pl-k">&lt;</span><span class="pl-c1">2</span>)){b.m_localPlaneNormal.SetV(r);</td>
      </tr>
      <tr>
        <td id="L45" class="blob-num js-line-number" data-line-number="45"></td>
        <td id="LC45" class="blob-code blob-code-inner js-file-line">b.m_localPoint.SetV(m);<span class="pl-k">for</span>(m<span class="pl-k">=</span>r<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span>y.b2_maxManifoldPoints;<span class="pl-k">++</span>m){s<span class="pl-k">=</span>t[m];<span class="pl-k">if</span>(J.<span class="pl-c1">x</span><span class="pl-k">*</span>s.v.<span class="pl-c1">x</span><span class="pl-k">+</span>J.<span class="pl-c1">y</span><span class="pl-k">*</span>s.v.<span class="pl-c1">y</span><span class="pl-k">-</span>e<span class="pl-k">&lt;=</span>v){C<span class="pl-k">=</span>b.m_points[r];x<span class="pl-k">=</span>f.R;X<span class="pl-k">=</span>s.v.<span class="pl-c1">x</span><span class="pl-k">-</span>f.position.<span class="pl-c1">x</span>;$<span class="pl-k">=</span>s.v.<span class="pl-c1">y</span><span class="pl-k">-</span>f.position.<span class="pl-c1">y</span>;C.m_localPoint.<span class="pl-c1">x</span><span class="pl-k">=</span>X<span class="pl-k">*</span>x.col1.<span class="pl-c1">x</span><span class="pl-k">+</span>$<span class="pl-k">*</span>x.col1.<span class="pl-c1">y</span>;C.m_localPoint.<span class="pl-c1">y</span><span class="pl-k">=</span>X<span class="pl-k">*</span>x.col2.<span class="pl-c1">x</span><span class="pl-k">+</span>$<span class="pl-k">*</span>x.col2.<span class="pl-c1">y</span>;C.m_id.Set(s.<span class="pl-c1">id</span>);C.m_id.features.flip<span class="pl-k">=</span>T;<span class="pl-k">++</span>r}}b.m_pointCount<span class="pl-k">=</span>r}}}}};<span class="pl-c1">M</span>.<span class="pl-en">CollideCircles</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){b.m_pointCount<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> s,v;s<span class="pl-k">=</span>f.R;v<span class="pl-k">=</span>e.m_p;<span class="pl-k">var</span> t<span class="pl-k">=</span>f.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(s.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>s.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>);f<span class="pl-k">=</span>f.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(s.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>s.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>);s<span class="pl-k">=</span>r.R;v<span class="pl-k">=</span>m.m_p;t<span class="pl-k">=</span>r.position.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L46" class="blob-num js-line-number" data-line-number="46"></td>
        <td id="LC46" class="blob-code blob-code-inner js-file-line">(s.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>s.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>)<span class="pl-k">-</span>t;r<span class="pl-k">=</span>r.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(s.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>s.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>)<span class="pl-k">-</span>f;s<span class="pl-k">=</span>e.m_radius<span class="pl-k">+</span>m.m_radius;<span class="pl-k">if</span>(<span class="pl-k">!</span>(t<span class="pl-k">*</span>t<span class="pl-k">+</span>r<span class="pl-k">*</span>r<span class="pl-k">&gt;</span>s<span class="pl-k">*</span>s)){b.m_type<span class="pl-k">=</span>E.e_circles;b.m_localPoint.SetV(e.m_p);b.m_localPlaneNormal.SetZero();b.m_pointCount<span class="pl-k">=</span><span class="pl-c1">1</span>;b.m_points[<span class="pl-c1">0</span>].m_localPoint.SetV(m.m_p);b.m_points[<span class="pl-c1">0</span>].m_id.key<span class="pl-k">=</span><span class="pl-c1">0</span>}};<span class="pl-c1">M</span>.<span class="pl-en">CollidePolygonAndCircle</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){<span class="pl-k">var</span> s<span class="pl-k">=</span>b.m_pointCount<span class="pl-k">=</span><span class="pl-c1">0</span>,v<span class="pl-k">=</span><span class="pl-c1">0</span>,t,x;x<span class="pl-k">=</span>r.R;t<span class="pl-k">=</span>m.m_p;<span class="pl-k">var</span> C<span class="pl-k">=</span>r.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>t.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>t.<span class="pl-c1">y</span>);s<span class="pl-k">=</span>r.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(x.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>t.<span class="pl-c1">x</span><span class="pl-k">+</span>x.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>t.<span class="pl-c1">y</span>)<span class="pl-k">-</span>f.position.<span class="pl-c1">x</span>;v<span class="pl-k">=</span>C<span class="pl-k">-</span>f.position.<span class="pl-c1">y</span>;x<span class="pl-k">=</span>f.R;f<span class="pl-k">=</span>s<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L47" class="blob-num js-line-number" data-line-number="47"></td>
        <td id="LC47" class="blob-code blob-code-inner js-file-line">x.col1.<span class="pl-c1">x</span><span class="pl-k">+</span>v<span class="pl-k">*</span>x.col1.<span class="pl-c1">y</span>;x<span class="pl-k">=</span>s<span class="pl-k">*</span>x.col2.<span class="pl-c1">x</span><span class="pl-k">+</span>v<span class="pl-k">*</span>x.col2.<span class="pl-c1">y</span>;<span class="pl-k">var</span> J<span class="pl-k">=</span><span class="pl-c1">0</span>;C<span class="pl-k">=-</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>;r<span class="pl-k">=</span>e.m_radius<span class="pl-k">+</span>m.m_radius;<span class="pl-k">var</span> T<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(e.m_vertexCount),P<span class="pl-k">=</span>e.m_vertices;e<span class="pl-k">=</span>e.m_normals;<span class="pl-k">for</span>(<span class="pl-k">var</span> X<span class="pl-k">=</span><span class="pl-c1">0</span>;X<span class="pl-k">&lt;</span>T;<span class="pl-k">++</span>X){t<span class="pl-k">=</span>P[X];s<span class="pl-k">=</span>f<span class="pl-k">-</span>t.<span class="pl-c1">x</span>;v<span class="pl-k">=</span>x<span class="pl-k">-</span>t.<span class="pl-c1">y</span>;t<span class="pl-k">=</span>e[X];s<span class="pl-k">=</span>t.<span class="pl-c1">x</span><span class="pl-k">*</span>s<span class="pl-k">+</span>t.<span class="pl-c1">y</span><span class="pl-k">*</span>v;<span class="pl-k">if</span>(s<span class="pl-k">&gt;</span>r)<span class="pl-k">return</span>;<span class="pl-k">if</span>(s<span class="pl-k">&gt;</span>C){C<span class="pl-k">=</span>s;J<span class="pl-k">=</span>X}}s<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(J);v<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(s<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>T<span class="pl-k">?</span>s<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>);t<span class="pl-k">=</span>P[s];P<span class="pl-k">=</span>P[v];<span class="pl-k">if</span>(C<span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>){b.m_pointCount<span class="pl-k">=</span><span class="pl-c1">1</span>;b.m_type<span class="pl-k">=</span>E.e_faceA;b.m_localPlaneNormal.SetV(e[J]);b.m_localPoint.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(t.<span class="pl-c1">x</span><span class="pl-k">+</span>P.<span class="pl-c1">x</span>);b.m_localPoint.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(t.<span class="pl-c1">y</span><span class="pl-k">+</span>P.<span class="pl-c1">y</span>)}<span class="pl-k">else</span>{C<span class="pl-k">=</span>(f<span class="pl-k">-</span>P.<span class="pl-c1">x</span>)<span class="pl-k">*</span>(t.<span class="pl-c1">x</span><span class="pl-k">-</span>P.<span class="pl-c1">x</span>)<span class="pl-k">+</span>(x<span class="pl-k">-</span>P.<span class="pl-c1">y</span>)<span class="pl-k">*</span>(t.<span class="pl-c1">y</span><span class="pl-k">-</span>P.<span class="pl-c1">y</span>);</td>
      </tr>
      <tr>
        <td id="L48" class="blob-num js-line-number" data-line-number="48"></td>
        <td id="LC48" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>((f<span class="pl-k">-</span>t.<span class="pl-c1">x</span>)<span class="pl-k">*</span>(P.<span class="pl-c1">x</span><span class="pl-k">-</span>t.<span class="pl-c1">x</span>)<span class="pl-k">+</span>(x<span class="pl-k">-</span>t.<span class="pl-c1">y</span>)<span class="pl-k">*</span>(P.<span class="pl-c1">y</span><span class="pl-k">-</span>t.<span class="pl-c1">y</span>)<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){<span class="pl-k">if</span>((f<span class="pl-k">-</span>t.<span class="pl-c1">x</span>)<span class="pl-k">*</span>(f<span class="pl-k">-</span>t.<span class="pl-c1">x</span>)<span class="pl-k">+</span>(x<span class="pl-k">-</span>t.<span class="pl-c1">y</span>)<span class="pl-k">*</span>(x<span class="pl-k">-</span>t.<span class="pl-c1">y</span>)<span class="pl-k">&gt;</span>r<span class="pl-k">*</span>r)<span class="pl-k">return</span>;b.m_pointCount<span class="pl-k">=</span><span class="pl-c1">1</span>;b.m_type<span class="pl-k">=</span>E.e_faceA;b.m_localPlaneNormal.<span class="pl-c1">x</span><span class="pl-k">=</span>f<span class="pl-k">-</span>t.<span class="pl-c1">x</span>;b.m_localPlaneNormal.<span class="pl-c1">y</span><span class="pl-k">=</span>x<span class="pl-k">-</span>t.<span class="pl-c1">y</span>;b.m_localPlaneNormal.Normalize();b.m_localPoint.SetV(t)}<span class="pl-k">else</span> <span class="pl-k">if</span>(C<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){<span class="pl-k">if</span>((f<span class="pl-k">-</span>P.<span class="pl-c1">x</span>)<span class="pl-k">*</span>(f<span class="pl-k">-</span>P.<span class="pl-c1">x</span>)<span class="pl-k">+</span>(x<span class="pl-k">-</span>P.<span class="pl-c1">y</span>)<span class="pl-k">*</span>(x<span class="pl-k">-</span>P.<span class="pl-c1">y</span>)<span class="pl-k">&gt;</span>r<span class="pl-k">*</span>r)<span class="pl-k">return</span>;b.m_pointCount<span class="pl-k">=</span><span class="pl-c1">1</span>;b.m_type<span class="pl-k">=</span>E.e_faceA;b.m_localPlaneNormal.<span class="pl-c1">x</span><span class="pl-k">=</span>f<span class="pl-k">-</span>P.<span class="pl-c1">x</span>;b.m_localPlaneNormal.<span class="pl-c1">y</span><span class="pl-k">=</span>x<span class="pl-k">-</span>P.<span class="pl-c1">y</span>;b.m_localPlaneNormal.Normalize();b.m_localPoint.SetV(P)}<span class="pl-k">else</span>{J<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(t.<span class="pl-c1">x</span><span class="pl-k">+</span>P.<span class="pl-c1">x</span>);t<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(t.<span class="pl-c1">y</span><span class="pl-k">+</span>P.<span class="pl-c1">y</span>);C<span class="pl-k">=</span>(f<span class="pl-k">-</span>J)<span class="pl-k">*</span>e[s].<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L49" class="blob-num js-line-number" data-line-number="49"></td>
        <td id="LC49" class="blob-code blob-code-inner js-file-line">(x<span class="pl-k">-</span>t)<span class="pl-k">*</span>e[s].<span class="pl-c1">y</span>;<span class="pl-k">if</span>(C<span class="pl-k">&gt;</span>r)<span class="pl-k">return</span>;b.m_pointCount<span class="pl-k">=</span><span class="pl-c1">1</span>;b.m_type<span class="pl-k">=</span>E.e_faceA;b.m_localPlaneNormal.<span class="pl-c1">x</span><span class="pl-k">=</span>e[s].<span class="pl-c1">x</span>;b.m_localPlaneNormal.<span class="pl-c1">y</span><span class="pl-k">=</span>e[s].<span class="pl-c1">y</span>;b.m_localPlaneNormal.Normalize();b.m_localPoint.Set(J,t)}}b.m_points[<span class="pl-c1">0</span>].m_localPoint.SetV(m.m_p);b.m_points[<span class="pl-c1">0</span>].m_id.key<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">M</span>.<span class="pl-en">TestOverlap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>e.lowerBound,m<span class="pl-k">=</span>b.upperBound,r<span class="pl-k">=</span>f.<span class="pl-c1">x</span><span class="pl-k">-</span>m.<span class="pl-c1">x</span>,s<span class="pl-k">=</span>f.<span class="pl-c1">y</span><span class="pl-k">-</span>m.<span class="pl-c1">y</span>;f<span class="pl-k">=</span>b.lowerBound;m<span class="pl-k">=</span>e.upperBound;<span class="pl-k">var</span> v<span class="pl-k">=</span>f.<span class="pl-c1">y</span><span class="pl-k">-</span>m.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(r<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">||</span>s<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>;<span class="pl-k">if</span>(f.<span class="pl-c1">x</span><span class="pl-k">-</span>m.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">||</span>v<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>;<span class="pl-k">return</span> <span class="pl-c1">true</span>};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Collision.b2Collision.s_incidentEdge<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L50" class="blob-num js-line-number" data-line-number="50"></td>
        <td id="LC50" class="blob-code blob-code-inner js-file-line">M.MakeClipPointVector();Box2D.Collision.b2Collision.s_clipPoints1<span class="pl-k">=</span>M.MakeClipPointVector();Box2D.Collision.b2Collision.s_clipPoints2<span class="pl-k">=</span>M.MakeClipPointVector();Box2D.Collision.b2Collision.s_edgeAO<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(<span class="pl-c1">1</span>);Box2D.Collision.b2Collision.s_edgeBO<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(<span class="pl-c1">1</span>);Box2D.Collision.b2Collision.s_localTangent<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;Box2D.Collision.b2Collision.s_localNormal<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;Box2D.Collision.b2Collision.s_planePoint<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;Box2D.Collision.b2Collision.s_normal<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;Box2D.Collision.b2Collision.s_tangent<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L51" class="blob-num js-line-number" data-line-number="51"></td>
        <td id="LC51" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">p</span>;Box2D.Collision.b2Collision.s_tangent2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;Box2D.Collision.b2Collision.s_v11<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;Box2D.Collision.b2Collision.s_v12<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;Box2D.Collision.b2Collision.b2CollidePolyTempVec<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;Box2D.Collision.b2Collision.b2_nullFeature<span class="pl-k">=</span><span class="pl-c1">255</span>});<span class="pl-c1">L</span>.<span class="pl-en">b2ContactID</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.features<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">c</span>};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2ContactID</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.features._m_id<span class="pl-k">=</span><span class="pl-v">this</span>};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-v">this</span>.key<span class="pl-k">=</span>b._key};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">L</span>;b.key<span class="pl-k">=</span><span class="pl-v">this</span>.key;<span class="pl-k">return</span> b};<span class="pl-c1">Object</span>.defineProperty(L.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>key<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,</td>
      </tr>
      <tr>
        <td id="L52" class="blob-num js-line-number" data-line-number="52"></td>
        <td id="LC52" class="blob-code blob-code-inner js-file-line">configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._key}});<span class="pl-c1">Object</span>.defineProperty(L.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>key<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._key<span class="pl-k">=</span>b;<span class="pl-v">this</span>.features._referenceEdge<span class="pl-k">=</span><span class="pl-v">this</span>._key<span class="pl-k">&amp;</span><span class="pl-c1">255</span>;<span class="pl-v">this</span>.features._incidentEdge<span class="pl-k">=</span>(<span class="pl-v">this</span>._key<span class="pl-k">&amp;</span><span class="pl-c1">65280</span>)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">8</span><span class="pl-k">&amp;</span><span class="pl-c1">255</span>;<span class="pl-v">this</span>.features._incidentVertex<span class="pl-k">=</span>(<span class="pl-v">this</span>._key<span class="pl-k">&amp;</span><span class="pl-c1">16711680</span>)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">16</span><span class="pl-k">&amp;</span><span class="pl-c1">255</span>;<span class="pl-v">this</span>.features._flip<span class="pl-k">=</span>(<span class="pl-v">this</span>._key<span class="pl-k">&amp;</span><span class="pl-c1">4278190080</span>)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">24</span><span class="pl-k">&amp;</span><span class="pl-c1">255</span>}});<span class="pl-c1">I</span>.<span class="pl-en">b2ContactPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.position<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-v">this</span>.velocity<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-v">this</span>.normal<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-v">this</span>.<span class="pl-c1">id</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">L</span>};W.b2Distance<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L53" class="blob-num js-line-number" data-line-number="53"></td>
        <td id="LC53" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){};<span class="pl-c1">W</span>.<span class="pl-en">Distance</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">++</span>W.b2_gjkCalls;<span class="pl-k">var</span> m<span class="pl-k">=</span>f.proxyA,r<span class="pl-k">=</span>f.proxyB,s<span class="pl-k">=</span>f.transformA,v<span class="pl-k">=</span>f.transformB,t<span class="pl-k">=</span>W.s_simplex;t.ReadCache(e,m,s,r,v);<span class="pl-k">var</span> x<span class="pl-k">=</span>t.m_vertices,C<span class="pl-k">=</span>W.s_saveA,J<span class="pl-k">=</span>W.s_saveB,T<span class="pl-k">=</span><span class="pl-c1">0</span>;t.GetClosestPoint().LengthSquared();<span class="pl-k">for</span>(<span class="pl-k">var</span> P<span class="pl-k">=</span><span class="pl-c1">0</span>,X,$<span class="pl-k">=</span><span class="pl-c1">0</span>;$<span class="pl-k">&lt;</span><span class="pl-c1">20</span>;){T<span class="pl-k">=</span>t.m_count;<span class="pl-k">for</span>(P<span class="pl-k">=</span><span class="pl-c1">0</span>;P<span class="pl-k">&lt;</span>T;P<span class="pl-k">++</span>){C[P]<span class="pl-k">=</span>x[P].indexA;J[P]<span class="pl-k">=</span>x[P].indexB}<span class="pl-k">switch</span>(t.m_count){<span class="pl-k">case</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span><span class="pl-k">:</span>t.Solve2();<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">3</span><span class="pl-k">:</span>t.Solve3();<span class="pl-k">break</span>;<span class="pl-k">default</span><span class="pl-k">:</span>y.b2Assert(<span class="pl-c1">false</span>)}<span class="pl-k">if</span>(t.m_count<span class="pl-k">==</span><span class="pl-c1">3</span>)<span class="pl-k">break</span>;X<span class="pl-k">=</span>t.GetClosestPoint();X.LengthSquared();P<span class="pl-k">=</span>t.GetSearchDirection();</td>
      </tr>
      <tr>
        <td id="L54" class="blob-num js-line-number" data-line-number="54"></td>
        <td id="LC54" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(P.LengthSquared()<span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span><span class="pl-k">*</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)<span class="pl-k">break</span>;X<span class="pl-k">=</span>x[t.m_count];X.indexA<span class="pl-k">=</span>m.GetSupport(w.MulTMV(s.R,P.GetNegative()));X.wA<span class="pl-k">=</span>w.MulX(s,m.GetVertex(X.indexA));X.indexB<span class="pl-k">=</span>r.GetSupport(w.MulTMV(v.R,P));X.wB<span class="pl-k">=</span>w.MulX(v,r.GetVertex(X.indexB));X.w<span class="pl-k">=</span>w.SubtractVV(X.wB,X.wA);<span class="pl-k">++</span>$;<span class="pl-k">++</span>W.b2_gjkIters;<span class="pl-k">var</span> ba<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">for</span>(P<span class="pl-k">=</span><span class="pl-c1">0</span>;P<span class="pl-k">&lt;</span>T;P<span class="pl-k">++</span>)<span class="pl-k">if</span>(X.indexA<span class="pl-k">==</span>C[P]<span class="pl-k">&amp;&amp;</span>X.indexB<span class="pl-k">==</span>J[P]){ba<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-k">break</span>}<span class="pl-k">if</span>(ba)<span class="pl-k">break</span>;<span class="pl-k">++</span>t.m_count}W.b2_gjkMaxIters<span class="pl-k">=</span>w.Max(W.b2_gjkMaxIters,$);t.GetWitnessPoints(b.pointA,b.pointB);b.distance<span class="pl-k">=</span>w.SubtractVV(b.pointA,</td>
      </tr>
      <tr>
        <td id="L55" class="blob-num js-line-number" data-line-number="55"></td>
        <td id="LC55" class="blob-code blob-code-inner js-file-line">b.pointB).Length();b.iterations<span class="pl-k">=</span>$;t.WriteCache(e);<span class="pl-k">if</span>(f.useRadii){e<span class="pl-k">=</span>m.m_radius;r<span class="pl-k">=</span>r.m_radius;<span class="pl-k">if</span>(b.distance<span class="pl-k">&gt;</span>e<span class="pl-k">+</span>r<span class="pl-k">&amp;&amp;</span>b.distance<span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>){b.distance<span class="pl-k">-=</span>e<span class="pl-k">+</span>r;f<span class="pl-k">=</span>w.SubtractVV(b.pointB,b.pointA);f.Normalize();b.pointA.<span class="pl-c1">x</span><span class="pl-k">+=</span>e<span class="pl-k">*</span>f.<span class="pl-c1">x</span>;b.pointA.<span class="pl-c1">y</span><span class="pl-k">+=</span>e<span class="pl-k">*</span>f.<span class="pl-c1">y</span>;b.pointB.<span class="pl-c1">x</span><span class="pl-k">-=</span>r<span class="pl-k">*</span>f.<span class="pl-c1">x</span>;b.pointB.<span class="pl-c1">y</span><span class="pl-k">-=</span>r<span class="pl-k">*</span>f.<span class="pl-c1">y</span>}<span class="pl-k">else</span>{X<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;X.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(b.pointA.<span class="pl-c1">x</span><span class="pl-k">+</span>b.pointB.<span class="pl-c1">x</span>);X.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(b.pointA.<span class="pl-c1">y</span><span class="pl-k">+</span>b.pointB.<span class="pl-c1">y</span>);b.pointA.<span class="pl-c1">x</span><span class="pl-k">=</span>b.pointB.<span class="pl-c1">x</span><span class="pl-k">=</span>X.<span class="pl-c1">x</span>;b.pointA.<span class="pl-c1">y</span><span class="pl-k">=</span>b.pointB.<span class="pl-c1">y</span><span class="pl-k">=</span>X.<span class="pl-c1">y</span>;b.distance<span class="pl-k">=</span><span class="pl-c1">0</span>}}};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Collision.b2Distance.s_simplex<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">h</span>;Box2D.Collision.b2Distance.s_saveA<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L56" class="blob-num js-line-number" data-line-number="56"></td>
        <td id="LC56" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(<span class="pl-c1">3</span>);Box2D.Collision.b2Distance.s_saveB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(<span class="pl-c1">3</span>)});<span class="pl-c1">Y</span>.<span class="pl-en">b2DistanceInput</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">k</span>.<span class="pl-en">b2DistanceOutput</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.pointA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-v">this</span>.pointB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-c1">z</span>.<span class="pl-en">b2DistanceProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">switch</span>(b.GetType()){<span class="pl-k">case</span> K.e_circleShape<span class="pl-k">:</span>b<span class="pl-k">=</span>b <span class="pl-k">instanceof</span> F<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_vertices<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(<span class="pl-c1">1</span>,<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_vertices[<span class="pl-c1">0</span>]<span class="pl-k">=</span>b.m_p;<span class="pl-v">this</span>.m_count<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.m_radius<span class="pl-k">=</span>b.m_radius;<span class="pl-k">break</span>;<span class="pl-k">case</span> K.e_polygonShape<span class="pl-k">:</span>b<span class="pl-k">=</span>b <span class="pl-k">instanceof</span> G<span class="pl-k">?</span>b<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_vertices<span class="pl-k">=</span>b.m_vertices;<span class="pl-v">this</span>.m_count<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L57" class="blob-num js-line-number" data-line-number="57"></td>
        <td id="LC57" class="blob-code blob-code-inner js-file-line">b.m_vertexCount;<span class="pl-v">this</span>.m_radius<span class="pl-k">=</span>b.m_radius;<span class="pl-k">break</span>;<span class="pl-k">default</span><span class="pl-k">:</span>y.b2Assert(<span class="pl-c1">false</span>)}};<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetSupport</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-v">this</span>.m_vertices[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">*</span>b.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_vertices[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">*</span>b.<span class="pl-c1">y</span>,m<span class="pl-k">=</span><span class="pl-c1">1</span>;m<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_count;<span class="pl-k">++</span>m){<span class="pl-k">var</span> r<span class="pl-k">=</span><span class="pl-v">this</span>.m_vertices[m].<span class="pl-c1">x</span><span class="pl-k">*</span>b.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_vertices[m].<span class="pl-c1">y</span><span class="pl-k">*</span>b.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(r<span class="pl-k">&gt;</span>f){e<span class="pl-k">=</span>m;f<span class="pl-k">=</span>r}}<span class="pl-k">return</span> e};<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetSupportVertex</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-v">this</span>.m_vertices[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">*</span>b.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_vertices[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">*</span>b.<span class="pl-c1">y</span>,m<span class="pl-k">=</span><span class="pl-c1">1</span>;m<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_count;<span class="pl-k">++</span>m){<span class="pl-k">var</span> r<span class="pl-k">=</span><span class="pl-v">this</span>.m_vertices[m].<span class="pl-c1">x</span><span class="pl-k">*</span>b.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_vertices[m].<span class="pl-c1">y</span><span class="pl-k">*</span>b.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(r<span class="pl-k">&gt;</span>f){e<span class="pl-k">=</span>m;f<span class="pl-k">=</span>r}}<span class="pl-k">return</span> <span class="pl-v">this</span>.m_vertices[e]};</td>
      </tr>
      <tr>
        <td id="L58" class="blob-num js-line-number" data-line-number="58"></td>
        <td id="LC58" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetVertexCount</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_count};<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetVertex</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">0</span>;y.b2Assert(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>b<span class="pl-k">&amp;&amp;</span>b<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_count);<span class="pl-k">return</span> <span class="pl-v">this</span>.m_vertices[b]};<span class="pl-c1">u</span>.<span class="pl-en">b2DynamicTree</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2DynamicTree</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_freeList<span class="pl-k">=</span><span class="pl-v">this</span>.m_root<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_insertionCount<span class="pl-k">=</span><span class="pl-v">this</span>.m_path<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CreateProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-v">this</span>.AllocateNode(),m<span class="pl-k">=</span>y.b2_aabbExtension,r<span class="pl-k">=</span>y.b2_aabbExtension;f.aabb.lowerBound.<span class="pl-c1">x</span><span class="pl-k">=</span>b.lowerBound.<span class="pl-c1">x</span><span class="pl-k">-</span>m;f.aabb.lowerBound.<span class="pl-c1">y</span><span class="pl-k">=</span>b.lowerBound.<span class="pl-c1">y</span><span class="pl-k">-</span>r;f.aabb.upperBound.<span class="pl-c1">x</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L59" class="blob-num js-line-number" data-line-number="59"></td>
        <td id="LC59" class="blob-code blob-code-inner js-file-line">b.upperBound.<span class="pl-c1">x</span><span class="pl-k">+</span>m;f.aabb.upperBound.<span class="pl-c1">y</span><span class="pl-k">=</span>b.upperBound.<span class="pl-c1">y</span><span class="pl-k">+</span>r;f.userData<span class="pl-k">=</span>e;<span class="pl-v">this</span>.InsertLeaf(f);<span class="pl-k">return</span> f};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DestroyProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-v">this</span>.RemoveLeaf(b);<span class="pl-v">this</span>.FreeNode(b)};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">MoveProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){y.b2Assert(b.IsLeaf());<span class="pl-k">if</span>(b.aabb.Contains(e))<span class="pl-k">return</span> <span class="pl-c1">false</span>;<span class="pl-v">this</span>.RemoveLeaf(b);<span class="pl-k">var</span> m<span class="pl-k">=</span>y.b2_aabbExtension<span class="pl-k">+</span>y.b2_aabbMultiplier<span class="pl-k">*</span>(f.<span class="pl-c1">x</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>f.<span class="pl-c1">x</span><span class="pl-k">:-</span>f.<span class="pl-c1">x</span>);f<span class="pl-k">=</span>y.b2_aabbExtension<span class="pl-k">+</span>y.b2_aabbMultiplier<span class="pl-k">*</span>(f.<span class="pl-c1">y</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>f.<span class="pl-c1">y</span><span class="pl-k">:-</span>f.<span class="pl-c1">y</span>);b.aabb.lowerBound.<span class="pl-c1">x</span><span class="pl-k">=</span>e.lowerBound.<span class="pl-c1">x</span><span class="pl-k">-</span>m;b.aabb.lowerBound.<span class="pl-c1">y</span><span class="pl-k">=</span>e.lowerBound.<span class="pl-c1">y</span><span class="pl-k">-</span>f;b.aabb.upperBound.<span class="pl-c1">x</span><span class="pl-k">=</span>e.upperBound.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L60" class="blob-num js-line-number" data-line-number="60"></td>
        <td id="LC60" class="blob-code blob-code-inner js-file-line">m;b.aabb.upperBound.<span class="pl-c1">y</span><span class="pl-k">=</span>e.upperBound.<span class="pl-c1">y</span><span class="pl-k">+</span>f;<span class="pl-v">this</span>.InsertLeaf(b);<span class="pl-k">return</span> <span class="pl-c1">true</span>};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Rebalance</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_root<span class="pl-k">!=</span><span class="pl-c1">null</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>b;e<span class="pl-k">++</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-v">this</span>.m_root,m<span class="pl-k">=</span><span class="pl-c1">0</span>;f.IsLeaf()<span class="pl-k">==</span><span class="pl-c1">false</span>;){f<span class="pl-k">=</span><span class="pl-v">this</span>.m_path<span class="pl-k">&gt;&gt;</span>m<span class="pl-k">&amp;</span><span class="pl-c1">1</span><span class="pl-k">?</span>f.child2<span class="pl-k">:</span>f.child1;m<span class="pl-k">=</span>m<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&amp;</span><span class="pl-c1">31</span>}<span class="pl-k">++</span><span class="pl-v">this</span>.m_path;<span class="pl-v">this</span>.RemoveLeaf(f);<span class="pl-v">this</span>.InsertLeaf(f)}};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFatAABB</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> b.aabb};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetUserData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> b.userData};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Query</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_root<span class="pl-k">!=</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>,m<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(f[m<span class="pl-k">++</span>]<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L61" class="blob-num js-line-number" data-line-number="61"></td>
        <td id="LC61" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_root;m<span class="pl-k">&gt;</span><span class="pl-c1">0</span>;){<span class="pl-k">var</span> r<span class="pl-k">=</span>f[<span class="pl-k">--</span>m];<span class="pl-k">if</span>(r.aabb.TestOverlap(e))<span class="pl-k">if</span>(r.IsLeaf()){<span class="pl-k">if</span>(<span class="pl-k">!</span>b(r))<span class="pl-k">break</span>}<span class="pl-k">else</span>{f[m<span class="pl-k">++</span>]<span class="pl-k">=</span>r.child1;f[m<span class="pl-k">++</span>]<span class="pl-k">=</span>r.child2}}}};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_root<span class="pl-k">!=</span><span class="pl-c1">null</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span>e.p1,m<span class="pl-k">=</span>e.p2,r<span class="pl-k">=</span>w.SubtractVV(f,m);r.Normalize();r<span class="pl-k">=</span>w.CrossFV(<span class="pl-c1">1</span>,r);<span class="pl-k">var</span> s<span class="pl-k">=</span>w.AbsV(r),v<span class="pl-k">=</span>e.maxFraction,t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>,x<span class="pl-k">=</span><span class="pl-c1">0</span>,C<span class="pl-k">=</span><span class="pl-c1">0</span>;x<span class="pl-k">=</span>f.<span class="pl-c1">x</span><span class="pl-k">+</span>v<span class="pl-k">*</span>(m.<span class="pl-c1">x</span><span class="pl-k">-</span>f.<span class="pl-c1">x</span>);C<span class="pl-k">=</span>f.<span class="pl-c1">y</span><span class="pl-k">+</span>v<span class="pl-k">*</span>(m.<span class="pl-c1">y</span><span class="pl-k">-</span>f.<span class="pl-c1">y</span>);t.lowerBound.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(f.<span class="pl-c1">x</span>,x);t.lowerBound.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(f.<span class="pl-c1">y</span>,C);t.upperBound.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(f.<span class="pl-c1">x</span>,x);t.upperBound.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(f.<span class="pl-c1">y</span>,C);<span class="pl-k">var</span> J<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>,T<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(J[T<span class="pl-k">++</span>]<span class="pl-k">=</span><span class="pl-v">this</span>.m_root;T<span class="pl-k">&gt;</span></td>
      </tr>
      <tr>
        <td id="L62" class="blob-num js-line-number" data-line-number="62"></td>
        <td id="LC62" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;){v<span class="pl-k">=</span>J[<span class="pl-k">--</span>T];<span class="pl-k">if</span>(v.aabb.TestOverlap(t)<span class="pl-k">!=</span><span class="pl-c1">false</span>){x<span class="pl-k">=</span>v.aabb.GetCenter();C<span class="pl-k">=</span>v.aabb.GetExtents();<span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>(r.<span class="pl-c1">x</span><span class="pl-k">*</span>(f.<span class="pl-c1">x</span><span class="pl-k">-</span>x.<span class="pl-c1">x</span>)<span class="pl-k">+</span>r.<span class="pl-c1">y</span><span class="pl-k">*</span>(f.<span class="pl-c1">y</span><span class="pl-k">-</span>x.<span class="pl-c1">y</span>))<span class="pl-k">-</span>s.<span class="pl-c1">x</span><span class="pl-k">*</span>C.<span class="pl-c1">x</span><span class="pl-k">-</span>s.<span class="pl-c1">y</span><span class="pl-k">*</span>C.<span class="pl-c1">y</span><span class="pl-k">&gt;</span><span class="pl-c1">0</span>))<span class="pl-k">if</span>(v.IsLeaf()){x<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">S</span>;x.p1<span class="pl-k">=</span>e.p1;x.p2<span class="pl-k">=</span>e.p2;x.maxFraction<span class="pl-k">=</span>e.maxFraction;v<span class="pl-k">=</span>b(x,v);<span class="pl-k">if</span>(v<span class="pl-k">==</span><span class="pl-c1">0</span>)<span class="pl-k">break</span>;<span class="pl-k">if</span>(v<span class="pl-k">&gt;</span><span class="pl-c1">0</span>){x<span class="pl-k">=</span>f.<span class="pl-c1">x</span><span class="pl-k">+</span>v<span class="pl-k">*</span>(m.<span class="pl-c1">x</span><span class="pl-k">-</span>f.<span class="pl-c1">x</span>);C<span class="pl-k">=</span>f.<span class="pl-c1">y</span><span class="pl-k">+</span>v<span class="pl-k">*</span>(m.<span class="pl-c1">y</span><span class="pl-k">-</span>f.<span class="pl-c1">y</span>);t.lowerBound.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(f.<span class="pl-c1">x</span>,x);t.lowerBound.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(f.<span class="pl-c1">y</span>,C);t.upperBound.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(f.<span class="pl-c1">x</span>,x);t.upperBound.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(f.<span class="pl-c1">y</span>,C)}}<span class="pl-k">else</span>{J[T<span class="pl-k">++</span>]<span class="pl-k">=</span>v.child1;J[T<span class="pl-k">++</span>]<span class="pl-k">=</span>v.child2}}}}};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AllocateNode</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_freeList){<span class="pl-k">var</span> b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L63" class="blob-num js-line-number" data-line-number="63"></td>
        <td id="LC63" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_freeList;<span class="pl-v">this</span>.m_freeList<span class="pl-k">=</span>b.<span class="pl-c1">parent</span>;b.<span class="pl-c1">parent</span><span class="pl-k">=</span><span class="pl-c1">null</span>;b.child1<span class="pl-k">=</span><span class="pl-c1">null</span>;b.child2<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">return</span> b}<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">H</span>};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">FreeNode</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){b.<span class="pl-c1">parent</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_freeList;<span class="pl-v">this</span>.m_freeList<span class="pl-k">=</span>b};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InsertLeaf</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">++</span><span class="pl-v">this</span>.m_insertionCount;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_root<span class="pl-k">==</span><span class="pl-c1">null</span>){<span class="pl-v">this</span>.m_root<span class="pl-k">=</span>b;<span class="pl-v">this</span>.m_root.<span class="pl-c1">parent</span><span class="pl-k">=</span><span class="pl-c1">null</span>}<span class="pl-k">else</span>{<span class="pl-k">var</span> e<span class="pl-k">=</span>b.aabb.GetCenter(),f<span class="pl-k">=</span><span class="pl-v">this</span>.m_root;<span class="pl-k">if</span>(f.IsLeaf()<span class="pl-k">==</span><span class="pl-c1">false</span>){<span class="pl-k">do</span>{<span class="pl-k">var</span> m<span class="pl-k">=</span>f.child1;f<span class="pl-k">=</span>f.child2;f<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>((m.aabb.lowerBound.<span class="pl-c1">x</span><span class="pl-k">+</span>m.aabb.upperBound.<span class="pl-c1">x</span>)<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">-</span>e.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>((m.aabb.lowerBound.<span class="pl-c1">y</span><span class="pl-k">+</span>m.aabb.upperBound.<span class="pl-c1">y</span>)<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L64" class="blob-num js-line-number" data-line-number="64"></td>
        <td id="LC64" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">2</span><span class="pl-k">-</span>e.<span class="pl-c1">y</span>)<span class="pl-k">&lt;</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>((f.aabb.lowerBound.<span class="pl-c1">x</span><span class="pl-k">+</span>f.aabb.upperBound.<span class="pl-c1">x</span>)<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">-</span>e.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">abs</span>((f.aabb.lowerBound.<span class="pl-c1">y</span><span class="pl-k">+</span>f.aabb.upperBound.<span class="pl-c1">y</span>)<span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">-</span>e.<span class="pl-c1">y</span>)<span class="pl-k">?</span>m<span class="pl-k">:</span>f}<span class="pl-k">while</span>(f.IsLeaf()<span class="pl-k">==</span><span class="pl-c1">false</span>)}e<span class="pl-k">=</span>f.<span class="pl-c1">parent</span>;m<span class="pl-k">=</span><span class="pl-v">this</span>.AllocateNode();m.<span class="pl-c1">parent</span><span class="pl-k">=</span>e;m.userData<span class="pl-k">=</span><span class="pl-c1">null</span>;m.aabb.Combine(b.aabb,f.aabb);<span class="pl-k">if</span>(e){<span class="pl-k">if</span>(f.<span class="pl-c1">parent</span>.child1<span class="pl-k">==</span>f)e.child1<span class="pl-k">=</span>m;<span class="pl-k">else</span> e.child2<span class="pl-k">=</span>m;m.child1<span class="pl-k">=</span>f;m.child2<span class="pl-k">=</span>b;f.<span class="pl-c1">parent</span><span class="pl-k">=</span>m;b.<span class="pl-c1">parent</span><span class="pl-k">=</span>m;<span class="pl-k">do</span>{<span class="pl-k">if</span>(e.aabb.Contains(m.aabb))<span class="pl-k">break</span>;e.aabb.Combine(e.child1.aabb,e.child2.aabb);m<span class="pl-k">=</span>e;e<span class="pl-k">=</span>e.<span class="pl-c1">parent</span>}<span class="pl-k">while</span>(e)}<span class="pl-k">else</span>{m.child1<span class="pl-k">=</span>f;m.child2<span class="pl-k">=</span>b;f.<span class="pl-c1">parent</span><span class="pl-k">=</span>m;<span class="pl-v">this</span>.m_root<span class="pl-k">=</span>b.<span class="pl-c1">parent</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L65" class="blob-num js-line-number" data-line-number="65"></td>
        <td id="LC65" class="blob-code blob-code-inner js-file-line">m}}};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RemoveLeaf</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">==</span><span class="pl-v">this</span>.m_root)<span class="pl-v">this</span>.m_root<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">else</span>{<span class="pl-k">var</span> e<span class="pl-k">=</span>b.<span class="pl-c1">parent</span>,f<span class="pl-k">=</span>e.<span class="pl-c1">parent</span>;b<span class="pl-k">=</span>e.child1<span class="pl-k">==</span>b<span class="pl-k">?</span>e.child2<span class="pl-k">:</span>e.child1;<span class="pl-k">if</span>(f){<span class="pl-k">if</span>(f.child1<span class="pl-k">==</span>e)f.child1<span class="pl-k">=</span>b;<span class="pl-k">else</span> f.child2<span class="pl-k">=</span>b;b.<span class="pl-c1">parent</span><span class="pl-k">=</span>f;<span class="pl-k">for</span>(<span class="pl-v">this</span>.FreeNode(e);f;){e<span class="pl-k">=</span>f.aabb;f.aabb<span class="pl-k">=</span>B.Combine(f.child1.aabb,f.child2.aabb);<span class="pl-k">if</span>(e.Contains(f.aabb))<span class="pl-k">break</span>;f<span class="pl-k">=</span>f.<span class="pl-c1">parent</span>}}<span class="pl-k">else</span>{<span class="pl-v">this</span>.m_root<span class="pl-k">=</span>b;b.<span class="pl-c1">parent</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.FreeNode(e)}}};<span class="pl-c1">D</span>.<span class="pl-en">b2DynamicTreeBroadPhase</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_tree<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">u</span>;<span class="pl-v">this</span>.m_moveBuffer<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>;<span class="pl-v">this</span>.m_pairBuffer<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>;<span class="pl-v">this</span>.m_pairCount<span class="pl-k">=</span><span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L66" class="blob-num js-line-number" data-line-number="66"></td>
        <td id="LC66" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CreateProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-v">this</span>.m_tree.CreateProxy(b,e);<span class="pl-k">++</span><span class="pl-v">this</span>.m_proxyCount;<span class="pl-v">this</span>.BufferMove(f);<span class="pl-k">return</span> f};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DestroyProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-v">this</span>.UnBufferMove(b);<span class="pl-k">--</span><span class="pl-v">this</span>.m_proxyCount;<span class="pl-v">this</span>.m_tree.DestroyProxy(b)};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">MoveProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-v">this</span>.m_tree.MoveProxy(b,e,f)<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.BufferMove(b)};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">TestOverlap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-v">this</span>.m_tree.GetFatAABB(b),m<span class="pl-k">=</span><span class="pl-v">this</span>.m_tree.GetFatAABB(e);<span class="pl-k">return</span> f.TestOverlap(m)};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetUserData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_tree.GetUserData(b)};</td>
      </tr>
      <tr>
        <td id="L67" class="blob-num js-line-number" data-line-number="67"></td>
        <td id="LC67" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFatAABB</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_tree.GetFatAABB(b)};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetProxyCount</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_proxyCount};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">UpdatePairs</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span>e.m_pairCount<span class="pl-k">=</span><span class="pl-c1">0</span>,m;<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>e.m_moveBuffer.<span class="pl-c1">length</span>;<span class="pl-k">++</span>f){m<span class="pl-k">=</span>e.m_moveBuffer[f];<span class="pl-k">var</span> r<span class="pl-k">=</span>e.m_tree.GetFatAABB(m);e.m_tree.Query(<span class="pl-k">function</span>(<span class="pl-smi">t</span>){<span class="pl-k">if</span>(t<span class="pl-k">==</span>m)<span class="pl-k">return</span> <span class="pl-c1">true</span>;<span class="pl-k">if</span>(e.m_pairCount<span class="pl-k">==</span>e.m_pairBuffer.<span class="pl-c1">length</span>)e.m_pairBuffer[e.m_pairCount]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">O</span>;<span class="pl-k">var</span> x<span class="pl-k">=</span>e.m_pairBuffer[e.m_pairCount];x.proxyA<span class="pl-k">=</span>t<span class="pl-k">&lt;</span>m<span class="pl-k">?</span>t<span class="pl-k">:</span>m;x.proxyB<span class="pl-k">=</span>t<span class="pl-k">&gt;=</span>m<span class="pl-k">?</span>t<span class="pl-k">:</span>m;<span class="pl-k">++</span>e.m_pairCount;<span class="pl-k">return</span> <span class="pl-c1">true</span>},</td>
      </tr>
      <tr>
        <td id="L68" class="blob-num js-line-number" data-line-number="68"></td>
        <td id="LC68" class="blob-code blob-code-inner js-file-line">r)}<span class="pl-k">for</span>(f<span class="pl-k">=</span>e.m_moveBuffer.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>e.m_pairCount;){r<span class="pl-k">=</span>e.m_pairBuffer[f];<span class="pl-k">var</span> s<span class="pl-k">=</span>e.m_tree.GetUserData(r.proxyA),v<span class="pl-k">=</span>e.m_tree.GetUserData(r.proxyB);b(s,v);<span class="pl-k">for</span>(<span class="pl-k">++</span>f;f<span class="pl-k">&lt;</span>e.m_pairCount;){s<span class="pl-k">=</span>e.m_pairBuffer[f];<span class="pl-k">if</span>(s.proxyA<span class="pl-k">!=</span>r.proxyA<span class="pl-k">||</span>s.proxyB<span class="pl-k">!=</span>r.proxyB)<span class="pl-k">break</span>;<span class="pl-k">++</span>f}}};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Query</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-v">this</span>.m_tree.Query(b,e)};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-v">this</span>.m_tree.RayCast(b,e)};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Validate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Rebalance</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_tree.Rebalance(b)};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">BufferMove</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L69" class="blob-num js-line-number" data-line-number="69"></td>
        <td id="LC69" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-v">this</span>.m_moveBuffer[<span class="pl-v">this</span>.m_moveBuffer.<span class="pl-c1">length</span>]<span class="pl-k">=</span>b};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">UnBufferMove</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-v">this</span>.m_moveBuffer.<span class="pl-c1">splice</span>(<span class="pl-c1">parseInt</span>(<span class="pl-v">this</span>.m_moveBuffer.<span class="pl-c1">indexOf</span>(b)),<span class="pl-c1">1</span>)};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComparePairs</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">0</span>};D.__implements<span class="pl-k">=</span>{};D.__implements[g]<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-c1">H</span>.<span class="pl-en">b2DynamicTreeNode</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.aabb<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsLeaf</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.child1<span class="pl-k">==</span><span class="pl-c1">null</span>};<span class="pl-c1">O</span>.<span class="pl-en">b2DynamicTreePair</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-en">b2Manifold</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_pointCount<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Manifold</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_points<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(y.b2_maxManifoldPoints);</td>
      </tr>
      <tr>
        <td id="L70" class="blob-num js-line-number" data-line-number="70"></td>
        <td id="LC70" class="blob-code blob-code-inner js-file-line"><span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>y.b2_maxManifoldPoints;b<span class="pl-k">++</span>)<span class="pl-v">this</span>.m_points[b]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">R</span>;<span class="pl-v">this</span>.m_localPlaneNormal<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-v">this</span>.m_localPoint<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>y.b2_maxManifoldPoints;b<span class="pl-k">++</span>)(<span class="pl-v">this</span>.m_points[b]<span class="pl-k">instanceof</span> R<span class="pl-k">?</span><span class="pl-v">this</span>.m_points[b]<span class="pl-k">:</span><span class="pl-c1">null</span>).<span class="pl-c1">Reset</span>();<span class="pl-v">this</span>.m_localPlaneNormal.SetZero();<span class="pl-v">this</span>.m_localPoint.SetZero();<span class="pl-v">this</span>.m_pointCount<span class="pl-k">=</span><span class="pl-v">this</span>.m_type<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-v">this</span>.m_pointCount<span class="pl-k">=</span>b.m_pointCount;<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>y.b2_maxManifoldPoints;e<span class="pl-k">++</span>)(<span class="pl-v">this</span>.m_points[e]<span class="pl-k">instanceof</span> R<span class="pl-k">?</span><span class="pl-v">this</span>.m_points[e]<span class="pl-k">:</span><span class="pl-c1">null</span>).Set(b.m_points[e]);</td>
      </tr>
      <tr>
        <td id="L71" class="blob-num js-line-number" data-line-number="71"></td>
        <td id="LC71" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_localPlaneNormal.SetV(b.m_localPlaneNormal);<span class="pl-v">this</span>.m_localPoint.SetV(b.m_localPoint);<span class="pl-v">this</span>.m_type<span class="pl-k">=</span>b.m_type};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">E</span>;b.Set(<span class="pl-v">this</span>);<span class="pl-k">return</span> b};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Collision.b2Manifold.e_circles<span class="pl-k">=</span><span class="pl-c1">1</span>;Box2D.Collision.b2Manifold.e_faceA<span class="pl-k">=</span><span class="pl-c1">2</span>;Box2D.Collision.b2Manifold.e_faceB<span class="pl-k">=</span><span class="pl-c1">4</span>});<span class="pl-c1">R</span>.<span class="pl-en">b2ManifoldPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_localPoint<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-v">this</span>.m_id<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">L</span>};<span class="pl-c1">R</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2ManifoldPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">Reset</span>()};<span class="pl-c1">R</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_localPoint.SetZero();<span class="pl-v">this</span>.m_tangentImpulse<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L72" class="blob-num js-line-number" data-line-number="72"></td>
        <td id="LC72" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_normalImpulse<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_id.key<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">R</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-v">this</span>.m_localPoint.SetV(b.m_localPoint);<span class="pl-v">this</span>.m_normalImpulse<span class="pl-k">=</span>b.m_normalImpulse;<span class="pl-v">this</span>.m_tangentImpulse<span class="pl-k">=</span>b.m_tangentImpulse;<span class="pl-v">this</span>.m_id.Set(b.m_id)};<span class="pl-c1">N</span>.<span class="pl-en">b2Point</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Support</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.p};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFirstVertex</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.p};<span class="pl-c1">S</span>.<span class="pl-en">b2RayCastInput</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.p1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-v">this</span>.p2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2RayCastInput</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(e<span class="pl-k">===</span><span class="pl-c1">undefined</span>)e<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(f<span class="pl-k">===</span><span class="pl-c1">undefined</span>)f<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L73" class="blob-num js-line-number" data-line-number="73"></td>
        <td id="LC73" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>;b<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.p1.SetV(b);e<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.p2.SetV(e);<span class="pl-v">this</span>.maxFraction<span class="pl-k">=</span>f};<span class="pl-c1">aa</span>.<span class="pl-en">b2RayCastOutput</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.normal<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-c1">Z</span>.<span class="pl-en">b2Segment</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.p1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-v">this</span>.p2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">TestSegment</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>){<span class="pl-k">if</span>(m<span class="pl-k">===</span><span class="pl-c1">undefined</span>)m<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> r<span class="pl-k">=</span>f.p1,s<span class="pl-k">=</span>f.p2.<span class="pl-c1">x</span><span class="pl-k">-</span>r.<span class="pl-c1">x</span>,v<span class="pl-k">=</span>f.p2.<span class="pl-c1">y</span><span class="pl-k">-</span>r.<span class="pl-c1">y</span>;f<span class="pl-k">=</span><span class="pl-v">this</span>.p2.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.p1.<span class="pl-c1">y</span>;<span class="pl-k">var</span> t<span class="pl-k">=-</span>(<span class="pl-v">this</span>.p2.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.p1.<span class="pl-c1">x</span>),x<span class="pl-k">=</span><span class="pl-c1">100</span><span class="pl-k">*</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>,C<span class="pl-k">=-</span>(s<span class="pl-k">*</span>f<span class="pl-k">+</span>v<span class="pl-k">*</span>t);<span class="pl-k">if</span>(C<span class="pl-k">&gt;</span>x){<span class="pl-k">var</span> J<span class="pl-k">=</span>r.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.p1.<span class="pl-c1">x</span>,T<span class="pl-k">=</span>r.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.p1.<span class="pl-c1">y</span>;r<span class="pl-k">=</span>J<span class="pl-k">*</span>f<span class="pl-k">+</span>T<span class="pl-k">*</span>t;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>r<span class="pl-k">&amp;&amp;</span>r<span class="pl-k">&lt;=</span>m<span class="pl-k">*</span>C){m<span class="pl-k">=-</span>s<span class="pl-k">*</span>T<span class="pl-k">+</span>v<span class="pl-k">*</span>J;<span class="pl-k">if</span>(<span class="pl-k">-</span>x<span class="pl-k">*</span>C<span class="pl-k">&lt;=</span>m<span class="pl-k">&amp;&amp;</span>m<span class="pl-k">&lt;=</span>C<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>x)){r<span class="pl-k">/=</span>C;m<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(f<span class="pl-k">*</span>f<span class="pl-k">+</span>t<span class="pl-k">*</span>t);f<span class="pl-k">/=</span>m;t<span class="pl-k">/=</span>m;b[<span class="pl-c1">0</span>]<span class="pl-k">=</span>r;e.Set(f,</td>
      </tr>
      <tr>
        <td id="L74" class="blob-num js-line-number" data-line-number="74"></td>
        <td id="LC74" class="blob-code blob-code-inner js-file-line">t);<span class="pl-k">return</span> <span class="pl-c1">true</span>}}}<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Extend</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-v">this</span>.ExtendForward(b);<span class="pl-v">this</span>.ExtendBackward(b)};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ExtendForward</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>.p2.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.p1.<span class="pl-c1">x</span>,f<span class="pl-k">=</span><span class="pl-v">this</span>.p2.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.p1.<span class="pl-c1">y</span>;b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(e<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>(b.upperBound.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.p1.<span class="pl-c1">x</span>)<span class="pl-k">/</span>e<span class="pl-k">:</span>e<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>(b.lowerBound.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.p1.<span class="pl-c1">x</span>)<span class="pl-k">/</span>e<span class="pl-k">:</span><span class="pl-c1">Number</span>.<span class="pl-c1">POSITIVE_INFINITY</span>,f<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>(b.upperBound.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.p1.<span class="pl-c1">y</span>)<span class="pl-k">/</span>f<span class="pl-k">:</span>f<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>(b.lowerBound.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.p1.<span class="pl-c1">y</span>)<span class="pl-k">/</span>f<span class="pl-k">:</span><span class="pl-c1">Number</span>.<span class="pl-c1">POSITIVE_INFINITY</span>);<span class="pl-v">this</span>.p2.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.p1.<span class="pl-c1">x</span><span class="pl-k">+</span>e<span class="pl-k">*</span>b;<span class="pl-v">this</span>.p2.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.p1.<span class="pl-c1">y</span><span class="pl-k">+</span>f<span class="pl-k">*</span>b};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ExtendBackward</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">var</span> e<span class="pl-k">=-</span><span class="pl-v">this</span>.p2.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.p1.<span class="pl-c1">x</span>,</td>
      </tr>
      <tr>
        <td id="L75" class="blob-num js-line-number" data-line-number="75"></td>
        <td id="LC75" class="blob-code blob-code-inner js-file-line">f<span class="pl-k">=-</span><span class="pl-v">this</span>.p2.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.p1.<span class="pl-c1">y</span>;b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">min</span>(e<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>(b.upperBound.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.p2.<span class="pl-c1">x</span>)<span class="pl-k">/</span>e<span class="pl-k">:</span>e<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>(b.lowerBound.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.p2.<span class="pl-c1">x</span>)<span class="pl-k">/</span>e<span class="pl-k">:</span><span class="pl-c1">Number</span>.<span class="pl-c1">POSITIVE_INFINITY</span>,f<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>(b.upperBound.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.p2.<span class="pl-c1">y</span>)<span class="pl-k">/</span>f<span class="pl-k">:</span>f<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>(b.lowerBound.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.p2.<span class="pl-c1">y</span>)<span class="pl-k">/</span>f<span class="pl-k">:</span><span class="pl-c1">Number</span>.<span class="pl-c1">POSITIVE_INFINITY</span>);<span class="pl-v">this</span>.p1.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.p2.<span class="pl-c1">x</span><span class="pl-k">+</span>e<span class="pl-k">*</span>b;<span class="pl-v">this</span>.p1.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.p2.<span class="pl-c1">y</span><span class="pl-k">+</span>f<span class="pl-k">*</span>b};<span class="pl-c1">d</span>.<span class="pl-en">b2SeparationFunction</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_localPoint<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-v">this</span>.m_axis<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-c1">d</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){<span class="pl-v">this</span>.m_proxyA<span class="pl-k">=</span>e;<span class="pl-v">this</span>.m_proxyB<span class="pl-k">=</span>m;<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(b.count);y.b2Assert(<span class="pl-c1">0</span><span class="pl-k">&lt;</span>s<span class="pl-k">&amp;&amp;</span>s<span class="pl-k">&lt;</span><span class="pl-c1">3</span>);<span class="pl-k">var</span> v,t,x,C,J<span class="pl-k">=</span>C<span class="pl-k">=</span>x<span class="pl-k">=</span>m<span class="pl-k">=</span>e<span class="pl-k">=</span><span class="pl-c1">0</span>,T<span class="pl-k">=</span><span class="pl-c1">0</span>;J<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(s<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L76" class="blob-num js-line-number" data-line-number="76"></td>
        <td id="LC76" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>){<span class="pl-v">this</span>.m_type<span class="pl-k">=</span>d.e_points;v<span class="pl-k">=</span><span class="pl-v">this</span>.m_proxyA.GetVertex(b.indexA[<span class="pl-c1">0</span>]);t<span class="pl-k">=</span><span class="pl-v">this</span>.m_proxyB.GetVertex(b.indexB[<span class="pl-c1">0</span>]);s<span class="pl-k">=</span>v;b<span class="pl-k">=</span>f.R;e<span class="pl-k">=</span>f.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(b.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>s.<span class="pl-c1">x</span><span class="pl-k">+</span>b.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>s.<span class="pl-c1">y</span>);m<span class="pl-k">=</span>f.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(b.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>s.<span class="pl-c1">x</span><span class="pl-k">+</span>b.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>s.<span class="pl-c1">y</span>);s<span class="pl-k">=</span>t;b<span class="pl-k">=</span>r.R;x<span class="pl-k">=</span>r.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(b.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>s.<span class="pl-c1">x</span><span class="pl-k">+</span>b.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>s.<span class="pl-c1">y</span>);C<span class="pl-k">=</span>r.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(b.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>s.<span class="pl-c1">x</span><span class="pl-k">+</span>b.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>s.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span><span class="pl-k">=</span>x<span class="pl-k">-</span>e;<span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span><span class="pl-k">=</span>C<span class="pl-k">-</span>m;<span class="pl-v">this</span>.m_axis.Normalize()}<span class="pl-k">else</span>{<span class="pl-k">if</span>(b.indexB[<span class="pl-c1">0</span>]<span class="pl-k">==</span>b.indexB[<span class="pl-c1">1</span>]){<span class="pl-v">this</span>.m_type<span class="pl-k">=</span>d.e_faceA;e<span class="pl-k">=</span><span class="pl-v">this</span>.m_proxyA.GetVertex(b.indexA[<span class="pl-c1">0</span>]);m<span class="pl-k">=</span><span class="pl-v">this</span>.m_proxyA.GetVertex(b.indexA[<span class="pl-c1">1</span>]);t<span class="pl-k">=</span><span class="pl-v">this</span>.m_proxyB.GetVertex(b.indexB[<span class="pl-c1">0</span>]);</td>
      </tr>
      <tr>
        <td id="L77" class="blob-num js-line-number" data-line-number="77"></td>
        <td id="LC77" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_localPoint.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(e.<span class="pl-c1">x</span><span class="pl-k">+</span>m.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.m_localPoint.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(e.<span class="pl-c1">y</span><span class="pl-k">+</span>m.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.m_axis<span class="pl-k">=</span>w.CrossVF(w.SubtractVV(m,e),<span class="pl-c1">1</span>);<span class="pl-v">this</span>.m_axis.Normalize();s<span class="pl-k">=</span><span class="pl-v">this</span>.m_axis;b<span class="pl-k">=</span>f.R;J<span class="pl-k">=</span>b.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>s.<span class="pl-c1">x</span><span class="pl-k">+</span>b.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>s.<span class="pl-c1">y</span>;T<span class="pl-k">=</span>b.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>s.<span class="pl-c1">x</span><span class="pl-k">+</span>b.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>s.<span class="pl-c1">y</span>;s<span class="pl-k">=</span><span class="pl-v">this</span>.m_localPoint;b<span class="pl-k">=</span>f.R;e<span class="pl-k">=</span>f.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(b.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>s.<span class="pl-c1">x</span><span class="pl-k">+</span>b.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>s.<span class="pl-c1">y</span>);m<span class="pl-k">=</span>f.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(b.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>s.<span class="pl-c1">x</span><span class="pl-k">+</span>b.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>s.<span class="pl-c1">y</span>);s<span class="pl-k">=</span>t;b<span class="pl-k">=</span>r.R;x<span class="pl-k">=</span>r.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(b.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>s.<span class="pl-c1">x</span><span class="pl-k">+</span>b.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>s.<span class="pl-c1">y</span>);C<span class="pl-k">=</span>r.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(b.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>s.<span class="pl-c1">x</span><span class="pl-k">+</span>b.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>s.<span class="pl-c1">y</span>);J<span class="pl-k">=</span>(x<span class="pl-k">-</span>e)<span class="pl-k">*</span>J<span class="pl-k">+</span>(C<span class="pl-k">-</span>m)<span class="pl-k">*</span>T}<span class="pl-k">else</span> <span class="pl-k">if</span>(b.indexA[<span class="pl-c1">0</span>]<span class="pl-k">==</span>b.indexA[<span class="pl-c1">0</span>]){<span class="pl-v">this</span>.m_type<span class="pl-k">=</span>d.e_faceB;x<span class="pl-k">=</span><span class="pl-v">this</span>.m_proxyB.GetVertex(b.indexB[<span class="pl-c1">0</span>]);</td>
      </tr>
      <tr>
        <td id="L78" class="blob-num js-line-number" data-line-number="78"></td>
        <td id="LC78" class="blob-code blob-code-inner js-file-line">C<span class="pl-k">=</span><span class="pl-v">this</span>.m_proxyB.GetVertex(b.indexB[<span class="pl-c1">1</span>]);v<span class="pl-k">=</span><span class="pl-v">this</span>.m_proxyA.GetVertex(b.indexA[<span class="pl-c1">0</span>]);<span class="pl-v">this</span>.m_localPoint.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(x.<span class="pl-c1">x</span><span class="pl-k">+</span>C.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.m_localPoint.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(x.<span class="pl-c1">y</span><span class="pl-k">+</span>C.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.m_axis<span class="pl-k">=</span>w.CrossVF(w.SubtractVV(C,x),<span class="pl-c1">1</span>);<span class="pl-v">this</span>.m_axis.Normalize();s<span class="pl-k">=</span><span class="pl-v">this</span>.m_axis;b<span class="pl-k">=</span>r.R;J<span class="pl-k">=</span>b.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>s.<span class="pl-c1">x</span><span class="pl-k">+</span>b.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>s.<span class="pl-c1">y</span>;T<span class="pl-k">=</span>b.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>s.<span class="pl-c1">x</span><span class="pl-k">+</span>b.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>s.<span class="pl-c1">y</span>;s<span class="pl-k">=</span><span class="pl-v">this</span>.m_localPoint;b<span class="pl-k">=</span>r.R;x<span class="pl-k">=</span>r.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(b.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>s.<span class="pl-c1">x</span><span class="pl-k">+</span>b.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>s.<span class="pl-c1">y</span>);C<span class="pl-k">=</span>r.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(b.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>s.<span class="pl-c1">x</span><span class="pl-k">+</span>b.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>s.<span class="pl-c1">y</span>);s<span class="pl-k">=</span>v;b<span class="pl-k">=</span>f.R;e<span class="pl-k">=</span>f.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(b.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>s.<span class="pl-c1">x</span><span class="pl-k">+</span>b.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>s.<span class="pl-c1">y</span>);m<span class="pl-k">=</span>f.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(b.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>s.<span class="pl-c1">x</span><span class="pl-k">+</span>b.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>s.<span class="pl-c1">y</span>);J<span class="pl-k">=</span>(e<span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L79" class="blob-num js-line-number" data-line-number="79"></td>
        <td id="LC79" class="blob-code blob-code-inner js-file-line">x)<span class="pl-k">*</span>J<span class="pl-k">+</span>(m<span class="pl-k">-</span>C)<span class="pl-k">*</span>T}<span class="pl-k">else</span>{e<span class="pl-k">=</span><span class="pl-v">this</span>.m_proxyA.GetVertex(b.indexA[<span class="pl-c1">0</span>]);m<span class="pl-k">=</span><span class="pl-v">this</span>.m_proxyA.GetVertex(b.indexA[<span class="pl-c1">1</span>]);x<span class="pl-k">=</span><span class="pl-v">this</span>.m_proxyB.GetVertex(b.indexB[<span class="pl-c1">0</span>]);C<span class="pl-k">=</span><span class="pl-v">this</span>.m_proxyB.GetVertex(b.indexB[<span class="pl-c1">1</span>]);w.MulX(f,v);v<span class="pl-k">=</span>w.MulMV(f.R,w.SubtractVV(m,e));w.MulX(r,t);J<span class="pl-k">=</span>w.MulMV(r.R,w.SubtractVV(C,x));r<span class="pl-k">=</span>v.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>v.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>;t<span class="pl-k">=</span>J.<span class="pl-c1">x</span><span class="pl-k">*</span>J.<span class="pl-c1">x</span><span class="pl-k">+</span>J.<span class="pl-c1">y</span><span class="pl-k">*</span>J.<span class="pl-c1">y</span>;b<span class="pl-k">=</span>w.SubtractVV(J,v);f<span class="pl-k">=</span>v.<span class="pl-c1">x</span><span class="pl-k">*</span>b.<span class="pl-c1">x</span><span class="pl-k">+</span>v.<span class="pl-c1">y</span><span class="pl-k">*</span>b.<span class="pl-c1">y</span>;b<span class="pl-k">=</span>J.<span class="pl-c1">x</span><span class="pl-k">*</span>b.<span class="pl-c1">x</span><span class="pl-k">+</span>J.<span class="pl-c1">y</span><span class="pl-k">*</span>b.<span class="pl-c1">y</span>;v<span class="pl-k">=</span>v.<span class="pl-c1">x</span><span class="pl-k">*</span>J.<span class="pl-c1">x</span><span class="pl-k">+</span>v.<span class="pl-c1">y</span><span class="pl-k">*</span>J.<span class="pl-c1">y</span>;T<span class="pl-k">=</span>r<span class="pl-k">*</span>t<span class="pl-k">-</span>v<span class="pl-k">*</span>v;J<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(T<span class="pl-k">!=</span><span class="pl-c1">0</span>)J<span class="pl-k">=</span>w.Clamp((v<span class="pl-k">*</span>b<span class="pl-k">-</span>f<span class="pl-k">*</span>t)<span class="pl-k">/</span>T,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-k">if</span>((v<span class="pl-k">*</span>J<span class="pl-k">+</span>b)<span class="pl-k">/</span>t<span class="pl-k">&lt;</span><span class="pl-c1">0</span>)J<span class="pl-k">=</span>w.Clamp((v<span class="pl-k">-</span>f)<span class="pl-k">/</span>r,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;v.<span class="pl-c1">x</span><span class="pl-k">=</span>e.<span class="pl-c1">x</span><span class="pl-k">+</span>J<span class="pl-k">*</span>(m.<span class="pl-c1">x</span><span class="pl-k">-</span>e.<span class="pl-c1">x</span>);v.<span class="pl-c1">y</span><span class="pl-k">=</span>e.<span class="pl-c1">y</span><span class="pl-k">+</span>J<span class="pl-k">*</span>(m.<span class="pl-c1">y</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L80" class="blob-num js-line-number" data-line-number="80"></td>
        <td id="LC80" class="blob-code blob-code-inner js-file-line">e.<span class="pl-c1">y</span>);t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;t.<span class="pl-c1">x</span><span class="pl-k">=</span>x.<span class="pl-c1">x</span><span class="pl-k">+</span>J<span class="pl-k">*</span>(C.<span class="pl-c1">x</span><span class="pl-k">-</span>x.<span class="pl-c1">x</span>);t.<span class="pl-c1">y</span><span class="pl-k">=</span>x.<span class="pl-c1">y</span><span class="pl-k">+</span>J<span class="pl-k">*</span>(C.<span class="pl-c1">y</span><span class="pl-k">-</span>x.<span class="pl-c1">y</span>);<span class="pl-k">if</span>(J<span class="pl-k">==</span><span class="pl-c1">0</span><span class="pl-k">||</span>J<span class="pl-k">==</span><span class="pl-c1">1</span>){<span class="pl-v">this</span>.m_type<span class="pl-k">=</span>d.e_faceB;<span class="pl-v">this</span>.m_axis<span class="pl-k">=</span>w.CrossVF(w.SubtractVV(C,x),<span class="pl-c1">1</span>);<span class="pl-v">this</span>.m_axis.Normalize();<span class="pl-v">this</span>.m_localPoint<span class="pl-k">=</span>t}<span class="pl-k">else</span>{<span class="pl-v">this</span>.m_type<span class="pl-k">=</span>d.e_faceA;<span class="pl-v">this</span>.m_axis<span class="pl-k">=</span>w.CrossVF(w.SubtractVV(m,e),<span class="pl-c1">1</span>);<span class="pl-v">this</span>.m_localPoint<span class="pl-k">=</span>v}}J<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.m_axis.NegativeSelf()}};<span class="pl-c1">d</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Evaluate</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">var</span> f,m,r<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">switch</span>(<span class="pl-v">this</span>.m_type){<span class="pl-k">case</span> d.e_points<span class="pl-k">:</span>f<span class="pl-k">=</span>w.MulTMV(b.R,<span class="pl-v">this</span>.m_axis);m<span class="pl-k">=</span>w.MulTMV(e.R,<span class="pl-v">this</span>.m_axis.GetNegative());f<span class="pl-k">=</span><span class="pl-v">this</span>.m_proxyA.GetSupportVertex(f);m<span class="pl-k">=</span><span class="pl-v">this</span>.m_proxyB.GetSupportVertex(m);</td>
      </tr>
      <tr>
        <td id="L81" class="blob-num js-line-number" data-line-number="81"></td>
        <td id="LC81" class="blob-code blob-code-inner js-file-line">f<span class="pl-k">=</span>w.MulX(b,f);m<span class="pl-k">=</span>w.MulX(e,m);<span class="pl-k">return</span> r<span class="pl-k">=</span>(m.<span class="pl-c1">x</span><span class="pl-k">-</span>f.<span class="pl-c1">x</span>)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span><span class="pl-k">+</span>(m.<span class="pl-c1">y</span><span class="pl-k">-</span>f.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span>;<span class="pl-k">case</span> d.e_faceA<span class="pl-k">:</span>r<span class="pl-k">=</span>w.MulMV(b.R,<span class="pl-v">this</span>.m_axis);f<span class="pl-k">=</span>w.MulX(b,<span class="pl-v">this</span>.m_localPoint);m<span class="pl-k">=</span>w.MulTMV(e.R,r.GetNegative());m<span class="pl-k">=</span><span class="pl-v">this</span>.m_proxyB.GetSupportVertex(m);m<span class="pl-k">=</span>w.MulX(e,m);<span class="pl-k">return</span> r<span class="pl-k">=</span>(m.<span class="pl-c1">x</span><span class="pl-k">-</span>f.<span class="pl-c1">x</span>)<span class="pl-k">*</span>r.<span class="pl-c1">x</span><span class="pl-k">+</span>(m.<span class="pl-c1">y</span><span class="pl-k">-</span>f.<span class="pl-c1">y</span>)<span class="pl-k">*</span>r.<span class="pl-c1">y</span>;<span class="pl-k">case</span> d.e_faceB<span class="pl-k">:</span>r<span class="pl-k">=</span>w.MulMV(e.R,<span class="pl-v">this</span>.m_axis);m<span class="pl-k">=</span>w.MulX(e,<span class="pl-v">this</span>.m_localPoint);f<span class="pl-k">=</span>w.MulTMV(b.R,r.GetNegative());f<span class="pl-k">=</span><span class="pl-v">this</span>.m_proxyA.GetSupportVertex(f);f<span class="pl-k">=</span>w.MulX(b,f);<span class="pl-k">return</span> r<span class="pl-k">=</span>(f.<span class="pl-c1">x</span><span class="pl-k">-</span>m.<span class="pl-c1">x</span>)<span class="pl-k">*</span>r.<span class="pl-c1">x</span><span class="pl-k">+</span>(f.<span class="pl-c1">y</span><span class="pl-k">-</span>m.<span class="pl-c1">y</span>)<span class="pl-k">*</span>r.<span class="pl-c1">y</span>;<span class="pl-k">default</span><span class="pl-k">:</span>y.b2Assert(<span class="pl-c1">false</span>);<span class="pl-k">return</span> <span class="pl-c1">0</span>}};</td>
      </tr>
      <tr>
        <td id="L82" class="blob-num js-line-number" data-line-number="82"></td>
        <td id="LC82" class="blob-code blob-code-inner js-file-line">Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Collision.b2SeparationFunction.e_points<span class="pl-k">=</span><span class="pl-c1">1</span>;Box2D.Collision.b2SeparationFunction.e_faceA<span class="pl-k">=</span><span class="pl-c1">2</span>;Box2D.Collision.b2SeparationFunction.e_faceB<span class="pl-k">=</span><span class="pl-c1">4</span>});<span class="pl-c1">h</span>.<span class="pl-en">b2Simplex</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_v1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">j</span>;<span class="pl-v">this</span>.m_v2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">j</span>;<span class="pl-v">this</span>.m_v3<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">j</span>;<span class="pl-v">this</span>.m_vertices<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(<span class="pl-c1">3</span>)};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Simplex</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_vertices[<span class="pl-c1">0</span>]<span class="pl-k">=</span><span class="pl-v">this</span>.m_v1;<span class="pl-v">this</span>.m_vertices[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-v">this</span>.m_v2;<span class="pl-v">this</span>.m_vertices[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-v">this</span>.m_v3};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ReadCache</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){y.b2Assert(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>b.count<span class="pl-k">&amp;&amp;</span>b.count<span class="pl-k">&lt;=</span><span class="pl-c1">3</span>);<span class="pl-k">var</span> s,v;<span class="pl-v">this</span>.m_count<span class="pl-k">=</span>b.count;</td>
      </tr>
      <tr>
        <td id="L83" class="blob-num js-line-number" data-line-number="83"></td>
        <td id="LC83" class="blob-code blob-code-inner js-file-line"><span class="pl-k">for</span>(<span class="pl-k">var</span> t<span class="pl-k">=</span><span class="pl-v">this</span>.m_vertices,x<span class="pl-k">=</span><span class="pl-c1">0</span>;x<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_count;x<span class="pl-k">++</span>){<span class="pl-k">var</span> C<span class="pl-k">=</span>t[x];C.indexA<span class="pl-k">=</span>b.indexA[x];C.indexB<span class="pl-k">=</span>b.indexB[x];s<span class="pl-k">=</span>e.GetVertex(C.indexA);v<span class="pl-k">=</span>m.GetVertex(C.indexB);C.wA<span class="pl-k">=</span>w.MulX(f,s);C.wB<span class="pl-k">=</span>w.MulX(r,v);C.w<span class="pl-k">=</span>w.SubtractVV(C.wB,C.wA);C.a<span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_count<span class="pl-k">&gt;</span><span class="pl-c1">1</span>){b<span class="pl-k">=</span>b.metric;s<span class="pl-k">=</span><span class="pl-v">this</span>.GetMetric();<span class="pl-k">if</span>(s<span class="pl-k">&lt;</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>b<span class="pl-k">||</span><span class="pl-c1">2</span><span class="pl-k">*</span>b<span class="pl-k">&lt;</span>s<span class="pl-k">||</span>s<span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)<span class="pl-v">this</span>.m_count<span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_count<span class="pl-k">==</span><span class="pl-c1">0</span>){C<span class="pl-k">=</span>t[<span class="pl-c1">0</span>];C.indexA<span class="pl-k">=</span><span class="pl-c1">0</span>;C.indexB<span class="pl-k">=</span><span class="pl-c1">0</span>;s<span class="pl-k">=</span>e.GetVertex(<span class="pl-c1">0</span>);v<span class="pl-k">=</span>m.GetVertex(<span class="pl-c1">0</span>);C.wA<span class="pl-k">=</span>w.MulX(f,s);C.wB<span class="pl-k">=</span>w.MulX(r,v);C.w<span class="pl-k">=</span>w.SubtractVV(C.wB,C.wA);<span class="pl-v">this</span>.m_count<span class="pl-k">=</span><span class="pl-c1">1</span>}};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">WriteCache</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L84" class="blob-num js-line-number" data-line-number="84"></td>
        <td id="LC84" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">b</span>){b.metric<span class="pl-k">=</span><span class="pl-v">this</span>.GetMetric();b.count<span class="pl-k">=</span>Box2D.parseUInt(<span class="pl-v">this</span>.m_count);<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>.m_vertices,f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_count;f<span class="pl-k">++</span>){b.indexA[f]<span class="pl-k">=</span>Box2D.parseUInt(e[f].indexA);b.indexB[f]<span class="pl-k">=</span>Box2D.parseUInt(e[f].indexB)}};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetSearchDirection</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">switch</span>(<span class="pl-v">this</span>.m_count){<span class="pl-k">case</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">return</span> <span class="pl-v">this</span>.m_v1.w.GetNegative();<span class="pl-k">case</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-k">var</span> b<span class="pl-k">=</span>w.SubtractVV(<span class="pl-v">this</span>.m_v2.w,<span class="pl-v">this</span>.m_v1.w);<span class="pl-k">return</span> w.CrossVV(b,<span class="pl-v">this</span>.m_v1.w.GetNegative())<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>w.CrossFV(<span class="pl-c1">1</span>,b)<span class="pl-k">:</span>w.CrossVF(b,<span class="pl-c1">1</span>);<span class="pl-k">default</span><span class="pl-k">:</span>y.b2Assert(<span class="pl-c1">false</span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">p</span>}};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetClosestPoint</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L85" class="blob-num js-line-number" data-line-number="85"></td>
        <td id="LC85" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">switch</span>(<span class="pl-v">this</span>.m_count){<span class="pl-k">case</span> <span class="pl-c1">0</span><span class="pl-k">:</span>y.b2Assert(<span class="pl-c1">false</span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">return</span> <span class="pl-v">this</span>.m_v1.w;<span class="pl-k">case</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">p</span>(<span class="pl-v">this</span>.m_v1.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v1.w.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_v2.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v2.w.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.m_v1.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v1.w.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_v2.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v2.w.<span class="pl-c1">y</span>);<span class="pl-k">default</span><span class="pl-k">:</span>y.b2Assert(<span class="pl-c1">false</span>);<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">p</span>}};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetWitnessPoints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>){<span class="pl-k">switch</span>(<span class="pl-v">this</span>.m_count){<span class="pl-k">case</span> <span class="pl-c1">0</span><span class="pl-k">:</span>y.b2Assert(<span class="pl-c1">false</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span><span class="pl-k">:</span>b.SetV(<span class="pl-v">this</span>.m_v1.wA);e.SetV(<span class="pl-v">this</span>.m_v1.wB);<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span><span class="pl-k">:</span>b.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_v1.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v1.wA.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_v2.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v2.wA.<span class="pl-c1">x</span>;b.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_v1.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v1.wA.<span class="pl-c1">y</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L86" class="blob-num js-line-number" data-line-number="86"></td>
        <td id="LC86" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_v2.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v2.wA.<span class="pl-c1">y</span>;e.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_v1.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v1.wB.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_v2.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v2.wB.<span class="pl-c1">x</span>;e.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_v1.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v1.wB.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_v2.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v2.wB.<span class="pl-c1">y</span>;<span class="pl-k">break</span>;<span class="pl-k">case</span> <span class="pl-c1">3</span><span class="pl-k">:</span>e.<span class="pl-c1">x</span><span class="pl-k">=</span>b.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_v1.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v1.wA.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_v2.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v2.wA.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_v3.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v3.wA.<span class="pl-c1">x</span>;e.<span class="pl-c1">y</span><span class="pl-k">=</span>b.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_v1.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v1.wA.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_v2.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v2.wA.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_v3.a<span class="pl-k">*</span><span class="pl-v">this</span>.m_v3.wA.<span class="pl-c1">y</span>;<span class="pl-k">break</span>;<span class="pl-k">default</span><span class="pl-k">:</span>y.b2Assert(<span class="pl-c1">false</span>)}};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMetric</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">switch</span>(<span class="pl-v">this</span>.m_count){<span class="pl-k">case</span> <span class="pl-c1">0</span><span class="pl-k">:</span>y.b2Assert(<span class="pl-c1">false</span>);<span class="pl-k">return</span> <span class="pl-c1">0</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">return</span> <span class="pl-c1">0</span>;<span class="pl-k">case</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-k">return</span> w.SubtractVV(<span class="pl-v">this</span>.m_v1.w,</td>
      </tr>
      <tr>
        <td id="L87" class="blob-num js-line-number" data-line-number="87"></td>
        <td id="LC87" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_v2.w).Length();<span class="pl-k">case</span> <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-k">return</span> w.CrossVV(w.SubtractVV(<span class="pl-v">this</span>.m_v2.w,<span class="pl-v">this</span>.m_v1.w),w.SubtractVV(<span class="pl-v">this</span>.m_v3.w,<span class="pl-v">this</span>.m_v1.w));<span class="pl-k">default</span><span class="pl-k">:</span>y.b2Assert(<span class="pl-c1">false</span>);<span class="pl-k">return</span> <span class="pl-c1">0</span>}};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Solve2</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.m_v1.w,e<span class="pl-k">=</span><span class="pl-v">this</span>.m_v2.w,f<span class="pl-k">=</span>w.SubtractVV(e,b);b<span class="pl-k">=-</span>(b.<span class="pl-c1">x</span><span class="pl-k">*</span>f.<span class="pl-c1">x</span><span class="pl-k">+</span>b.<span class="pl-c1">y</span><span class="pl-k">*</span>f.<span class="pl-c1">y</span>);<span class="pl-k">if</span>(b<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>)<span class="pl-v">this</span>.m_count<span class="pl-k">=</span><span class="pl-v">this</span>.m_v1.a<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">else</span>{e<span class="pl-k">=</span>e.<span class="pl-c1">x</span><span class="pl-k">*</span>f.<span class="pl-c1">x</span><span class="pl-k">+</span>e.<span class="pl-c1">y</span><span class="pl-k">*</span>f.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(e<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){<span class="pl-v">this</span>.m_count<span class="pl-k">=</span><span class="pl-v">this</span>.m_v2.a<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.m_v1.Set(<span class="pl-v">this</span>.m_v2)}<span class="pl-k">else</span>{f<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(e<span class="pl-k">+</span>b);<span class="pl-v">this</span>.m_v1.a<span class="pl-k">=</span>e<span class="pl-k">*</span>f;<span class="pl-v">this</span>.m_v2.a<span class="pl-k">=</span>b<span class="pl-k">*</span>f;<span class="pl-v">this</span>.m_count<span class="pl-k">=</span><span class="pl-c1">2</span>}}};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Solve3</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.m_v1.w,e<span class="pl-k">=</span><span class="pl-v">this</span>.m_v2.w,</td>
      </tr>
      <tr>
        <td id="L88" class="blob-num js-line-number" data-line-number="88"></td>
        <td id="LC88" class="blob-code blob-code-inner js-file-line">f<span class="pl-k">=</span><span class="pl-v">this</span>.m_v3.w,m<span class="pl-k">=</span>w.SubtractVV(e,b),r<span class="pl-k">=</span>w.Dot(b,m),s<span class="pl-k">=</span>w.Dot(e,m);r<span class="pl-k">=-</span>r;<span class="pl-k">var</span> v<span class="pl-k">=</span>w.SubtractVV(f,b),t<span class="pl-k">=</span>w.Dot(b,v),x<span class="pl-k">=</span>w.Dot(f,v);t<span class="pl-k">=-</span>t;<span class="pl-k">var</span> C<span class="pl-k">=</span>w.SubtractVV(f,e),J<span class="pl-k">=</span>w.Dot(e,C);C<span class="pl-k">=</span>w.Dot(f,C);J<span class="pl-k">=-</span>J;v<span class="pl-k">=</span>w.CrossVV(m,v);m<span class="pl-k">=</span>v<span class="pl-k">*</span>w.CrossVV(e,f);f<span class="pl-k">=</span>v<span class="pl-k">*</span>w.CrossVV(f,b);b<span class="pl-k">=</span>v<span class="pl-k">*</span>w.CrossVV(b,e);<span class="pl-k">if</span>(r<span class="pl-k">&lt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>t<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>)<span class="pl-v">this</span>.m_count<span class="pl-k">=</span><span class="pl-v">this</span>.m_v1.a<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">else</span> <span class="pl-k">if</span>(s<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>r<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>b<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){x<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(s<span class="pl-k">+</span>r);<span class="pl-v">this</span>.m_v1.a<span class="pl-k">=</span>s<span class="pl-k">*</span>x;<span class="pl-v">this</span>.m_v2.a<span class="pl-k">=</span>r<span class="pl-k">*</span>x;<span class="pl-v">this</span>.m_count<span class="pl-k">=</span><span class="pl-c1">2</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(x<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>t<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>f<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){s<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(x<span class="pl-k">+</span>t);<span class="pl-v">this</span>.m_v1.a<span class="pl-k">=</span>x<span class="pl-k">*</span>s;<span class="pl-v">this</span>.m_v3.a<span class="pl-k">=</span>t<span class="pl-k">*</span>s;<span class="pl-v">this</span>.m_count<span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-v">this</span>.m_v2.Set(<span class="pl-v">this</span>.m_v3)}<span class="pl-k">else</span> <span class="pl-k">if</span>(s<span class="pl-k">&lt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>J<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){<span class="pl-v">this</span>.m_count<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L89" class="blob-num js-line-number" data-line-number="89"></td>
        <td id="LC89" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_v2.a<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.m_v1.Set(<span class="pl-v">this</span>.m_v2)}<span class="pl-k">else</span> <span class="pl-k">if</span>(x<span class="pl-k">&lt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>C<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){<span class="pl-v">this</span>.m_count<span class="pl-k">=</span><span class="pl-v">this</span>.m_v3.a<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.m_v1.Set(<span class="pl-v">this</span>.m_v3)}<span class="pl-k">else</span> <span class="pl-k">if</span>(C<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>J<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>m<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){s<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(C<span class="pl-k">+</span>J);<span class="pl-v">this</span>.m_v2.a<span class="pl-k">=</span>C<span class="pl-k">*</span>s;<span class="pl-v">this</span>.m_v3.a<span class="pl-k">=</span>J<span class="pl-k">*</span>s;<span class="pl-v">this</span>.m_count<span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-v">this</span>.m_v1.Set(<span class="pl-v">this</span>.m_v3)}<span class="pl-k">else</span>{s<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(m<span class="pl-k">+</span>f<span class="pl-k">+</span>b);<span class="pl-v">this</span>.m_v1.a<span class="pl-k">=</span>m<span class="pl-k">*</span>s;<span class="pl-v">this</span>.m_v2.a<span class="pl-k">=</span>f<span class="pl-k">*</span>s;<span class="pl-v">this</span>.m_v3.a<span class="pl-k">=</span>b<span class="pl-k">*</span>s;<span class="pl-v">this</span>.m_count<span class="pl-k">=</span><span class="pl-c1">3</span>}};<span class="pl-c1">l</span>.<span class="pl-en">b2SimplexCache</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.indexA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(<span class="pl-c1">3</span>);<span class="pl-v">this</span>.indexB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(<span class="pl-c1">3</span>)};<span class="pl-c1">j</span>.<span class="pl-en">b2SimplexVertex</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">j</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-v">this</span>.wA.SetV(b.wA);<span class="pl-v">this</span>.wB.SetV(b.wB);<span class="pl-v">this</span>.w.SetV(b.w);</td>
      </tr>
      <tr>
        <td id="L90" class="blob-num js-line-number" data-line-number="90"></td>
        <td id="LC90" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.a<span class="pl-k">=</span>b.a;<span class="pl-v">this</span>.indexA<span class="pl-k">=</span>b.indexA;<span class="pl-v">this</span>.indexB<span class="pl-k">=</span>b.indexB};<span class="pl-c1">o</span>.<span class="pl-en">b2TimeOfImpact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">o</span>.<span class="pl-en">TimeOfImpact</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">++</span>o.b2_toiCalls;<span class="pl-k">var</span> e<span class="pl-k">=</span>b.proxyA,f<span class="pl-k">=</span>b.proxyB,m<span class="pl-k">=</span>b.sweepA,r<span class="pl-k">=</span>b.sweepB;y.b2Assert(m.t0<span class="pl-k">==</span>r.t0);y.b2Assert(<span class="pl-c1">1</span><span class="pl-k">-</span>m.t0<span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>);<span class="pl-k">var</span> s<span class="pl-k">=</span>e.m_radius<span class="pl-k">+</span>f.m_radius;b<span class="pl-k">=</span>b.tolerance;<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-c1">0</span>,t<span class="pl-k">=</span><span class="pl-c1">0</span>,x<span class="pl-k">=</span><span class="pl-c1">0</span>;o.s_cache.count<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(o.s_distanceInput.useRadii<span class="pl-k">=</span><span class="pl-c1">false</span>;;){m.GetTransform(o.s_xfA,v);r.GetTransform(o.s_xfB,v);o.s_distanceInput.proxyA<span class="pl-k">=</span>e;o.s_distanceInput.proxyB<span class="pl-k">=</span>f;o.s_distanceInput.transformA<span class="pl-k">=</span>o.s_xfA;o.s_distanceInput.transformB<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L91" class="blob-num js-line-number" data-line-number="91"></td>
        <td id="LC91" class="blob-code blob-code-inner js-file-line">o.s_xfB;W.Distance(o.s_distanceOutput,o.s_cache,o.s_distanceInput);<span class="pl-k">if</span>(o.s_distanceOutput.distance<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){v<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>}o.s_fcn.Initialize(o.s_cache,e,o.s_xfA,f,o.s_xfB);<span class="pl-k">var</span> C<span class="pl-k">=</span>o.s_fcn.Evaluate(o.s_xfA,o.s_xfB);<span class="pl-k">if</span>(C<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>){v<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>}<span class="pl-k">if</span>(t<span class="pl-k">==</span><span class="pl-c1">0</span>)x<span class="pl-k">=</span>C<span class="pl-k">&gt;</span>s<span class="pl-k">?</span>w.Max(s<span class="pl-k">-</span>b,<span class="pl-c1">0.75</span><span class="pl-k">*</span>s)<span class="pl-k">:</span>w.Max(C<span class="pl-k">-</span>b,<span class="pl-c1">0.02</span><span class="pl-k">*</span>s);<span class="pl-k">if</span>(C<span class="pl-k">-</span>x<span class="pl-k">&lt;</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>b){<span class="pl-k">if</span>(t<span class="pl-k">==</span><span class="pl-c1">0</span>){v<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>}<span class="pl-k">break</span>}<span class="pl-k">var</span> J<span class="pl-k">=</span>v,T<span class="pl-k">=</span>v,P<span class="pl-k">=</span><span class="pl-c1">1</span>;C<span class="pl-k">=</span>C;m.GetTransform(o.s_xfA,P);r.GetTransform(o.s_xfB,P);<span class="pl-k">var</span> X<span class="pl-k">=</span>o.s_fcn.Evaluate(o.s_xfA,o.s_xfB);<span class="pl-k">if</span>(X<span class="pl-k">&gt;=</span>x){v<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">break</span>}<span class="pl-k">for</span>(<span class="pl-k">var</span> $<span class="pl-k">=</span><span class="pl-c1">0</span>;;){<span class="pl-k">var</span> ba<span class="pl-k">=</span><span class="pl-c1">0</span>;ba<span class="pl-k">=</span>$<span class="pl-k">&amp;</span><span class="pl-c1">1</span><span class="pl-k">?</span>T<span class="pl-k">+</span>(x<span class="pl-k">-</span>C)<span class="pl-k">*</span>(P<span class="pl-k">-</span>T)<span class="pl-k">/</span>(X<span class="pl-k">-</span>C)<span class="pl-k">:</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(T<span class="pl-k">+</span>P);</td>
      </tr>
      <tr>
        <td id="L92" class="blob-num js-line-number" data-line-number="92"></td>
        <td id="LC92" class="blob-code blob-code-inner js-file-line">m.GetTransform(o.s_xfA,ba);r.GetTransform(o.s_xfB,ba);<span class="pl-k">var</span> ca<span class="pl-k">=</span>o.s_fcn.Evaluate(o.s_xfA,o.s_xfB);<span class="pl-k">if</span>(w.Abs(ca<span class="pl-k">-</span>x)<span class="pl-k">&lt;</span><span class="pl-c1">0.025</span><span class="pl-k">*</span>b){J<span class="pl-k">=</span>ba;<span class="pl-k">break</span>}<span class="pl-k">if</span>(ca<span class="pl-k">&gt;</span>x){T<span class="pl-k">=</span>ba;C<span class="pl-k">=</span>ca}<span class="pl-k">else</span>{P<span class="pl-k">=</span>ba;X<span class="pl-k">=</span>ca}<span class="pl-k">++</span>$;<span class="pl-k">++</span>o.b2_toiRootIters;<span class="pl-k">if</span>($<span class="pl-k">==</span><span class="pl-c1">50</span>)<span class="pl-k">break</span>}o.b2_toiMaxRootIters<span class="pl-k">=</span>w.Max(o.b2_toiMaxRootIters,$);<span class="pl-k">if</span>(J<span class="pl-k">&lt;</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">100</span><span class="pl-k">*</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)<span class="pl-k">*</span>v)<span class="pl-k">break</span>;v<span class="pl-k">=</span>J;t<span class="pl-k">++</span>;<span class="pl-k">++</span>o.b2_toiIters;<span class="pl-k">if</span>(t<span class="pl-k">==</span><span class="pl-c1">1E3</span>)<span class="pl-k">break</span>}o.b2_toiMaxIters<span class="pl-k">=</span>w.Max(o.b2_toiMaxIters,t);<span class="pl-k">return</span> v};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Collision.b2TimeOfImpact.b2_toiCalls<span class="pl-k">=</span><span class="pl-c1">0</span>;Box2D.Collision.b2TimeOfImpact.b2_toiIters<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L93" class="blob-num js-line-number" data-line-number="93"></td>
        <td id="LC93" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;Box2D.Collision.b2TimeOfImpact.b2_toiMaxIters<span class="pl-k">=</span><span class="pl-c1">0</span>;Box2D.Collision.b2TimeOfImpact.b2_toiRootIters<span class="pl-k">=</span><span class="pl-c1">0</span>;Box2D.Collision.b2TimeOfImpact.b2_toiMaxRootIters<span class="pl-k">=</span><span class="pl-c1">0</span>;Box2D.Collision.b2TimeOfImpact.s_cache<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">l</span>;Box2D.Collision.b2TimeOfImpact.s_distanceInput<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Y</span>;Box2D.Collision.b2TimeOfImpact.s_xfA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;Box2D.Collision.b2TimeOfImpact.s_xfB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;Box2D.Collision.b2TimeOfImpact.s_fcn<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">d</span>;Box2D.Collision.b2TimeOfImpact.s_distanceOutput<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">k</span>});<span class="pl-c1">q</span>.<span class="pl-en">b2TOIInput</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.proxyA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">z</span>;<span class="pl-v">this</span>.proxyB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">z</span>;<span class="pl-v">this</span>.sweepA<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L94" class="blob-num js-line-number" data-line-number="94"></td>
        <td id="LC94" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-v">this</span>.sweepB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>};<span class="pl-c1">n</span>.<span class="pl-en">b2WorldManifold</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_normal<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-c1">n</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2WorldManifold</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_points<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(y.b2_maxManifoldPoints);<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>y.b2_maxManifoldPoints;b<span class="pl-k">++</span>)<span class="pl-v">this</span>.m_points[b]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-c1">n</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){<span class="pl-k">if</span>(f<span class="pl-k">===</span><span class="pl-c1">undefined</span>)f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(r<span class="pl-k">===</span><span class="pl-c1">undefined</span>)r<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(b.m_pointCount<span class="pl-k">!=</span><span class="pl-c1">0</span>){<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-c1">0</span>,v,t,x<span class="pl-k">=</span><span class="pl-c1">0</span>,C<span class="pl-k">=</span><span class="pl-c1">0</span>,J<span class="pl-k">=</span><span class="pl-c1">0</span>,T<span class="pl-k">=</span><span class="pl-c1">0</span>,P<span class="pl-k">=</span><span class="pl-c1">0</span>;v<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">switch</span>(b.m_type){<span class="pl-k">case</span> E.e_circles<span class="pl-k">:</span>t<span class="pl-k">=</span>e.R;v<span class="pl-k">=</span>b.m_localPoint;s<span class="pl-k">=</span>e.position.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>;e<span class="pl-k">=</span>e.position.<span class="pl-c1">y</span><span class="pl-k">+</span>t.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col2.<span class="pl-c1">y</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L95" class="blob-num js-line-number" data-line-number="95"></td>
        <td id="LC95" class="blob-code blob-code-inner js-file-line">v.<span class="pl-c1">y</span>;t<span class="pl-k">=</span>m.R;v<span class="pl-k">=</span>b.m_points[<span class="pl-c1">0</span>].m_localPoint;b<span class="pl-k">=</span>m.position.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>;m<span class="pl-k">=</span>m.position.<span class="pl-c1">y</span><span class="pl-k">+</span>t.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>;v<span class="pl-k">=</span>b<span class="pl-k">-</span>s;t<span class="pl-k">=</span>m<span class="pl-k">-</span>e;x<span class="pl-k">=</span>v<span class="pl-k">*</span>v<span class="pl-k">+</span>t<span class="pl-k">*</span>t;<span class="pl-k">if</span>(x<span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span><span class="pl-k">*</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>){x<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(x);<span class="pl-v">this</span>.m_normal.<span class="pl-c1">x</span><span class="pl-k">=</span>v<span class="pl-k">/</span>x;<span class="pl-v">this</span>.m_normal.<span class="pl-c1">y</span><span class="pl-k">=</span>t<span class="pl-k">/</span>x}<span class="pl-k">else</span>{<span class="pl-v">this</span>.m_normal.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.m_normal.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>}v<span class="pl-k">=</span>e<span class="pl-k">+</span>f<span class="pl-k">*</span><span class="pl-v">this</span>.m_normal.<span class="pl-c1">y</span>;m<span class="pl-k">=</span>m<span class="pl-k">-</span>r<span class="pl-k">*</span><span class="pl-v">this</span>.m_normal.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_points[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(s<span class="pl-k">+</span>f<span class="pl-k">*</span><span class="pl-v">this</span>.m_normal.<span class="pl-c1">x</span><span class="pl-k">+</span>(b<span class="pl-k">-</span>r<span class="pl-k">*</span><span class="pl-v">this</span>.m_normal.<span class="pl-c1">x</span>));<span class="pl-v">this</span>.m_points[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(v<span class="pl-k">+</span>m);<span class="pl-k">break</span>;<span class="pl-k">case</span> E.e_faceA<span class="pl-k">:</span>t<span class="pl-k">=</span>e.R;v<span class="pl-k">=</span>b.m_localPlaneNormal;x<span class="pl-k">=</span>t.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>;C<span class="pl-k">=</span>t.col1.<span class="pl-c1">y</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L96" class="blob-num js-line-number" data-line-number="96"></td>
        <td id="LC96" class="blob-code blob-code-inner js-file-line">v.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>;t<span class="pl-k">=</span>e.R;v<span class="pl-k">=</span>b.m_localPoint;J<span class="pl-k">=</span>e.position.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>;T<span class="pl-k">=</span>e.position.<span class="pl-c1">y</span><span class="pl-k">+</span>t.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_normal.<span class="pl-c1">x</span><span class="pl-k">=</span>x;<span class="pl-v">this</span>.m_normal.<span class="pl-c1">y</span><span class="pl-k">=</span>C;<span class="pl-k">for</span>(s<span class="pl-k">=</span><span class="pl-c1">0</span>;s<span class="pl-k">&lt;</span>b.m_pointCount;s<span class="pl-k">++</span>){t<span class="pl-k">=</span>m.R;v<span class="pl-k">=</span>b.m_points[s].m_localPoint;P<span class="pl-k">=</span>m.position.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>;v<span class="pl-k">=</span>m.position.<span class="pl-c1">y</span><span class="pl-k">+</span>t.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_points[s].<span class="pl-c1">x</span><span class="pl-k">=</span>P<span class="pl-k">+</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(f<span class="pl-k">-</span>(P<span class="pl-k">-</span>J)<span class="pl-k">*</span>x<span class="pl-k">-</span>(v<span class="pl-k">-</span>T)<span class="pl-k">*</span>C<span class="pl-k">-</span>r)<span class="pl-k">*</span>x;<span class="pl-v">this</span>.m_points[s].<span class="pl-c1">y</span><span class="pl-k">=</span>v<span class="pl-k">+</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(f<span class="pl-k">-</span>(P<span class="pl-k">-</span>J)<span class="pl-k">*</span>x<span class="pl-k">-</span>(v<span class="pl-k">-</span>T)<span class="pl-k">*</span>C<span class="pl-k">-</span>r)<span class="pl-k">*</span>C}<span class="pl-k">break</span>;<span class="pl-k">case</span> E.e_faceB<span class="pl-k">:</span>t<span class="pl-k">=</span>m.R;v<span class="pl-k">=</span>b.m_localPlaneNormal;x<span class="pl-k">=</span>t.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>;C<span class="pl-k">=</span>t.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col2.<span class="pl-c1">y</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L97" class="blob-num js-line-number" data-line-number="97"></td>
        <td id="LC97" class="blob-code blob-code-inner js-file-line">v.<span class="pl-c1">y</span>;t<span class="pl-k">=</span>m.R;v<span class="pl-k">=</span>b.m_localPoint;J<span class="pl-k">=</span>m.position.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>;T<span class="pl-k">=</span>m.position.<span class="pl-c1">y</span><span class="pl-k">+</span>t.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_normal.<span class="pl-c1">x</span><span class="pl-k">=-</span>x;<span class="pl-v">this</span>.m_normal.<span class="pl-c1">y</span><span class="pl-k">=-</span>C;<span class="pl-k">for</span>(s<span class="pl-k">=</span><span class="pl-c1">0</span>;s<span class="pl-k">&lt;</span>b.m_pointCount;s<span class="pl-k">++</span>){t<span class="pl-k">=</span>e.R;v<span class="pl-k">=</span>b.m_points[s].m_localPoint;P<span class="pl-k">=</span>e.position.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>;v<span class="pl-k">=</span>e.position.<span class="pl-c1">y</span><span class="pl-k">+</span>t.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">x</span><span class="pl-k">+</span>t.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>v.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_points[s].<span class="pl-c1">x</span><span class="pl-k">=</span>P<span class="pl-k">+</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(r<span class="pl-k">-</span>(P<span class="pl-k">-</span>J)<span class="pl-k">*</span>x<span class="pl-k">-</span>(v<span class="pl-k">-</span>T)<span class="pl-k">*</span>C<span class="pl-k">-</span>f)<span class="pl-k">*</span>x;<span class="pl-v">this</span>.m_points[s].<span class="pl-c1">y</span><span class="pl-k">=</span>v<span class="pl-k">+</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(r<span class="pl-k">-</span>(P<span class="pl-k">-</span>J)<span class="pl-k">*</span>x<span class="pl-k">-</span>(v<span class="pl-k">-</span>T)<span class="pl-k">*</span>C<span class="pl-k">-</span>f)<span class="pl-k">*</span>C}}}};<span class="pl-c1">a</span>.<span class="pl-en">ClipVertex</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.v<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>;<span class="pl-v">this</span>.<span class="pl-c1">id</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">L</span>};<span class="pl-c1">a</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-v">this</span>.v.SetV(b.v);<span class="pl-v">this</span>.<span class="pl-c1">id</span>.Set(b.<span class="pl-c1">id</span>)};</td>
      </tr>
      <tr>
        <td id="L98" class="blob-num js-line-number" data-line-number="98"></td>
        <td id="LC98" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">c</span>.<span class="pl-en">Features</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">Object</span>.defineProperty(c.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>referenceEdge<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._referenceEdge}});<span class="pl-c1">Object</span>.defineProperty(c.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>referenceEdge<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._referenceEdge<span class="pl-k">=</span>b;<span class="pl-v">this</span>._m_id._key<span class="pl-k">=</span><span class="pl-v">this</span>._m_id._key<span class="pl-k">&amp;</span><span class="pl-c1">4294967040</span>|<span class="pl-v">this</span>._referenceEdge<span class="pl-k">&amp;</span><span class="pl-c1">255</span>}});<span class="pl-c1">Object</span>.defineProperty(c.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>incidentEdge<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._incidentEdge}});<span class="pl-c1">Object</span>.defineProperty(c.<span class="pl-c1">prototype</span>,</td>
      </tr>
      <tr>
        <td id="L99" class="blob-num js-line-number" data-line-number="99"></td>
        <td id="LC99" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>incidentEdge<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._incidentEdge<span class="pl-k">=</span>b;<span class="pl-v">this</span>._m_id._key<span class="pl-k">=</span><span class="pl-v">this</span>._m_id._key<span class="pl-k">&amp;</span><span class="pl-c1">4294902015</span>|<span class="pl-v">this</span>._incidentEdge<span class="pl-k">&lt;&lt;</span><span class="pl-c1">8</span><span class="pl-k">&amp;</span><span class="pl-c1">65280</span>}});<span class="pl-c1">Object</span>.defineProperty(c.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>incidentVertex<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._incidentVertex}});<span class="pl-c1">Object</span>.defineProperty(c.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>incidentVertex<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._incidentVertex<span class="pl-k">=</span>b;<span class="pl-v">this</span>._m_id._key<span class="pl-k">=</span><span class="pl-v">this</span>._m_id._key<span class="pl-k">&amp;</span><span class="pl-c1">4278255615</span>|</td>
      </tr>
      <tr>
        <td id="L100" class="blob-num js-line-number" data-line-number="100"></td>
        <td id="LC100" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>._incidentVertex<span class="pl-k">&lt;&lt;</span><span class="pl-c1">16</span><span class="pl-k">&amp;</span><span class="pl-c1">16711680</span>}});<span class="pl-c1">Object</span>.defineProperty(c.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>flip<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._flip}});<span class="pl-c1">Object</span>.defineProperty(c.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>flip<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">if</span>(b<span class="pl-k">===</span><span class="pl-c1">undefined</span>)b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._flip<span class="pl-k">=</span>b;<span class="pl-v">this</span>._m_id._key<span class="pl-k">=</span><span class="pl-v">this</span>._m_id._key<span class="pl-k">&amp;</span><span class="pl-c1">16777215</span>|<span class="pl-v">this</span>._flip<span class="pl-k">&lt;&lt;</span><span class="pl-c1">24</span><span class="pl-k">&amp;</span><span class="pl-c1">4278190080</span>}})})();</td>
      </tr>
      <tr>
        <td id="L101" class="blob-num js-line-number" data-line-number="101"></td>
        <td id="LC101" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> F<span class="pl-k">=</span>Box2D.Common.b2Settings,G<span class="pl-k">=</span>Box2D.Collision.Shapes.b2CircleShape,K<span class="pl-k">=</span>Box2D.Collision.Shapes.b2EdgeChainDef,y<span class="pl-k">=</span>Box2D.Collision.Shapes.b2EdgeShape,w<span class="pl-k">=</span>Box2D.Collision.Shapes.b2MassData,A<span class="pl-k">=</span>Box2D.Collision.Shapes.b2PolygonShape,U<span class="pl-k">=</span>Box2D.Collision.Shapes.b2Shape,p<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Mat22,B<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Math,Q<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Transform,V<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Vec2,M<span class="pl-k">=</span>Box2D.Collision.b2Distance,L<span class="pl-k">=</span>Box2D.Collision.b2DistanceInput,I<span class="pl-k">=</span>Box2D.Collision.b2DistanceOutput,W<span class="pl-k">=</span>Box2D.Collision.b2DistanceProxy,</td>
      </tr>
      <tr>
        <td id="L102" class="blob-num js-line-number" data-line-number="102"></td>
        <td id="LC102" class="blob-code blob-code-inner js-file-line">Y<span class="pl-k">=</span>Box2D.Collision.b2SimplexCache;Box2D.inherit(G,Box2D.Collision.Shapes.b2Shape);<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Collision.Shapes.b2Shape.<span class="pl-c1">prototype</span>;<span class="pl-c1">G</span>.<span class="pl-en">b2CircleShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Collision.Shapes.b2Shape.b2Shape.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.m_p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;k.Set(<span class="pl-v">this</span>);<span class="pl-k">return</span> k};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-v">this</span>.__super.Set.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,k);<span class="pl-k">if</span>(Box2D.is(k,G))<span class="pl-v">this</span>.m_p.SetV((k <span class="pl-k">instanceof</span> G<span class="pl-k">?</span>k<span class="pl-k">:</span><span class="pl-c1">null</span>).m_p)};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">TestPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">var</span> u<span class="pl-k">=</span>k.R,D<span class="pl-k">=</span>k.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(u.col1.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_p.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L103" class="blob-num js-line-number" data-line-number="103"></td>
        <td id="LC103" class="blob-code blob-code-inner js-file-line">u.col2.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_p.<span class="pl-c1">y</span>);u<span class="pl-k">=</span>k.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(u.col1.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_p.<span class="pl-c1">x</span><span class="pl-k">+</span>u.col2.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_p.<span class="pl-c1">y</span>);D<span class="pl-k">=</span>z.<span class="pl-c1">x</span><span class="pl-k">-</span>D;u<span class="pl-k">=</span>z.<span class="pl-c1">y</span><span class="pl-k">-</span>u;<span class="pl-k">return</span> D<span class="pl-k">*</span>D<span class="pl-k">+</span>u<span class="pl-k">*</span>u<span class="pl-k">&lt;=</span><span class="pl-v">this</span>.m_radius<span class="pl-k">*</span><span class="pl-v">this</span>.m_radius};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>){<span class="pl-k">var</span> D<span class="pl-k">=</span>u.R,H<span class="pl-k">=</span>z.p1.<span class="pl-c1">x</span><span class="pl-k">-</span>(u.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(D.col1.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_p.<span class="pl-c1">x</span><span class="pl-k">+</span>D.col2.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_p.<span class="pl-c1">y</span>));u<span class="pl-k">=</span>z.p1.<span class="pl-c1">y</span><span class="pl-k">-</span>(u.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(D.col1.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_p.<span class="pl-c1">x</span><span class="pl-k">+</span>D.col2.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_p.<span class="pl-c1">y</span>));D<span class="pl-k">=</span>z.p2.<span class="pl-c1">x</span><span class="pl-k">-</span>z.p1.<span class="pl-c1">x</span>;<span class="pl-k">var</span> O<span class="pl-k">=</span>z.p2.<span class="pl-c1">y</span><span class="pl-k">-</span>z.p1.<span class="pl-c1">y</span>,E<span class="pl-k">=</span>H<span class="pl-k">*</span>D<span class="pl-k">+</span>u<span class="pl-k">*</span>O,R<span class="pl-k">=</span>D<span class="pl-k">*</span>D<span class="pl-k">+</span>O<span class="pl-k">*</span>O,N<span class="pl-k">=</span>E<span class="pl-k">*</span>E<span class="pl-k">-</span>R<span class="pl-k">*</span>(H<span class="pl-k">*</span>H<span class="pl-k">+</span>u<span class="pl-k">*</span>u<span class="pl-k">-</span><span class="pl-v">this</span>.m_radius<span class="pl-k">*</span><span class="pl-v">this</span>.m_radius);<span class="pl-k">if</span>(N<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">||</span>R<span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>;E<span class="pl-k">=-</span>(E<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(N));<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>E<span class="pl-k">&amp;&amp;</span>E<span class="pl-k">&lt;=</span>z.maxFraction<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L104" class="blob-num js-line-number" data-line-number="104"></td>
        <td id="LC104" class="blob-code blob-code-inner js-file-line">R){E<span class="pl-k">/=</span>R;k.fraction<span class="pl-k">=</span>E;k.normal.<span class="pl-c1">x</span><span class="pl-k">=</span>H<span class="pl-k">+</span>E<span class="pl-k">*</span>D;k.normal.<span class="pl-c1">y</span><span class="pl-k">=</span>u<span class="pl-k">+</span>E<span class="pl-k">*</span>O;k.normal.Normalize();<span class="pl-k">return</span> <span class="pl-c1">true</span>}<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeAABB</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">var</span> u<span class="pl-k">=</span>z.R,D<span class="pl-k">=</span>z.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(u.col1.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_p.<span class="pl-c1">x</span><span class="pl-k">+</span>u.col2.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_p.<span class="pl-c1">y</span>);u<span class="pl-k">=</span>z.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(u.col1.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_p.<span class="pl-c1">x</span><span class="pl-k">+</span>u.col2.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_p.<span class="pl-c1">y</span>);k.lowerBound.Set(D<span class="pl-k">-</span><span class="pl-v">this</span>.m_radius,u<span class="pl-k">-</span><span class="pl-v">this</span>.m_radius);k.upperBound.Set(D<span class="pl-k">+</span><span class="pl-v">this</span>.m_radius,u<span class="pl-k">+</span><span class="pl-v">this</span>.m_radius)};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeMass</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;k.mass<span class="pl-k">=</span>z<span class="pl-k">*</span>F.b2_pi<span class="pl-k">*</span><span class="pl-v">this</span>.m_radius<span class="pl-k">*</span><span class="pl-v">this</span>.m_radius;k.center.SetV(<span class="pl-v">this</span>.m_p);k.I<span class="pl-k">=</span>k.mass<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L105" class="blob-num js-line-number" data-line-number="105"></td>
        <td id="LC105" class="blob-code blob-code-inner js-file-line">(<span class="pl-c1">0.5</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_radius<span class="pl-k">*</span><span class="pl-v">this</span>.m_radius<span class="pl-k">+</span>(<span class="pl-v">this</span>.m_p.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_p.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_p.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_p.<span class="pl-c1">y</span>))};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeSubmergedArea</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>,<span class="pl-smi">D</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;u<span class="pl-k">=</span>B.MulX(u,<span class="pl-v">this</span>.m_p);<span class="pl-k">var</span> H<span class="pl-k">=-</span>(B.Dot(k,u)<span class="pl-k">-</span>z);<span class="pl-k">if</span>(H<span class="pl-k">&lt;-</span><span class="pl-v">this</span>.m_radius<span class="pl-k">+</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)<span class="pl-k">return</span> <span class="pl-c1">0</span>;<span class="pl-k">if</span>(H<span class="pl-k">&gt;</span><span class="pl-v">this</span>.m_radius){D.SetV(u);<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_radius<span class="pl-k">*</span><span class="pl-v">this</span>.m_radius}z<span class="pl-k">=</span><span class="pl-v">this</span>.m_radius<span class="pl-k">*</span><span class="pl-v">this</span>.m_radius;<span class="pl-k">var</span> O<span class="pl-k">=</span>H<span class="pl-k">*</span>H;H<span class="pl-k">=</span>z<span class="pl-k">*</span>(<span class="pl-c1">Math</span>.<span class="pl-c1">asin</span>(H<span class="pl-k">/</span><span class="pl-v">this</span>.m_radius)<span class="pl-k">+</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">/</span><span class="pl-c1">2</span>)<span class="pl-k">+</span>H<span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(z<span class="pl-k">-</span>O);z<span class="pl-k">=-</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">3</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">pow</span>(z<span class="pl-k">-</span>O,<span class="pl-c1">1.5</span>)<span class="pl-k">/</span>H;D.<span class="pl-c1">x</span><span class="pl-k">=</span>u.<span class="pl-c1">x</span><span class="pl-k">+</span>k.<span class="pl-c1">x</span><span class="pl-k">*</span>z;D.<span class="pl-c1">y</span><span class="pl-k">=</span>u.<span class="pl-c1">y</span><span class="pl-k">+</span>k.<span class="pl-c1">y</span><span class="pl-k">*</span>z;<span class="pl-k">return</span> H};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLocalPosition</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L106" class="blob-num js-line-number" data-line-number="106"></td>
        <td id="LC106" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_p};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLocalPosition</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-v">this</span>.m_p.SetV(k)};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetRadius</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_radius};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetRadius</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-k">if</span>(k<span class="pl-k">===</span><span class="pl-c1">undefined</span>)k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_radius<span class="pl-k">=</span>k};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2CircleShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-k">if</span>(k<span class="pl-k">===</span><span class="pl-c1">undefined</span>)k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.__super.b2Shape.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.m_type<span class="pl-k">=</span>U.e_circleShape;<span class="pl-v">this</span>.m_radius<span class="pl-k">=</span>k};<span class="pl-c1">K</span>.<span class="pl-en">b2EdgeChainDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">K</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2EdgeChainDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.vertexCount<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.isALoop<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-v">this</span>.vertices<span class="pl-k">=</span>[]};Box2D.inherit(y,Box2D.Collision.Shapes.b2Shape);</td>
      </tr>
      <tr>
        <td id="L107" class="blob-num js-line-number" data-line-number="107"></td>
        <td id="LC107" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Collision.Shapes.b2Shape.<span class="pl-c1">prototype</span>;<span class="pl-c1">y</span>.<span class="pl-en">b2EdgeShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Collision.Shapes.b2Shape.b2Shape.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.s_supportVec<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-v">this</span>.m_v1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-v">this</span>.m_v2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-v">this</span>.m_coreV1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-v">this</span>.m_coreV2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-v">this</span>.m_normal<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-v">this</span>.m_direction<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-v">this</span>.m_cornerDir1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-v">this</span>.m_cornerDir2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">TestPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>){<span class="pl-k">var</span> D,H<span class="pl-k">=</span>z.p2.<span class="pl-c1">x</span><span class="pl-k">-</span>z.p1.<span class="pl-c1">x</span>,O<span class="pl-k">=</span>z.p2.<span class="pl-c1">y</span><span class="pl-k">-</span>z.p1.<span class="pl-c1">y</span>;D<span class="pl-k">=</span>u.R;<span class="pl-k">var</span> E<span class="pl-k">=</span>u.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(D.col1.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_v1.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L108" class="blob-num js-line-number" data-line-number="108"></td>
        <td id="LC108" class="blob-code blob-code-inner js-file-line">D.col2.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_v1.<span class="pl-c1">y</span>),R<span class="pl-k">=</span>u.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(D.col1.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_v1.<span class="pl-c1">x</span><span class="pl-k">+</span>D.col2.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_v1.<span class="pl-c1">y</span>),N<span class="pl-k">=</span>u.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(D.col1.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_v2.<span class="pl-c1">x</span><span class="pl-k">+</span>D.col2.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_v2.<span class="pl-c1">y</span>)<span class="pl-k">-</span>R;u<span class="pl-k">=-</span>(u.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(D.col1.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_v2.<span class="pl-c1">x</span><span class="pl-k">+</span>D.col2.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_v2.<span class="pl-c1">y</span>)<span class="pl-k">-</span>E);D<span class="pl-k">=</span><span class="pl-c1">100</span><span class="pl-k">*</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>;<span class="pl-k">var</span> S<span class="pl-k">=-</span>(H<span class="pl-k">*</span>N<span class="pl-k">+</span>O<span class="pl-k">*</span>u);<span class="pl-k">if</span>(S<span class="pl-k">&gt;</span>D){E<span class="pl-k">=</span>z.p1.<span class="pl-c1">x</span><span class="pl-k">-</span>E;<span class="pl-k">var</span> aa<span class="pl-k">=</span>z.p1.<span class="pl-c1">y</span><span class="pl-k">-</span>R;R<span class="pl-k">=</span>E<span class="pl-k">*</span>N<span class="pl-k">+</span>aa<span class="pl-k">*</span>u;<span class="pl-k">if</span>(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>R<span class="pl-k">&amp;&amp;</span>R<span class="pl-k">&lt;=</span>z.maxFraction<span class="pl-k">*</span>S){z<span class="pl-k">=-</span>H<span class="pl-k">*</span>aa<span class="pl-k">+</span>O<span class="pl-k">*</span>E;<span class="pl-k">if</span>(<span class="pl-k">-</span>D<span class="pl-k">*</span>S<span class="pl-k">&lt;=</span>z<span class="pl-k">&amp;&amp;</span>z<span class="pl-k">&lt;=</span>S<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>D)){R<span class="pl-k">/=</span>S;k.fraction<span class="pl-k">=</span>R;z<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(N<span class="pl-k">*</span>N<span class="pl-k">+</span>u<span class="pl-k">*</span>u);k.normal.<span class="pl-c1">x</span><span class="pl-k">=</span>N<span class="pl-k">/</span>z;k.normal.<span class="pl-c1">y</span><span class="pl-k">=</span>u<span class="pl-k">/</span>z;<span class="pl-k">return</span> <span class="pl-c1">true</span>}}}<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeAABB</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">var</span> u<span class="pl-k">=</span>z.R,</td>
      </tr>
      <tr>
        <td id="L109" class="blob-num js-line-number" data-line-number="109"></td>
        <td id="LC109" class="blob-code blob-code-inner js-file-line">D<span class="pl-k">=</span>z.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(u.col1.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_v1.<span class="pl-c1">x</span><span class="pl-k">+</span>u.col2.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_v1.<span class="pl-c1">y</span>),H<span class="pl-k">=</span>z.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(u.col1.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_v1.<span class="pl-c1">x</span><span class="pl-k">+</span>u.col2.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_v1.<span class="pl-c1">y</span>),O<span class="pl-k">=</span>z.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(u.col1.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_v2.<span class="pl-c1">x</span><span class="pl-k">+</span>u.col2.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_v2.<span class="pl-c1">y</span>);u<span class="pl-k">=</span>z.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(u.col1.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_v2.<span class="pl-c1">x</span><span class="pl-k">+</span>u.col2.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_v2.<span class="pl-c1">y</span>);<span class="pl-k">if</span>(D<span class="pl-k">&lt;</span>O){k.lowerBound.<span class="pl-c1">x</span><span class="pl-k">=</span>D;k.upperBound.<span class="pl-c1">x</span><span class="pl-k">=</span>O}<span class="pl-k">else</span>{k.lowerBound.<span class="pl-c1">x</span><span class="pl-k">=</span>O;k.upperBound.<span class="pl-c1">x</span><span class="pl-k">=</span>D}<span class="pl-k">if</span>(H<span class="pl-k">&lt;</span>u){k.lowerBound.<span class="pl-c1">y</span><span class="pl-k">=</span>H;k.upperBound.<span class="pl-c1">y</span><span class="pl-k">=</span>u}<span class="pl-k">else</span>{k.lowerBound.<span class="pl-c1">y</span><span class="pl-k">=</span>u;k.upperBound.<span class="pl-c1">y</span><span class="pl-k">=</span>H}};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeMass</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){k.mass<span class="pl-k">=</span><span class="pl-c1">0</span>;k.center.SetV(<span class="pl-v">this</span>.m_v1);k.I<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeSubmergedArea</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L110" class="blob-num js-line-number" data-line-number="110"></td>
        <td id="LC110" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>,<span class="pl-smi">D</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> H<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>(k.<span class="pl-c1">x</span><span class="pl-k">*</span>z,k.<span class="pl-c1">y</span><span class="pl-k">*</span>z),O<span class="pl-k">=</span>B.MulX(u,<span class="pl-v">this</span>.m_v1);u<span class="pl-k">=</span>B.MulX(u,<span class="pl-v">this</span>.m_v2);<span class="pl-k">var</span> E<span class="pl-k">=</span>B.Dot(k,O)<span class="pl-k">-</span>z;k<span class="pl-k">=</span>B.Dot(k,u)<span class="pl-k">-</span>z;<span class="pl-k">if</span>(E<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">if</span>(k<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-c1">0</span>;<span class="pl-k">else</span>{O.<span class="pl-c1">x</span><span class="pl-k">=-</span>k<span class="pl-k">/</span>(E<span class="pl-k">-</span>k)<span class="pl-k">*</span>O.<span class="pl-c1">x</span><span class="pl-k">+</span>E<span class="pl-k">/</span>(E<span class="pl-k">-</span>k)<span class="pl-k">*</span>u.<span class="pl-c1">x</span>;O.<span class="pl-c1">y</span><span class="pl-k">=-</span>k<span class="pl-k">/</span>(E<span class="pl-k">-</span>k)<span class="pl-k">*</span>O.<span class="pl-c1">y</span><span class="pl-k">+</span>E<span class="pl-k">/</span>(E<span class="pl-k">-</span>k)<span class="pl-k">*</span>u.<span class="pl-c1">y</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(k<span class="pl-k">&gt;</span><span class="pl-c1">0</span>){u.<span class="pl-c1">x</span><span class="pl-k">=-</span>k<span class="pl-k">/</span>(E<span class="pl-k">-</span>k)<span class="pl-k">*</span>O.<span class="pl-c1">x</span><span class="pl-k">+</span>E<span class="pl-k">/</span>(E<span class="pl-k">-</span>k)<span class="pl-k">*</span>u.<span class="pl-c1">x</span>;u.<span class="pl-c1">y</span><span class="pl-k">=-</span>k<span class="pl-k">/</span>(E<span class="pl-k">-</span>k)<span class="pl-k">*</span>O.<span class="pl-c1">y</span><span class="pl-k">+</span>E<span class="pl-k">/</span>(E<span class="pl-k">-</span>k)<span class="pl-k">*</span>u.<span class="pl-c1">y</span>}D.<span class="pl-c1">x</span><span class="pl-k">=</span>(H.<span class="pl-c1">x</span><span class="pl-k">+</span>O.<span class="pl-c1">x</span><span class="pl-k">+</span>u.<span class="pl-c1">x</span>)<span class="pl-k">/</span><span class="pl-c1">3</span>;D.<span class="pl-c1">y</span><span class="pl-k">=</span>(H.<span class="pl-c1">y</span><span class="pl-k">+</span>O.<span class="pl-c1">y</span><span class="pl-k">+</span>u.<span class="pl-c1">y</span>)<span class="pl-k">/</span><span class="pl-c1">3</span>;<span class="pl-k">return</span> <span class="pl-c1">0.5</span><span class="pl-k">*</span>((O.<span class="pl-c1">x</span><span class="pl-k">-</span>H.<span class="pl-c1">x</span>)<span class="pl-k">*</span>(u.<span class="pl-c1">y</span><span class="pl-k">-</span>H.<span class="pl-c1">y</span>)<span class="pl-k">-</span>(O.<span class="pl-c1">y</span><span class="pl-k">-</span>H.<span class="pl-c1">y</span>)<span class="pl-k">*</span>(u.<span class="pl-c1">x</span><span class="pl-k">-</span>H.<span class="pl-c1">x</span>))};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_length};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetVertex1</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_v1};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetVertex2</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L111" class="blob-num js-line-number" data-line-number="111"></td>
        <td id="LC111" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_v2};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetCoreVertex1</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_coreV1};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetCoreVertex2</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_coreV2};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNormalVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_normal};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetDirectionVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_direction};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetCorner1Vector</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_cornerDir1};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetCorner2Vector</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_cornerDir2};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Corner1IsConvex</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_cornerConvex1};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Corner2IsConvex</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L112" class="blob-num js-line-number" data-line-number="112"></td>
        <td id="LC112" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_cornerConvex2};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFirstVertex</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-k">var</span> z<span class="pl-k">=</span>k.R;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">V</span>(k.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(z.col1.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_coreV1.<span class="pl-c1">x</span><span class="pl-k">+</span>z.col2.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_coreV1.<span class="pl-c1">y</span>),k.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(z.col1.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_coreV1.<span class="pl-c1">x</span><span class="pl-k">+</span>z.col2.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_coreV1.<span class="pl-c1">y</span>))};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNextEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_nextEdge};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetPrevEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_prevEdge};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Support</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(u<span class="pl-k">===</span><span class="pl-c1">undefined</span>)u<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> D<span class="pl-k">=</span>k.R,H<span class="pl-k">=</span>k.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(D.col1.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_coreV1.<span class="pl-c1">x</span><span class="pl-k">+</span>D.col2.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_coreV1.<span class="pl-c1">y</span>),</td>
      </tr>
      <tr>
        <td id="L113" class="blob-num js-line-number" data-line-number="113"></td>
        <td id="LC113" class="blob-code blob-code-inner js-file-line">O<span class="pl-k">=</span>k.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(D.col1.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_coreV1.<span class="pl-c1">x</span><span class="pl-k">+</span>D.col2.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_coreV1.<span class="pl-c1">y</span>),E<span class="pl-k">=</span>k.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(D.col1.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_coreV2.<span class="pl-c1">x</span><span class="pl-k">+</span>D.col2.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_coreV2.<span class="pl-c1">y</span>);k<span class="pl-k">=</span>k.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(D.col1.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_coreV2.<span class="pl-c1">x</span><span class="pl-k">+</span>D.col2.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_coreV2.<span class="pl-c1">y</span>);<span class="pl-k">if</span>(H<span class="pl-k">*</span>z<span class="pl-k">+</span>O<span class="pl-k">*</span>u<span class="pl-k">&gt;</span>E<span class="pl-k">*</span>z<span class="pl-k">+</span>k<span class="pl-k">*</span>u){<span class="pl-v">this</span>.s_supportVec.<span class="pl-c1">x</span><span class="pl-k">=</span>H;<span class="pl-v">this</span>.s_supportVec.<span class="pl-c1">y</span><span class="pl-k">=</span>O}<span class="pl-k">else</span>{<span class="pl-v">this</span>.s_supportVec.<span class="pl-c1">x</span><span class="pl-k">=</span>E;<span class="pl-v">this</span>.s_supportVec.<span class="pl-c1">y</span><span class="pl-k">=</span>k}<span class="pl-k">return</span> <span class="pl-v">this</span>.s_supportVec};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2EdgeShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-v">this</span>.__super.b2Shape.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.m_type<span class="pl-k">=</span>U.e_edgeShape;<span class="pl-v">this</span>.m_nextEdge<span class="pl-k">=</span><span class="pl-v">this</span>.m_prevEdge<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_v1<span class="pl-k">=</span>k;<span class="pl-v">this</span>.m_v2<span class="pl-k">=</span>z;<span class="pl-v">this</span>.m_direction.Set(<span class="pl-v">this</span>.m_v2.<span class="pl-c1">x</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L114" class="blob-num js-line-number" data-line-number="114"></td>
        <td id="LC114" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_v1.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.m_v2.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_v1.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.m_length<span class="pl-k">=</span><span class="pl-v">this</span>.m_direction.Normalize();<span class="pl-v">this</span>.m_normal.Set(<span class="pl-v">this</span>.m_direction.<span class="pl-c1">y</span>,<span class="pl-k">-</span><span class="pl-v">this</span>.m_direction.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.m_coreV1.Set(<span class="pl-k">-</span>F.b2_toiSlop<span class="pl-k">*</span>(<span class="pl-v">this</span>.m_normal.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_direction.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-v">this</span>.m_v1.<span class="pl-c1">x</span>,<span class="pl-k">-</span>F.b2_toiSlop<span class="pl-k">*</span>(<span class="pl-v">this</span>.m_normal.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_direction.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-v">this</span>.m_v1.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.m_coreV2.Set(<span class="pl-k">-</span>F.b2_toiSlop<span class="pl-k">*</span>(<span class="pl-v">this</span>.m_normal.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_direction.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-v">this</span>.m_v2.<span class="pl-c1">x</span>,<span class="pl-k">-</span>F.b2_toiSlop<span class="pl-k">*</span>(<span class="pl-v">this</span>.m_normal.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_direction.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-v">this</span>.m_v2.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.m_cornerDir1<span class="pl-k">=</span><span class="pl-v">this</span>.m_normal;<span class="pl-v">this</span>.m_cornerDir2.Set(<span class="pl-k">-</span><span class="pl-v">this</span>.m_normal.<span class="pl-c1">x</span>,<span class="pl-k">-</span><span class="pl-v">this</span>.m_normal.<span class="pl-c1">y</span>)};</td>
      </tr>
      <tr>
        <td id="L115" class="blob-num js-line-number" data-line-number="115"></td>
        <td id="LC115" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetPrevEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>,<span class="pl-smi">D</span>){<span class="pl-v">this</span>.m_prevEdge<span class="pl-k">=</span>k;<span class="pl-v">this</span>.m_coreV1<span class="pl-k">=</span>z;<span class="pl-v">this</span>.m_cornerDir1<span class="pl-k">=</span>u;<span class="pl-v">this</span>.m_cornerConvex1<span class="pl-k">=</span>D};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetNextEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>,<span class="pl-smi">D</span>){<span class="pl-v">this</span>.m_nextEdge<span class="pl-k">=</span>k;<span class="pl-v">this</span>.m_coreV2<span class="pl-k">=</span>z;<span class="pl-v">this</span>.m_cornerDir2<span class="pl-k">=</span>u;<span class="pl-v">this</span>.m_cornerConvex2<span class="pl-k">=</span>D};<span class="pl-c1">w</span>.<span class="pl-en">b2MassData</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.mass<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.center<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.I<span class="pl-k">=</span><span class="pl-c1">0</span>};Box2D.inherit(A,Box2D.Collision.Shapes.b2Shape);<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Collision.Shapes.b2Shape.<span class="pl-c1">prototype</span>;<span class="pl-c1">A</span>.<span class="pl-en">b2PolygonShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Collision.Shapes.b2Shape.b2Shape.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)};</td>
      </tr>
      <tr>
        <td id="L116" class="blob-num js-line-number" data-line-number="116"></td>
        <td id="LC116" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;k.Set(<span class="pl-v">this</span>);<span class="pl-k">return</span> k};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-v">this</span>.__super.Set.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,k);<span class="pl-k">if</span>(Box2D.is(k,A)){k<span class="pl-k">=</span>k <span class="pl-k">instanceof</span> A<span class="pl-k">?</span>k<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_centroid.SetV(k.m_centroid);<span class="pl-v">this</span>.m_vertexCount<span class="pl-k">=</span>k.m_vertexCount;<span class="pl-v">this</span>.Reserve(<span class="pl-v">this</span>.m_vertexCount);<span class="pl-k">for</span>(<span class="pl-k">var</span> z<span class="pl-k">=</span><span class="pl-c1">0</span>;z<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_vertexCount;z<span class="pl-k">++</span>){<span class="pl-v">this</span>.m_vertices[z].SetV(k.m_vertices[z]);<span class="pl-v">this</span>.m_normals[z].SetV(k.m_normals[z])}}};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAsArray</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>,D<span class="pl-k">=</span><span class="pl-c1">0</span>,H;<span class="pl-k">for</span>(D<span class="pl-k">=</span><span class="pl-c1">0</span>;D<span class="pl-k">&lt;</span>k.<span class="pl-c1">length</span>;<span class="pl-k">++</span>D){H<span class="pl-k">=</span>k[D];u.<span class="pl-c1">push</span>(H)}<span class="pl-v">this</span>.SetAsVector(u,</td>
      </tr>
      <tr>
        <td id="L117" class="blob-num js-line-number" data-line-number="117"></td>
        <td id="LC117" class="blob-code blob-code-inner js-file-line">z)};<span class="pl-c1">A</span>.<span class="pl-en">AsArray</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;u.SetAsArray(k,z);<span class="pl-k">return</span> u};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAsVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(z<span class="pl-k">==</span><span class="pl-c1">0</span>)z<span class="pl-k">=</span>k.<span class="pl-c1">length</span>;F.b2Assert(<span class="pl-c1">2</span><span class="pl-k">&lt;=</span>z);<span class="pl-v">this</span>.m_vertexCount<span class="pl-k">=</span>z;<span class="pl-v">this</span>.Reserve(z);<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(u<span class="pl-k">=</span><span class="pl-c1">0</span>;u<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_vertexCount;u<span class="pl-k">++</span>)<span class="pl-v">this</span>.m_vertices[u].SetV(k[u]);<span class="pl-k">for</span>(u<span class="pl-k">=</span><span class="pl-c1">0</span>;u<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_vertexCount;<span class="pl-k">++</span>u){<span class="pl-k">var</span> D<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(u),H<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(u<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_vertexCount<span class="pl-k">?</span>u<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0</span>);D<span class="pl-k">=</span>B.SubtractVV(<span class="pl-v">this</span>.m_vertices[H],<span class="pl-v">this</span>.m_vertices[D]);F.b2Assert(D.LengthSquared()<span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>);<span class="pl-v">this</span>.m_normals[u].SetV(B.CrossVF(D,</td>
      </tr>
      <tr>
        <td id="L118" class="blob-num js-line-number" data-line-number="118"></td>
        <td id="LC118" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>));<span class="pl-v">this</span>.m_normals[u].Normalize()}<span class="pl-v">this</span>.m_centroid<span class="pl-k">=</span>A.ComputeCentroid(<span class="pl-v">this</span>.m_vertices,<span class="pl-v">this</span>.m_vertexCount)};<span class="pl-c1">A</span>.<span class="pl-en">AsVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;u.SetAsVector(k,z);<span class="pl-k">return</span> u};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAsBox</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(k<span class="pl-k">===</span><span class="pl-c1">undefined</span>)k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_vertexCount<span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-v">this</span>.Reserve(<span class="pl-c1">4</span>);<span class="pl-v">this</span>.m_vertices[<span class="pl-c1">0</span>].Set(<span class="pl-k">-</span>k,<span class="pl-k">-</span>z);<span class="pl-v">this</span>.m_vertices[<span class="pl-c1">1</span>].Set(k,<span class="pl-k">-</span>z);<span class="pl-v">this</span>.m_vertices[<span class="pl-c1">2</span>].Set(k,z);<span class="pl-v">this</span>.m_vertices[<span class="pl-c1">3</span>].Set(<span class="pl-k">-</span>k,z);<span class="pl-v">this</span>.m_normals[<span class="pl-c1">0</span>].Set(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-v">this</span>.m_normals[<span class="pl-c1">1</span>].Set(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.m_normals[<span class="pl-c1">2</span>].Set(<span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L119" class="blob-num js-line-number" data-line-number="119"></td>
        <td id="LC119" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>);<span class="pl-v">this</span>.m_normals[<span class="pl-c1">3</span>].Set(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.m_centroid.SetZero()};<span class="pl-c1">A</span>.<span class="pl-en">AsBox</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(k<span class="pl-k">===</span><span class="pl-c1">undefined</span>)k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;u.SetAsBox(k,z);<span class="pl-k">return</span> u};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAsOrientedBox</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>,<span class="pl-smi">D</span>){<span class="pl-k">if</span>(k<span class="pl-k">===</span><span class="pl-c1">undefined</span>)k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(u<span class="pl-k">===</span><span class="pl-c1">undefined</span>)u<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(D<span class="pl-k">===</span><span class="pl-c1">undefined</span>)D<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_vertexCount<span class="pl-k">=</span><span class="pl-c1">4</span>;<span class="pl-v">this</span>.Reserve(<span class="pl-c1">4</span>);<span class="pl-v">this</span>.m_vertices[<span class="pl-c1">0</span>].Set(<span class="pl-k">-</span>k,<span class="pl-k">-</span>z);<span class="pl-v">this</span>.m_vertices[<span class="pl-c1">1</span>].Set(k,<span class="pl-k">-</span>z);<span class="pl-v">this</span>.m_vertices[<span class="pl-c1">2</span>].Set(k,z);<span class="pl-v">this</span>.m_vertices[<span class="pl-c1">3</span>].Set(<span class="pl-k">-</span>k,z);<span class="pl-v">this</span>.m_normals[<span class="pl-c1">0</span>].Set(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-v">this</span>.m_normals[<span class="pl-c1">1</span>].Set(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L120" class="blob-num js-line-number" data-line-number="120"></td>
        <td id="LC120" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_normals[<span class="pl-c1">2</span>].Set(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);<span class="pl-v">this</span>.m_normals[<span class="pl-c1">3</span>].Set(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.m_centroid<span class="pl-k">=</span>u;k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Q</span>;k.position<span class="pl-k">=</span>u;k.R.Set(D);<span class="pl-k">for</span>(u<span class="pl-k">=</span><span class="pl-c1">0</span>;u<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_vertexCount;<span class="pl-k">++</span>u){<span class="pl-v">this</span>.m_vertices[u]<span class="pl-k">=</span>B.MulX(k,<span class="pl-v">this</span>.m_vertices[u]);<span class="pl-v">this</span>.m_normals[u]<span class="pl-k">=</span>B.MulMV(k.R,<span class="pl-v">this</span>.m_normals[u])}};<span class="pl-c1">A</span>.<span class="pl-en">AsOrientedBox</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>,<span class="pl-smi">D</span>){<span class="pl-k">if</span>(k<span class="pl-k">===</span><span class="pl-c1">undefined</span>)k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(u<span class="pl-k">===</span><span class="pl-c1">undefined</span>)u<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(D<span class="pl-k">===</span><span class="pl-c1">undefined</span>)D<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> H<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;H.SetAsOrientedBox(k,z,u,D);<span class="pl-k">return</span> H};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAsEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-v">this</span>.m_vertexCount<span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-v">this</span>.Reserve(<span class="pl-c1">2</span>);<span class="pl-v">this</span>.m_vertices[<span class="pl-c1">0</span>].SetV(k);</td>
      </tr>
      <tr>
        <td id="L121" class="blob-num js-line-number" data-line-number="121"></td>
        <td id="LC121" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_vertices[<span class="pl-c1">1</span>].SetV(z);<span class="pl-v">this</span>.m_centroid.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(k.<span class="pl-c1">x</span><span class="pl-k">+</span>z.<span class="pl-c1">x</span>);<span class="pl-v">this</span>.m_centroid.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(k.<span class="pl-c1">y</span><span class="pl-k">+</span>z.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.m_normals[<span class="pl-c1">0</span>]<span class="pl-k">=</span>B.CrossVF(B.SubtractVV(z,k),<span class="pl-c1">1</span>);<span class="pl-v">this</span>.m_normals[<span class="pl-c1">0</span>].Normalize();<span class="pl-v">this</span>.m_normals[<span class="pl-c1">1</span>].<span class="pl-c1">x</span><span class="pl-k">=-</span><span class="pl-v">this</span>.m_normals[<span class="pl-c1">0</span>].<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_normals[<span class="pl-c1">1</span>].<span class="pl-c1">y</span><span class="pl-k">=-</span><span class="pl-v">this</span>.m_normals[<span class="pl-c1">0</span>].<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-en">AsEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;u.SetAsEdge(k,z);<span class="pl-k">return</span> u};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">TestPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">var</span> u;u<span class="pl-k">=</span>k.R;<span class="pl-k">for</span>(<span class="pl-k">var</span> D<span class="pl-k">=</span>z.<span class="pl-c1">x</span><span class="pl-k">-</span>k.position.<span class="pl-c1">x</span>,H<span class="pl-k">=</span>z.<span class="pl-c1">y</span><span class="pl-k">-</span>k.position.<span class="pl-c1">y</span>,O<span class="pl-k">=</span>D<span class="pl-k">*</span>u.col1.<span class="pl-c1">x</span><span class="pl-k">+</span>H<span class="pl-k">*</span>u.col1.<span class="pl-c1">y</span>,E<span class="pl-k">=</span>D<span class="pl-k">*</span>u.col2.<span class="pl-c1">x</span><span class="pl-k">+</span>H<span class="pl-k">*</span>u.col2.<span class="pl-c1">y</span>,R<span class="pl-k">=</span><span class="pl-c1">0</span>;R<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_vertexCount;<span class="pl-k">++</span>R){u<span class="pl-k">=</span><span class="pl-v">this</span>.m_vertices[R];</td>
      </tr>
      <tr>
        <td id="L122" class="blob-num js-line-number" data-line-number="122"></td>
        <td id="LC122" class="blob-code blob-code-inner js-file-line">D<span class="pl-k">=</span>O<span class="pl-k">-</span>u.<span class="pl-c1">x</span>;H<span class="pl-k">=</span>E<span class="pl-k">-</span>u.<span class="pl-c1">y</span>;u<span class="pl-k">=</span><span class="pl-v">this</span>.m_normals[R];<span class="pl-k">if</span>(u.<span class="pl-c1">x</span><span class="pl-k">*</span>D<span class="pl-k">+</span>u.<span class="pl-c1">y</span><span class="pl-k">*</span>H<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>}<span class="pl-k">return</span> <span class="pl-c1">true</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>){<span class="pl-k">var</span> D<span class="pl-k">=</span><span class="pl-c1">0</span>,H<span class="pl-k">=</span>z.maxFraction,O<span class="pl-k">=</span><span class="pl-c1">0</span>,E<span class="pl-k">=</span><span class="pl-c1">0</span>,R,N;O<span class="pl-k">=</span>z.p1.<span class="pl-c1">x</span><span class="pl-k">-</span>u.position.<span class="pl-c1">x</span>;E<span class="pl-k">=</span>z.p1.<span class="pl-c1">y</span><span class="pl-k">-</span>u.position.<span class="pl-c1">y</span>;R<span class="pl-k">=</span>u.R;<span class="pl-k">var</span> S<span class="pl-k">=</span>O<span class="pl-k">*</span>R.col1.<span class="pl-c1">x</span><span class="pl-k">+</span>E<span class="pl-k">*</span>R.col1.<span class="pl-c1">y</span>,aa<span class="pl-k">=</span>O<span class="pl-k">*</span>R.col2.<span class="pl-c1">x</span><span class="pl-k">+</span>E<span class="pl-k">*</span>R.col2.<span class="pl-c1">y</span>;O<span class="pl-k">=</span>z.p2.<span class="pl-c1">x</span><span class="pl-k">-</span>u.position.<span class="pl-c1">x</span>;E<span class="pl-k">=</span>z.p2.<span class="pl-c1">y</span><span class="pl-k">-</span>u.position.<span class="pl-c1">y</span>;R<span class="pl-k">=</span>u.R;z<span class="pl-k">=</span>O<span class="pl-k">*</span>R.col1.<span class="pl-c1">x</span><span class="pl-k">+</span>E<span class="pl-k">*</span>R.col1.<span class="pl-c1">y</span><span class="pl-k">-</span>S;R<span class="pl-k">=</span>O<span class="pl-k">*</span>R.col2.<span class="pl-c1">x</span><span class="pl-k">+</span>E<span class="pl-k">*</span>R.col2.<span class="pl-c1">y</span><span class="pl-k">-</span>aa;<span class="pl-k">for</span>(<span class="pl-k">var</span> Z<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>),d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_vertexCount;<span class="pl-k">++</span>d){N<span class="pl-k">=</span><span class="pl-v">this</span>.m_vertices[d];O<span class="pl-k">=</span>N.<span class="pl-c1">x</span><span class="pl-k">-</span>S;E<span class="pl-k">=</span>N.<span class="pl-c1">y</span><span class="pl-k">-</span>aa;N<span class="pl-k">=</span><span class="pl-v">this</span>.m_normals[d];O<span class="pl-k">=</span>N.<span class="pl-c1">x</span><span class="pl-k">*</span>O<span class="pl-k">+</span>N.<span class="pl-c1">y</span><span class="pl-k">*</span>E;E<span class="pl-k">=</span>N.<span class="pl-c1">x</span><span class="pl-k">*</span>z<span class="pl-k">+</span>N.<span class="pl-c1">y</span><span class="pl-k">*</span>R;<span class="pl-k">if</span>(E<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L123" class="blob-num js-line-number" data-line-number="123"></td>
        <td id="LC123" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>){<span class="pl-k">if</span>(O<span class="pl-k">&lt;</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(E<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>O<span class="pl-k">&lt;</span>D<span class="pl-k">*</span>E){D<span class="pl-k">=</span>O<span class="pl-k">/</span>E;Z<span class="pl-k">=</span>d}<span class="pl-k">else</span> <span class="pl-k">if</span>(E<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>O<span class="pl-k">&lt;</span>H<span class="pl-k">*</span>E)H<span class="pl-k">=</span>O<span class="pl-k">/</span>E;<span class="pl-k">if</span>(H<span class="pl-k">&lt;</span>D<span class="pl-k">-</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>}<span class="pl-k">if</span>(Z<span class="pl-k">&gt;=</span><span class="pl-c1">0</span>){k.fraction<span class="pl-k">=</span>D;R<span class="pl-k">=</span>u.R;N<span class="pl-k">=</span><span class="pl-v">this</span>.m_normals[Z];k.normal.<span class="pl-c1">x</span><span class="pl-k">=</span>R.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>N.<span class="pl-c1">x</span><span class="pl-k">+</span>R.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>N.<span class="pl-c1">y</span>;k.normal.<span class="pl-c1">y</span><span class="pl-k">=</span>R.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>N.<span class="pl-c1">x</span><span class="pl-k">+</span>R.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>N.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">true</span>}<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeAABB</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> u<span class="pl-k">=</span>z.R,D<span class="pl-k">=</span><span class="pl-v">this</span>.m_vertices[<span class="pl-c1">0</span>],H<span class="pl-k">=</span>z.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(u.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>D.<span class="pl-c1">x</span><span class="pl-k">+</span>u.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>D.<span class="pl-c1">y</span>),O<span class="pl-k">=</span>z.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(u.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>D.<span class="pl-c1">x</span><span class="pl-k">+</span>u.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>D.<span class="pl-c1">y</span>),E<span class="pl-k">=</span>H,R<span class="pl-k">=</span>O,N<span class="pl-k">=</span><span class="pl-c1">1</span>;N<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_vertexCount;<span class="pl-k">++</span>N){D<span class="pl-k">=</span><span class="pl-v">this</span>.m_vertices[N];<span class="pl-k">var</span> S<span class="pl-k">=</span>z.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(u.col1.<span class="pl-c1">x</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L124" class="blob-num js-line-number" data-line-number="124"></td>
        <td id="LC124" class="blob-code blob-code-inner js-file-line">D.<span class="pl-c1">x</span><span class="pl-k">+</span>u.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>D.<span class="pl-c1">y</span>);D<span class="pl-k">=</span>z.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(u.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>D.<span class="pl-c1">x</span><span class="pl-k">+</span>u.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>D.<span class="pl-c1">y</span>);H<span class="pl-k">=</span>H<span class="pl-k">&lt;</span>S<span class="pl-k">?</span>H<span class="pl-k">:</span>S;O<span class="pl-k">=</span>O<span class="pl-k">&lt;</span>D<span class="pl-k">?</span>O<span class="pl-k">:</span>D;E<span class="pl-k">=</span>E<span class="pl-k">&gt;</span>S<span class="pl-k">?</span>E<span class="pl-k">:</span>S;R<span class="pl-k">=</span>R<span class="pl-k">&gt;</span>D<span class="pl-k">?</span>R<span class="pl-k">:</span>D}k.lowerBound.<span class="pl-c1">x</span><span class="pl-k">=</span>H<span class="pl-k">-</span><span class="pl-v">this</span>.m_radius;k.lowerBound.<span class="pl-c1">y</span><span class="pl-k">=</span>O<span class="pl-k">-</span><span class="pl-v">this</span>.m_radius;k.upperBound.<span class="pl-c1">x</span><span class="pl-k">=</span>E<span class="pl-k">+</span><span class="pl-v">this</span>.m_radius;k.upperBound.<span class="pl-c1">y</span><span class="pl-k">=</span>R<span class="pl-k">+</span><span class="pl-v">this</span>.m_radius};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeMass</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_vertexCount<span class="pl-k">==</span><span class="pl-c1">2</span>){k.center.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-v">this</span>.m_vertices[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_vertices[<span class="pl-c1">1</span>].<span class="pl-c1">x</span>);k.center.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-v">this</span>.m_vertices[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_vertices[<span class="pl-c1">1</span>].<span class="pl-c1">y</span>);k.mass<span class="pl-k">=</span><span class="pl-c1">0</span>;k.I<span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">else</span>{<span class="pl-k">for</span>(<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-c1">0</span>,D<span class="pl-k">=</span><span class="pl-c1">0</span>,H<span class="pl-k">=</span><span class="pl-c1">0</span>,O<span class="pl-k">=</span><span class="pl-c1">0</span>,E<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>,R<span class="pl-k">=</span><span class="pl-c1">0</span>;R<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_vertexCount;<span class="pl-k">++</span>R){<span class="pl-k">var</span> N<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L125" class="blob-num js-line-number" data-line-number="125"></td>
        <td id="LC125" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_vertices[R],S<span class="pl-k">=</span>R<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_vertexCount<span class="pl-k">?</span><span class="pl-v">this</span>.m_vertices[<span class="pl-c1">parseInt</span>(R<span class="pl-k">+</span><span class="pl-c1">1</span>)]<span class="pl-k">:</span><span class="pl-v">this</span>.m_vertices[<span class="pl-c1">0</span>],aa<span class="pl-k">=</span>N.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">0</span>,Z<span class="pl-k">=</span>N.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">0</span>,d<span class="pl-k">=</span>S.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">0</span>,h<span class="pl-k">=</span>S.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">0</span>,l<span class="pl-k">=</span>aa<span class="pl-k">*</span>h<span class="pl-k">-</span>Z<span class="pl-k">*</span>d,j<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>l;H<span class="pl-k">+=</span>j;u<span class="pl-k">+=</span>j<span class="pl-k">*</span>E<span class="pl-k">*</span>(<span class="pl-c1">0</span><span class="pl-k">+</span>N.<span class="pl-c1">x</span><span class="pl-k">+</span>S.<span class="pl-c1">x</span>);D<span class="pl-k">+=</span>j<span class="pl-k">*</span>E<span class="pl-k">*</span>(<span class="pl-c1">0</span><span class="pl-k">+</span>N.<span class="pl-c1">y</span><span class="pl-k">+</span>S.<span class="pl-c1">y</span>);N<span class="pl-k">=</span>aa;Z<span class="pl-k">=</span>Z;d<span class="pl-k">=</span>d;h<span class="pl-k">=</span>h;O<span class="pl-k">+=</span>l<span class="pl-k">*</span>(E<span class="pl-k">*</span>(<span class="pl-c1">0.25</span><span class="pl-k">*</span>(N<span class="pl-k">*</span>N<span class="pl-k">+</span>d<span class="pl-k">*</span>N<span class="pl-k">+</span>d<span class="pl-k">*</span>d)<span class="pl-k">+</span>(<span class="pl-c1">0</span><span class="pl-k">*</span>N<span class="pl-k">+</span><span class="pl-c1">0</span><span class="pl-k">*</span>d))<span class="pl-k">+</span><span class="pl-c1">0</span><span class="pl-k">+</span>(E<span class="pl-k">*</span>(<span class="pl-c1">0.25</span><span class="pl-k">*</span>(Z<span class="pl-k">*</span>Z<span class="pl-k">+</span>h<span class="pl-k">*</span>Z<span class="pl-k">+</span>h<span class="pl-k">*</span>h)<span class="pl-k">+</span>(<span class="pl-c1">0</span><span class="pl-k">*</span>Z<span class="pl-k">+</span><span class="pl-c1">0</span><span class="pl-k">*</span>h))<span class="pl-k">+</span><span class="pl-c1">0</span>))}k.mass<span class="pl-k">=</span>z<span class="pl-k">*</span>H;u<span class="pl-k">*=</span><span class="pl-c1">1</span><span class="pl-k">/</span>H;D<span class="pl-k">*=</span><span class="pl-c1">1</span><span class="pl-k">/</span>H;k.center.Set(u,D);k.I<span class="pl-k">=</span>z<span class="pl-k">*</span>O}};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeSubmergedArea</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>,<span class="pl-smi">D</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> H<span class="pl-k">=</span>B.MulTMV(u.R,k),O<span class="pl-k">=</span>z<span class="pl-k">-</span>B.Dot(k,u.position),E<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>,R<span class="pl-k">=</span><span class="pl-c1">0</span>,N<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>);z<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L126" class="blob-num js-line-number" data-line-number="126"></td>
        <td id="LC126" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">parseInt</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-k">var</span> S<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">for</span>(k<span class="pl-k">=</span>k<span class="pl-k">=</span><span class="pl-c1">0</span>;k<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_vertexCount;<span class="pl-k">++</span>k){E[k]<span class="pl-k">=</span>B.Dot(H,<span class="pl-v">this</span>.m_vertices[k])<span class="pl-k">-</span>O;<span class="pl-k">var</span> aa<span class="pl-k">=</span>E[k]<span class="pl-k">&lt;-</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>;<span class="pl-k">if</span>(k<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">if</span>(aa){<span class="pl-k">if</span>(<span class="pl-k">!</span>S){N<span class="pl-k">=</span>k<span class="pl-k">-</span><span class="pl-c1">1</span>;R<span class="pl-k">++</span>}}<span class="pl-k">else</span> <span class="pl-k">if</span>(S){z<span class="pl-k">=</span>k<span class="pl-k">-</span><span class="pl-c1">1</span>;R<span class="pl-k">++</span>}S<span class="pl-k">=</span>aa}<span class="pl-k">switch</span>(R){<span class="pl-k">case</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-k">if</span>(S){k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.ComputeMass(k,<span class="pl-c1">1</span>);D.SetV(B.MulX(u,k.center));<span class="pl-k">return</span> k.mass}<span class="pl-k">else</span> <span class="pl-k">return</span> <span class="pl-c1">0</span>;<span class="pl-k">case</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">if</span>(N<span class="pl-k">==-</span><span class="pl-c1">1</span>)N<span class="pl-k">=</span><span class="pl-v">this</span>.m_vertexCount<span class="pl-k">-</span><span class="pl-c1">1</span>;<span class="pl-k">else</span> z<span class="pl-k">=</span><span class="pl-v">this</span>.m_vertexCount<span class="pl-k">-</span><span class="pl-c1">1</span>}k<span class="pl-k">=</span><span class="pl-c1">parseInt</span>((N<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-v">this</span>.m_vertexCount);H<span class="pl-k">=</span><span class="pl-c1">parseInt</span>((z<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-v">this</span>.m_vertexCount);O<span class="pl-k">=</span>(<span class="pl-c1">0</span><span class="pl-k">-</span>E[N])<span class="pl-k">/</span>(E[k]<span class="pl-k">-</span>E[N]);E<span class="pl-k">=</span>(<span class="pl-c1">0</span><span class="pl-k">-</span>E[z])<span class="pl-k">/</span>(E[H]<span class="pl-k">-</span>E[z]);N<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>(<span class="pl-v">this</span>.m_vertices[N].<span class="pl-c1">x</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L127" class="blob-num js-line-number" data-line-number="127"></td>
        <td id="LC127" class="blob-code blob-code-inner js-file-line">(<span class="pl-c1">1</span><span class="pl-k">-</span>O)<span class="pl-k">+</span><span class="pl-v">this</span>.m_vertices[k].<span class="pl-c1">x</span><span class="pl-k">*</span>O,<span class="pl-v">this</span>.m_vertices[N].<span class="pl-c1">y</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>O)<span class="pl-k">+</span><span class="pl-v">this</span>.m_vertices[k].<span class="pl-c1">y</span><span class="pl-k">*</span>O);z<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>(<span class="pl-v">this</span>.m_vertices[z].<span class="pl-c1">x</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>E)<span class="pl-k">+</span><span class="pl-v">this</span>.m_vertices[H].<span class="pl-c1">x</span><span class="pl-k">*</span>E,<span class="pl-v">this</span>.m_vertices[z].<span class="pl-c1">y</span><span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>E)<span class="pl-k">+</span><span class="pl-v">this</span>.m_vertices[H].<span class="pl-c1">y</span><span class="pl-k">*</span>E);E<span class="pl-k">=</span><span class="pl-c1">0</span>;O<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;R<span class="pl-k">=</span><span class="pl-v">this</span>.m_vertices[k];<span class="pl-k">for</span>(k<span class="pl-k">=</span>k;k<span class="pl-k">!=</span>H;){k<span class="pl-k">=</span>(k<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">%</span><span class="pl-v">this</span>.m_vertexCount;S<span class="pl-k">=</span>k<span class="pl-k">==</span>H<span class="pl-k">?</span>z<span class="pl-k">:</span><span class="pl-v">this</span>.m_vertices[k];aa<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>((R.<span class="pl-c1">x</span><span class="pl-k">-</span>N.<span class="pl-c1">x</span>)<span class="pl-k">*</span>(S.<span class="pl-c1">y</span><span class="pl-k">-</span>N.<span class="pl-c1">y</span>)<span class="pl-k">-</span>(R.<span class="pl-c1">y</span><span class="pl-k">-</span>N.<span class="pl-c1">y</span>)<span class="pl-k">*</span>(S.<span class="pl-c1">x</span><span class="pl-k">-</span>N.<span class="pl-c1">x</span>));E<span class="pl-k">+=</span>aa;O.<span class="pl-c1">x</span><span class="pl-k">+=</span>aa<span class="pl-k">*</span>(N.<span class="pl-c1">x</span><span class="pl-k">+</span>R.<span class="pl-c1">x</span><span class="pl-k">+</span>S.<span class="pl-c1">x</span>)<span class="pl-k">/</span><span class="pl-c1">3</span>;O.<span class="pl-c1">y</span><span class="pl-k">+=</span>aa<span class="pl-k">*</span>(N.<span class="pl-c1">y</span><span class="pl-k">+</span>R.<span class="pl-c1">y</span><span class="pl-k">+</span>S.<span class="pl-c1">y</span>)<span class="pl-k">/</span><span class="pl-c1">3</span>;R<span class="pl-k">=</span>S}O.Multiply(<span class="pl-c1">1</span><span class="pl-k">/</span>E);D.SetV(B.MulX(u,O));<span class="pl-k">return</span> E};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetVertexCount</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_vertexCount};</td>
      </tr>
      <tr>
        <td id="L128" class="blob-num js-line-number" data-line-number="128"></td>
        <td id="LC128" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetVertices</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_vertices};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNormals</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_normals};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetSupport</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> z<span class="pl-k">=</span><span class="pl-c1">0</span>,u<span class="pl-k">=</span><span class="pl-v">this</span>.m_vertices[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">*</span>k.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_vertices[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">*</span>k.<span class="pl-c1">y</span>,D<span class="pl-k">=</span><span class="pl-c1">1</span>;D<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_vertexCount;<span class="pl-k">++</span>D){<span class="pl-k">var</span> H<span class="pl-k">=</span><span class="pl-v">this</span>.m_vertices[D].<span class="pl-c1">x</span><span class="pl-k">*</span>k.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_vertices[D].<span class="pl-c1">y</span><span class="pl-k">*</span>k.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(H<span class="pl-k">&gt;</span>u){z<span class="pl-k">=</span>D;u<span class="pl-k">=</span>H}}<span class="pl-k">return</span> z};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetSupportVertex</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> z<span class="pl-k">=</span><span class="pl-c1">0</span>,u<span class="pl-k">=</span><span class="pl-v">this</span>.m_vertices[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">*</span>k.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_vertices[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">*</span>k.<span class="pl-c1">y</span>,D<span class="pl-k">=</span><span class="pl-c1">1</span>;D<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_vertexCount;<span class="pl-k">++</span>D){<span class="pl-k">var</span> H<span class="pl-k">=</span><span class="pl-v">this</span>.m_vertices[D].<span class="pl-c1">x</span><span class="pl-k">*</span>k.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_vertices[D].<span class="pl-c1">y</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L129" class="blob-num js-line-number" data-line-number="129"></td>
        <td id="LC129" class="blob-code blob-code-inner js-file-line">k.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(H<span class="pl-k">&gt;</span>u){z<span class="pl-k">=</span>D;u<span class="pl-k">=</span>H}}<span class="pl-k">return</span> <span class="pl-v">this</span>.m_vertices[z]};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Validate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2PolygonShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.__super.b2Shape.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.m_type<span class="pl-k">=</span>U.e_polygonShape;<span class="pl-v">this</span>.m_centroid<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-v">this</span>.m_vertices<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>;<span class="pl-v">this</span>.m_normals<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reserve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-k">if</span>(k<span class="pl-k">===</span><span class="pl-c1">undefined</span>)k<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> z<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-v">this</span>.m_vertices.<span class="pl-c1">length</span>);z<span class="pl-k">&lt;</span>k;z<span class="pl-k">++</span>){<span class="pl-v">this</span>.m_vertices[z]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>;<span class="pl-v">this</span>.m_normals[z]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>}};<span class="pl-c1">A</span>.<span class="pl-en">ComputeCentroid</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>){<span class="pl-k">if</span>(z<span class="pl-k">===</span><span class="pl-c1">undefined</span>)z<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>,D<span class="pl-k">=</span><span class="pl-c1">0</span>,H<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L130" class="blob-num js-line-number" data-line-number="130"></td>
        <td id="LC130" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">3</span>,O<span class="pl-k">=</span><span class="pl-c1">0</span>;O<span class="pl-k">&lt;</span>z;<span class="pl-k">++</span>O){<span class="pl-k">var</span> E<span class="pl-k">=</span>k[O],R<span class="pl-k">=</span>O<span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">&lt;</span>z<span class="pl-k">?</span>k[<span class="pl-c1">parseInt</span>(O<span class="pl-k">+</span><span class="pl-c1">1</span>)]<span class="pl-k">:</span>k[<span class="pl-c1">0</span>],N<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>((E.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">0</span>)<span class="pl-k">*</span>(R.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">0</span>)<span class="pl-k">-</span>(E.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-c1">0</span>)<span class="pl-k">*</span>(R.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-c1">0</span>));D<span class="pl-k">+=</span>N;u.<span class="pl-c1">x</span><span class="pl-k">+=</span>N<span class="pl-k">*</span>H<span class="pl-k">*</span>(<span class="pl-c1">0</span><span class="pl-k">+</span>E.<span class="pl-c1">x</span><span class="pl-k">+</span>R.<span class="pl-c1">x</span>);u.<span class="pl-c1">y</span><span class="pl-k">+=</span>N<span class="pl-k">*</span>H<span class="pl-k">*</span>(<span class="pl-c1">0</span><span class="pl-k">+</span>E.<span class="pl-c1">y</span><span class="pl-k">+</span>R.<span class="pl-c1">y</span>)}u.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-c1">1</span><span class="pl-k">/</span>D;u.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-c1">1</span><span class="pl-k">/</span>D;<span class="pl-k">return</span> u};<span class="pl-c1">A</span>.<span class="pl-en">ComputeOBB</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>){<span class="pl-k">if</span>(u<span class="pl-k">===</span><span class="pl-c1">undefined</span>)u<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> D<span class="pl-k">=</span><span class="pl-c1">0</span>,H<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(u<span class="pl-k">+</span><span class="pl-c1">1</span>);<span class="pl-k">for</span>(D<span class="pl-k">=</span><span class="pl-c1">0</span>;D<span class="pl-k">&lt;</span>u;<span class="pl-k">++</span>D)H[D]<span class="pl-k">=</span>z[D];H[u]<span class="pl-k">=</span>H[<span class="pl-c1">0</span>];z<span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>;<span class="pl-k">for</span>(D<span class="pl-k">=</span><span class="pl-c1">1</span>;D<span class="pl-k">&lt;=</span>u;<span class="pl-k">++</span>D){<span class="pl-k">var</span> O<span class="pl-k">=</span>H[<span class="pl-c1">parseInt</span>(D<span class="pl-k">-</span><span class="pl-c1">1</span>)],E<span class="pl-k">=</span>H[D].<span class="pl-c1">x</span><span class="pl-k">-</span>O.<span class="pl-c1">x</span>,R<span class="pl-k">=</span>H[D].<span class="pl-c1">y</span><span class="pl-k">-</span>O.<span class="pl-c1">y</span>,N<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(E<span class="pl-k">*</span>E<span class="pl-k">+</span>R<span class="pl-k">*</span>R);E<span class="pl-k">/=</span>N;R<span class="pl-k">/=</span>N;<span class="pl-k">for</span>(<span class="pl-k">var</span> S<span class="pl-k">=-</span>R,aa<span class="pl-k">=</span>E,Z<span class="pl-k">=</span>N<span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>,d<span class="pl-k">=-</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>,h<span class="pl-k">=-</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>,l<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">&lt;</span>u;<span class="pl-k">++</span>l){<span class="pl-k">var</span> j<span class="pl-k">=</span>H[l].<span class="pl-c1">x</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L131" class="blob-num js-line-number" data-line-number="131"></td>
        <td id="LC131" class="blob-code blob-code-inner js-file-line">O.<span class="pl-c1">x</span>,o<span class="pl-k">=</span>H[l].<span class="pl-c1">y</span><span class="pl-k">-</span>O.<span class="pl-c1">y</span>,q<span class="pl-k">=</span>E<span class="pl-k">*</span>j<span class="pl-k">+</span>R<span class="pl-k">*</span>o;j<span class="pl-k">=</span>S<span class="pl-k">*</span>j<span class="pl-k">+</span>aa<span class="pl-k">*</span>o;<span class="pl-k">if</span>(q<span class="pl-k">&lt;</span>N)N<span class="pl-k">=</span>q;<span class="pl-k">if</span>(j<span class="pl-k">&lt;</span>Z)Z<span class="pl-k">=</span>j;<span class="pl-k">if</span>(q<span class="pl-k">&gt;</span>d)d<span class="pl-k">=</span>q;<span class="pl-k">if</span>(j<span class="pl-k">&gt;</span>h)h<span class="pl-k">=</span>j}l<span class="pl-k">=</span>(d<span class="pl-k">-</span>N)<span class="pl-k">*</span>(h<span class="pl-k">-</span>Z);<span class="pl-k">if</span>(l<span class="pl-k">&lt;</span><span class="pl-c1">0.95</span><span class="pl-k">*</span>z){z<span class="pl-k">=</span>l;k.R.col1.<span class="pl-c1">x</span><span class="pl-k">=</span>E;k.R.col1.<span class="pl-c1">y</span><span class="pl-k">=</span>R;k.R.col2.<span class="pl-c1">x</span><span class="pl-k">=</span>S;k.R.col2.<span class="pl-c1">y</span><span class="pl-k">=</span>aa;E<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(N<span class="pl-k">+</span>d);R<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(Z<span class="pl-k">+</span>h);S<span class="pl-k">=</span>k.R;k.center.<span class="pl-c1">x</span><span class="pl-k">=</span>O.<span class="pl-c1">x</span><span class="pl-k">+</span>(S.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>E<span class="pl-k">+</span>S.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>R);k.center.<span class="pl-c1">y</span><span class="pl-k">=</span>O.<span class="pl-c1">y</span><span class="pl-k">+</span>(S.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>E<span class="pl-k">+</span>S.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>R);k.extents.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(d<span class="pl-k">-</span>N);k.extents.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(h<span class="pl-k">-</span>Z)}}};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Collision.Shapes.b2PolygonShape.s_mat<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>});<span class="pl-c1">U</span>.<span class="pl-en">b2Shape</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">null</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>){<span class="pl-v">this</span>.m_radius<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L132" class="blob-num js-line-number" data-line-number="132"></td>
        <td id="LC132" class="blob-code blob-code-inner js-file-line">k.m_radius};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetType</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_type};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">TestPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">false</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeAABB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeMass</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeSubmergedArea</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">0</span>};<span class="pl-c1">U</span>.<span class="pl-en">TestOverlap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">k</span>,<span class="pl-smi">z</span>,<span class="pl-smi">u</span>,<span class="pl-smi">D</span>){<span class="pl-k">var</span> H<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">L</span>;H.proxyA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">W</span>;H.proxyA.Set(k);H.proxyB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">W</span>;H.proxyB.Set(u);H.transformA<span class="pl-k">=</span>z;H.transformB<span class="pl-k">=</span>D;H.useRadii<span class="pl-k">=</span><span class="pl-c1">true</span>;k<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Y</span>;k.count<span class="pl-k">=</span><span class="pl-c1">0</span>;z<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">I</span>;M.Distance(z,k,H);<span class="pl-k">return</span> z.distance<span class="pl-k">&lt;</span><span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>};</td>
      </tr>
      <tr>
        <td id="L133" class="blob-num js-line-number" data-line-number="133"></td>
        <td id="LC133" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Shape</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_type<span class="pl-k">=</span>U.e_unknownShape;<span class="pl-v">this</span>.m_radius<span class="pl-k">=</span>F.b2_linearSlop};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Collision.Shapes.b2Shape.e_unknownShape<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>);Box2D.Collision.Shapes.b2Shape.e_circleShape<span class="pl-k">=</span><span class="pl-c1">0</span>;Box2D.Collision.Shapes.b2Shape.e_polygonShape<span class="pl-k">=</span><span class="pl-c1">1</span>;Box2D.Collision.Shapes.b2Shape.e_edgeShape<span class="pl-k">=</span><span class="pl-c1">2</span>;Box2D.Collision.Shapes.b2Shape.e_shapeTypeCount<span class="pl-k">=</span><span class="pl-c1">3</span>;Box2D.Collision.Shapes.b2Shape.e_hitCollide<span class="pl-k">=</span><span class="pl-c1">1</span>;Box2D.Collision.Shapes.b2Shape.e_missCollide<span class="pl-k">=</span><span class="pl-c1">0</span>;Box2D.Collision.Shapes.b2Shape.e_startsInsideCollide<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L134" class="blob-num js-line-number" data-line-number="134"></td>
        <td id="LC134" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">parseInt</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)})})();</td>
      </tr>
      <tr>
        <td id="L135" class="blob-num js-line-number" data-line-number="135"></td>
        <td id="LC135" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> F<span class="pl-k">=</span>Box2D.Common.b2Color,G<span class="pl-k">=</span>Box2D.Common.b2Settings,K<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Math;<span class="pl-c1">F</span>.<span class="pl-en">b2Color</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>._b<span class="pl-k">=</span><span class="pl-v">this</span>._g<span class="pl-k">=</span><span class="pl-v">this</span>._r<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Color</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>,<span class="pl-smi">w</span>,<span class="pl-smi">A</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span><span class="pl-c1">undefined</span>)y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(w<span class="pl-k">===</span><span class="pl-c1">undefined</span>)w<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(A<span class="pl-k">===</span><span class="pl-c1">undefined</span>)A<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._r<span class="pl-k">=</span>Box2D.parseUInt(<span class="pl-c1">255</span><span class="pl-k">*</span>K.Clamp(y,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>));<span class="pl-v">this</span>._g<span class="pl-k">=</span>Box2D.parseUInt(<span class="pl-c1">255</span><span class="pl-k">*</span>K.Clamp(w,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>));<span class="pl-v">this</span>._b<span class="pl-k">=</span>Box2D.parseUInt(<span class="pl-c1">255</span><span class="pl-k">*</span>K.Clamp(A,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>,<span class="pl-smi">w</span>,<span class="pl-smi">A</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span><span class="pl-c1">undefined</span>)y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(w<span class="pl-k">===</span><span class="pl-c1">undefined</span>)w<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(A<span class="pl-k">===</span><span class="pl-c1">undefined</span>)A<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._r<span class="pl-k">=</span>Box2D.parseUInt(<span class="pl-c1">255</span><span class="pl-k">*</span>K.Clamp(y,</td>
      </tr>
      <tr>
        <td id="L136" class="blob-num js-line-number" data-line-number="136"></td>
        <td id="LC136" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>,<span class="pl-c1">1</span>));<span class="pl-v">this</span>._g<span class="pl-k">=</span>Box2D.parseUInt(<span class="pl-c1">255</span><span class="pl-k">*</span>K.Clamp(w,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>));<span class="pl-v">this</span>._b<span class="pl-k">=</span>Box2D.parseUInt(<span class="pl-c1">255</span><span class="pl-k">*</span>K.Clamp(A,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))};<span class="pl-c1">Object</span>.defineProperty(F.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>r<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span><span class="pl-c1">undefined</span>)y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._r<span class="pl-k">=</span>Box2D.parseUInt(<span class="pl-c1">255</span><span class="pl-k">*</span>K.Clamp(y,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))}});<span class="pl-c1">Object</span>.defineProperty(F.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>g<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span><span class="pl-c1">undefined</span>)y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._g<span class="pl-k">=</span>Box2D.parseUInt(<span class="pl-c1">255</span><span class="pl-k">*</span>K.Clamp(y,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))}});<span class="pl-c1">Object</span>.defineProperty(F.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>b<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">set</span><span class="pl-k">:</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L137" class="blob-num js-line-number" data-line-number="137"></td>
        <td id="LC137" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">undefined</span>)y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>._b<span class="pl-k">=</span>Box2D.parseUInt(<span class="pl-c1">255</span><span class="pl-k">*</span>K.Clamp(y,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))}});<span class="pl-c1">Object</span>.defineProperty(F.<span class="pl-c1">prototype</span>,<span class="pl-s"><span class="pl-pds">&quot;</span>color<span class="pl-pds">&quot;</span></span>,{enumerable<span class="pl-k">:</span><span class="pl-c1">false</span>,configurable<span class="pl-k">:</span><span class="pl-c1">true</span>,<span class="pl-en">get</span><span class="pl-k">:</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>._r<span class="pl-k">&lt;&lt;</span><span class="pl-c1">16</span>|<span class="pl-v">this</span>._g<span class="pl-k">&lt;&lt;</span><span class="pl-c1">8</span>|<span class="pl-v">this</span>._b}});<span class="pl-c1">G</span>.<span class="pl-en">b2Settings</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">G</span>.<span class="pl-en">b2MixFriction</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>,<span class="pl-smi">w</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span><span class="pl-c1">undefined</span>)y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(w<span class="pl-k">===</span><span class="pl-c1">undefined</span>)w<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(y<span class="pl-k">*</span>w)};<span class="pl-c1">G</span>.<span class="pl-en">b2MixRestitution</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>,<span class="pl-smi">w</span>){<span class="pl-k">if</span>(y<span class="pl-k">===</span><span class="pl-c1">undefined</span>)y<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(w<span class="pl-k">===</span><span class="pl-c1">undefined</span>)w<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> y<span class="pl-k">&gt;</span>w<span class="pl-k">?</span>y<span class="pl-k">:</span>w};<span class="pl-c1">G</span>.<span class="pl-en">b2Assert</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">y</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span>y)<span class="pl-k">throw</span><span class="pl-s"><span class="pl-pds">&quot;</span>Assertion Failed<span class="pl-pds">&quot;</span></span>;};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Common.b2Settings.VERSION<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L138" class="blob-num js-line-number" data-line-number="138"></td>
        <td id="LC138" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>2.1alpha<span class="pl-pds">&quot;</span></span>;Box2D.Common.b2Settings.USHRT_MAX<span class="pl-k">=</span><span class="pl-c1">65535</span>;Box2D.Common.b2Settings.b2_pi<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span>;Box2D.Common.b2Settings.b2_maxManifoldPoints<span class="pl-k">=</span><span class="pl-c1">2</span>;Box2D.Common.b2Settings.b2_aabbExtension<span class="pl-k">=</span><span class="pl-c1">0.1</span>;Box2D.Common.b2Settings.b2_aabbMultiplier<span class="pl-k">=</span><span class="pl-c1">2</span>;Box2D.Common.b2Settings.b2_polygonRadius<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span>G.b2_linearSlop;Box2D.Common.b2Settings.b2_linearSlop<span class="pl-k">=</span><span class="pl-c1">0.0050</span>;Box2D.Common.b2Settings.b2_angularSlop<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">180</span><span class="pl-k">*</span>G.b2_pi;Box2D.Common.b2Settings.b2_toiSlop<span class="pl-k">=</span><span class="pl-c1">8</span><span class="pl-k">*</span>G.b2_linearSlop;Box2D.Common.b2Settings.b2_maxTOIContactsPerIsland<span class="pl-k">=</span><span class="pl-c1">32</span>;Box2D.Common.b2Settings.b2_maxTOIJointsPerIsland<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L139" class="blob-num js-line-number" data-line-number="139"></td>
        <td id="LC139" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">32</span>;Box2D.Common.b2Settings.b2_velocityThreshold<span class="pl-k">=</span><span class="pl-c1">1</span>;Box2D.Common.b2Settings.b2_maxLinearCorrection<span class="pl-k">=</span><span class="pl-c1">0.2</span>;Box2D.Common.b2Settings.b2_maxAngularCorrection<span class="pl-k">=</span><span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">180</span><span class="pl-k">*</span>G.b2_pi;Box2D.Common.b2Settings.b2_maxTranslation<span class="pl-k">=</span><span class="pl-c1">2</span>;Box2D.Common.b2Settings.b2_maxTranslationSquared<span class="pl-k">=</span>G.b2_maxTranslation<span class="pl-k">*</span>G.b2_maxTranslation;Box2D.Common.b2Settings.b2_maxRotation<span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>G.b2_pi;Box2D.Common.b2Settings.b2_maxRotationSquared<span class="pl-k">=</span>G.b2_maxRotation<span class="pl-k">*</span>G.b2_maxRotation;Box2D.Common.b2Settings.b2_contactBaumgarte<span class="pl-k">=</span><span class="pl-c1">0.2</span>;Box2D.Common.b2Settings.b2_timeToSleep<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L140" class="blob-num js-line-number" data-line-number="140"></td>
        <td id="LC140" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0.5</span>;Box2D.Common.b2Settings.b2_linearSleepTolerance<span class="pl-k">=</span><span class="pl-c1">0.01</span>;Box2D.Common.b2Settings.b2_angularSleepTolerance<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">180</span><span class="pl-k">*</span>G.b2_pi})})();</td>
      </tr>
      <tr>
        <td id="L141" class="blob-num js-line-number" data-line-number="141"></td>
        <td id="LC141" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> F<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Mat22,G<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Mat33,K<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Math,y<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Sweep,w<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Transform,A<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Vec2,U<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Vec3;<span class="pl-c1">F</span>.<span class="pl-en">b2Mat22</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.col1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-v">this</span>.col2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Mat22</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.SetIdentity()};<span class="pl-c1">F</span>.<span class="pl-en">FromAngle</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> B<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">F</span>;B.Set(p);<span class="pl-k">return</span> B};<span class="pl-c1">F</span>.<span class="pl-en">FromVV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">var</span> Q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">F</span>;Q.SetVV(p,B);<span class="pl-k">return</span> Q};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L142" class="blob-num js-line-number" data-line-number="142"></td>
        <td id="LC142" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> B<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">cos</span>(p);p<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sin</span>(p);<span class="pl-v">this</span>.col1.<span class="pl-c1">x</span><span class="pl-k">=</span>B;<span class="pl-v">this</span>.col2.<span class="pl-c1">x</span><span class="pl-k">=-</span>p;<span class="pl-v">this</span>.col1.<span class="pl-c1">y</span><span class="pl-k">=</span>p;<span class="pl-v">this</span>.col2.<span class="pl-c1">y</span><span class="pl-k">=</span>B};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetVV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-v">this</span>.col1.SetV(p);<span class="pl-v">this</span>.col2.SetV(B)};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">F</span>;p.SetM(<span class="pl-v">this</span>);<span class="pl-k">return</span> p};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-v">this</span>.col1.SetV(p.col1);<span class="pl-v">this</span>.col2.SetV(p.col2)};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-v">this</span>.col1.<span class="pl-c1">x</span><span class="pl-k">+=</span>p.col1.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.col1.<span class="pl-c1">y</span><span class="pl-k">+=</span>p.col1.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.col2.<span class="pl-c1">x</span><span class="pl-k">+=</span>p.col2.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.col2.<span class="pl-c1">y</span><span class="pl-k">+=</span>p.col2.<span class="pl-c1">y</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetIdentity</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.col1.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.col2.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col1.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col2.<span class="pl-c1">y</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L143" class="blob-num js-line-number" data-line-number="143"></td>
        <td id="LC143" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetZero</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.col1.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col2.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col1.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col2.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAngle</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-v">this</span>.col1.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.col1.<span class="pl-c1">x</span>)};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetInverse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">var</span> B<span class="pl-k">=</span><span class="pl-v">this</span>.col1.<span class="pl-c1">x</span>,Q<span class="pl-k">=</span><span class="pl-v">this</span>.col2.<span class="pl-c1">x</span>,V<span class="pl-k">=</span><span class="pl-v">this</span>.col1.<span class="pl-c1">y</span>,M<span class="pl-k">=</span><span class="pl-v">this</span>.col2.<span class="pl-c1">y</span>,L<span class="pl-k">=</span>B<span class="pl-k">*</span>M<span class="pl-k">-</span>Q<span class="pl-k">*</span>V;<span class="pl-k">if</span>(L<span class="pl-k">!=</span><span class="pl-c1">0</span>)L<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>L;p.col1.<span class="pl-c1">x</span><span class="pl-k">=</span>L<span class="pl-k">*</span>M;p.col2.<span class="pl-c1">x</span><span class="pl-k">=-</span>L<span class="pl-k">*</span>Q;p.col1.<span class="pl-c1">y</span><span class="pl-k">=-</span>L<span class="pl-k">*</span>V;p.col2.<span class="pl-c1">y</span><span class="pl-k">=</span>L<span class="pl-k">*</span>B;<span class="pl-k">return</span> p};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Solve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>,<span class="pl-smi">Q</span>){<span class="pl-k">if</span>(B<span class="pl-k">===</span><span class="pl-c1">undefined</span>)B<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(Q<span class="pl-k">===</span><span class="pl-c1">undefined</span>)Q<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> V<span class="pl-k">=</span><span class="pl-v">this</span>.col1.<span class="pl-c1">x</span>,M<span class="pl-k">=</span><span class="pl-v">this</span>.col2.<span class="pl-c1">x</span>,L<span class="pl-k">=</span><span class="pl-v">this</span>.col1.<span class="pl-c1">y</span>,I<span class="pl-k">=</span><span class="pl-v">this</span>.col2.<span class="pl-c1">y</span>,W<span class="pl-k">=</span>V<span class="pl-k">*</span>I<span class="pl-k">-</span>M<span class="pl-k">*</span>L;<span class="pl-k">if</span>(W<span class="pl-k">!=</span></td>
      </tr>
      <tr>
        <td id="L144" class="blob-num js-line-number" data-line-number="144"></td>
        <td id="LC144" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>)W<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>W;p.<span class="pl-c1">x</span><span class="pl-k">=</span>W<span class="pl-k">*</span>(I<span class="pl-k">*</span>B<span class="pl-k">-</span>M<span class="pl-k">*</span>Q);p.<span class="pl-c1">y</span><span class="pl-k">=</span>W<span class="pl-k">*</span>(V<span class="pl-k">*</span>Q<span class="pl-k">-</span>L<span class="pl-k">*</span>B);<span class="pl-k">return</span> p};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Abs</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.col1.Abs();<span class="pl-v">this</span>.col2.Abs()};<span class="pl-c1">G</span>.<span class="pl-en">b2Mat33</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.col1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;<span class="pl-v">this</span>.col2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;<span class="pl-v">this</span>.col3<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Mat33</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>,<span class="pl-smi">Q</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(B<span class="pl-k">===</span><span class="pl-c1">undefined</span>)B<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(Q<span class="pl-k">===</span><span class="pl-c1">undefined</span>)Q<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span>p<span class="pl-k">&amp;&amp;!</span>B<span class="pl-k">&amp;&amp;!</span>Q){<span class="pl-v">this</span>.col1.SetZero();<span class="pl-v">this</span>.col2.SetZero();<span class="pl-v">this</span>.col3.SetZero()}<span class="pl-k">else</span>{<span class="pl-v">this</span>.col1.SetV(p);<span class="pl-v">this</span>.col2.SetV(B);<span class="pl-v">this</span>.col3.SetV(Q)}};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetVVV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>,<span class="pl-smi">Q</span>){<span class="pl-v">this</span>.col1.SetV(p);<span class="pl-v">this</span>.col2.SetV(B);<span class="pl-v">this</span>.col3.SetV(Q)};</td>
      </tr>
      <tr>
        <td id="L145" class="blob-num js-line-number" data-line-number="145"></td>
        <td id="LC145" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">G</span>(<span class="pl-v">this</span>.col1,<span class="pl-v">this</span>.col2,<span class="pl-v">this</span>.col3)};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-v">this</span>.col1.SetV(p.col1);<span class="pl-v">this</span>.col2.SetV(p.col2);<span class="pl-v">this</span>.col3.SetV(p.col3)};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-v">this</span>.col1.<span class="pl-c1">x</span><span class="pl-k">+=</span>p.col1.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.col1.<span class="pl-c1">y</span><span class="pl-k">+=</span>p.col1.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.col1.<span class="pl-c1">z</span><span class="pl-k">+=</span>p.col1.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.col2.<span class="pl-c1">x</span><span class="pl-k">+=</span>p.col2.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.col2.<span class="pl-c1">y</span><span class="pl-k">+=</span>p.col2.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.col2.<span class="pl-c1">z</span><span class="pl-k">+=</span>p.col2.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.col3.<span class="pl-c1">x</span><span class="pl-k">+=</span>p.col3.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.col3.<span class="pl-c1">y</span><span class="pl-k">+=</span>p.col3.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.col3.<span class="pl-c1">z</span><span class="pl-k">+=</span>p.col3.<span class="pl-c1">z</span>};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetIdentity</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.col1.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.col2.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col3.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col1.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col2.<span class="pl-c1">y</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L146" class="blob-num js-line-number" data-line-number="146"></td>
        <td id="LC146" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>;<span class="pl-v">this</span>.col3.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col1.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col2.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col3.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">1</span>};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetZero</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.col1.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col2.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col3.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col1.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col2.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col3.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col1.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col2.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.col3.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Solve22</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>,<span class="pl-smi">Q</span>){<span class="pl-k">if</span>(B<span class="pl-k">===</span><span class="pl-c1">undefined</span>)B<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(Q<span class="pl-k">===</span><span class="pl-c1">undefined</span>)Q<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> V<span class="pl-k">=</span><span class="pl-v">this</span>.col1.<span class="pl-c1">x</span>,M<span class="pl-k">=</span><span class="pl-v">this</span>.col2.<span class="pl-c1">x</span>,L<span class="pl-k">=</span><span class="pl-v">this</span>.col1.<span class="pl-c1">y</span>,I<span class="pl-k">=</span><span class="pl-v">this</span>.col2.<span class="pl-c1">y</span>,W<span class="pl-k">=</span>V<span class="pl-k">*</span>I<span class="pl-k">-</span>M<span class="pl-k">*</span>L;<span class="pl-k">if</span>(W<span class="pl-k">!=</span><span class="pl-c1">0</span>)W<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>W;p.<span class="pl-c1">x</span><span class="pl-k">=</span>W<span class="pl-k">*</span>(I<span class="pl-k">*</span>B<span class="pl-k">-</span>M<span class="pl-k">*</span>Q);p.<span class="pl-c1">y</span><span class="pl-k">=</span>W<span class="pl-k">*</span>(V<span class="pl-k">*</span>Q<span class="pl-k">-</span>L<span class="pl-k">*</span>B);<span class="pl-k">return</span> p};<span class="pl-c1">G</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Solve33</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>,<span class="pl-smi">Q</span>,<span class="pl-smi">V</span>){<span class="pl-k">if</span>(B<span class="pl-k">===</span><span class="pl-c1">undefined</span>)B<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(Q<span class="pl-k">===</span><span class="pl-c1">undefined</span>)Q<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L147" class="blob-num js-line-number" data-line-number="147"></td>
        <td id="LC147" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(V<span class="pl-k">===</span><span class="pl-c1">undefined</span>)V<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> M<span class="pl-k">=</span><span class="pl-v">this</span>.col1.<span class="pl-c1">x</span>,L<span class="pl-k">=</span><span class="pl-v">this</span>.col1.<span class="pl-c1">y</span>,I<span class="pl-k">=</span><span class="pl-v">this</span>.col1.<span class="pl-c1">z</span>,W<span class="pl-k">=</span><span class="pl-v">this</span>.col2.<span class="pl-c1">x</span>,Y<span class="pl-k">=</span><span class="pl-v">this</span>.col2.<span class="pl-c1">y</span>,k<span class="pl-k">=</span><span class="pl-v">this</span>.col2.<span class="pl-c1">z</span>,z<span class="pl-k">=</span><span class="pl-v">this</span>.col3.<span class="pl-c1">x</span>,u<span class="pl-k">=</span><span class="pl-v">this</span>.col3.<span class="pl-c1">y</span>,D<span class="pl-k">=</span><span class="pl-v">this</span>.col3.<span class="pl-c1">z</span>,H<span class="pl-k">=</span>M<span class="pl-k">*</span>(Y<span class="pl-k">*</span>D<span class="pl-k">-</span>k<span class="pl-k">*</span>u)<span class="pl-k">+</span>L<span class="pl-k">*</span>(k<span class="pl-k">*</span>z<span class="pl-k">-</span>W<span class="pl-k">*</span>D)<span class="pl-k">+</span>I<span class="pl-k">*</span>(W<span class="pl-k">*</span>u<span class="pl-k">-</span>Y<span class="pl-k">*</span>z);<span class="pl-k">if</span>(H<span class="pl-k">!=</span><span class="pl-c1">0</span>)H<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>H;p.<span class="pl-c1">x</span><span class="pl-k">=</span>H<span class="pl-k">*</span>(B<span class="pl-k">*</span>(Y<span class="pl-k">*</span>D<span class="pl-k">-</span>k<span class="pl-k">*</span>u)<span class="pl-k">+</span>Q<span class="pl-k">*</span>(k<span class="pl-k">*</span>z<span class="pl-k">-</span>W<span class="pl-k">*</span>D)<span class="pl-k">+</span>V<span class="pl-k">*</span>(W<span class="pl-k">*</span>u<span class="pl-k">-</span>Y<span class="pl-k">*</span>z));p.<span class="pl-c1">y</span><span class="pl-k">=</span>H<span class="pl-k">*</span>(M<span class="pl-k">*</span>(Q<span class="pl-k">*</span>D<span class="pl-k">-</span>V<span class="pl-k">*</span>u)<span class="pl-k">+</span>L<span class="pl-k">*</span>(V<span class="pl-k">*</span>z<span class="pl-k">-</span>B<span class="pl-k">*</span>D)<span class="pl-k">+</span>I<span class="pl-k">*</span>(B<span class="pl-k">*</span>u<span class="pl-k">-</span>Q<span class="pl-k">*</span>z));p.<span class="pl-c1">z</span><span class="pl-k">=</span>H<span class="pl-k">*</span>(M<span class="pl-k">*</span>(Y<span class="pl-k">*</span>V<span class="pl-k">-</span>k<span class="pl-k">*</span>Q)<span class="pl-k">+</span>L<span class="pl-k">*</span>(k<span class="pl-k">*</span>B<span class="pl-k">-</span>W<span class="pl-k">*</span>V)<span class="pl-k">+</span>I<span class="pl-k">*</span>(W<span class="pl-k">*</span>Q<span class="pl-k">-</span>Y<span class="pl-k">*</span>B));<span class="pl-k">return</span> p};<span class="pl-c1">K</span>.<span class="pl-en">b2Math</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">K</span>.<span class="pl-en">IsValid</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-c1">isFinite</span>(p)};<span class="pl-c1">K</span>.<span class="pl-en">Dot</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">return</span> p.<span class="pl-c1">x</span><span class="pl-k">*</span>B.<span class="pl-c1">x</span><span class="pl-k">+</span>p.<span class="pl-c1">y</span><span class="pl-k">*</span>B.<span class="pl-c1">y</span>};<span class="pl-c1">K</span>.<span class="pl-en">CrossVV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">return</span> p.<span class="pl-c1">x</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L148" class="blob-num js-line-number" data-line-number="148"></td>
        <td id="LC148" class="blob-code blob-code-inner js-file-line">B.<span class="pl-c1">y</span><span class="pl-k">-</span>p.<span class="pl-c1">y</span><span class="pl-k">*</span>B.<span class="pl-c1">x</span>};<span class="pl-c1">K</span>.<span class="pl-en">CrossVF</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">if</span>(B<span class="pl-k">===</span><span class="pl-c1">undefined</span>)B<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(B<span class="pl-k">*</span>p.<span class="pl-c1">y</span>,<span class="pl-k">-</span>B<span class="pl-k">*</span>p.<span class="pl-c1">x</span>)};<span class="pl-c1">K</span>.<span class="pl-en">CrossFV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-k">-</span>p<span class="pl-k">*</span>B.<span class="pl-c1">y</span>,p<span class="pl-k">*</span>B.<span class="pl-c1">x</span>)};<span class="pl-c1">K</span>.<span class="pl-en">MulMV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(p.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>B.<span class="pl-c1">x</span><span class="pl-k">+</span>p.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>B.<span class="pl-c1">y</span>,p.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>B.<span class="pl-c1">x</span><span class="pl-k">+</span>p.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>B.<span class="pl-c1">y</span>)};<span class="pl-c1">K</span>.<span class="pl-en">MulTMV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(K.Dot(B,p.col1),K.Dot(B,p.col2))};<span class="pl-c1">K</span>.<span class="pl-en">MulX</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">var</span> Q<span class="pl-k">=</span>K.MulMV(p.R,B);Q.<span class="pl-c1">x</span><span class="pl-k">+=</span>p.position.<span class="pl-c1">x</span>;Q.<span class="pl-c1">y</span><span class="pl-k">+=</span>p.position.<span class="pl-c1">y</span>;<span class="pl-k">return</span> Q};<span class="pl-c1">K</span>.<span class="pl-en">MulXT</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">var</span> Q<span class="pl-k">=</span>K.SubtractVV(B,p.position),V<span class="pl-k">=</span>Q.<span class="pl-c1">x</span><span class="pl-k">*</span>p.R.col1.<span class="pl-c1">x</span><span class="pl-k">+</span>Q.<span class="pl-c1">y</span><span class="pl-k">*</span>p.R.col1.<span class="pl-c1">y</span>;Q.<span class="pl-c1">y</span><span class="pl-k">=</span>Q.<span class="pl-c1">x</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L149" class="blob-num js-line-number" data-line-number="149"></td>
        <td id="LC149" class="blob-code blob-code-inner js-file-line">p.R.col2.<span class="pl-c1">x</span><span class="pl-k">+</span>Q.<span class="pl-c1">y</span><span class="pl-k">*</span>p.R.col2.<span class="pl-c1">y</span>;Q.<span class="pl-c1">x</span><span class="pl-k">=</span>V;<span class="pl-k">return</span> Q};<span class="pl-c1">K</span>.<span class="pl-en">AddVV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(p.<span class="pl-c1">x</span><span class="pl-k">+</span>B.<span class="pl-c1">x</span>,p.<span class="pl-c1">y</span><span class="pl-k">+</span>B.<span class="pl-c1">y</span>)};<span class="pl-c1">K</span>.<span class="pl-en">SubtractVV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(p.<span class="pl-c1">x</span><span class="pl-k">-</span>B.<span class="pl-c1">x</span>,p.<span class="pl-c1">y</span><span class="pl-k">-</span>B.<span class="pl-c1">y</span>)};<span class="pl-c1">K</span>.<span class="pl-en">Distance</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">var</span> Q<span class="pl-k">=</span>p.<span class="pl-c1">x</span><span class="pl-k">-</span>B.<span class="pl-c1">x</span>,V<span class="pl-k">=</span>p.<span class="pl-c1">y</span><span class="pl-k">-</span>B.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(Q<span class="pl-k">*</span>Q<span class="pl-k">+</span>V<span class="pl-k">*</span>V)};<span class="pl-c1">K</span>.<span class="pl-en">DistanceSquared</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">var</span> Q<span class="pl-k">=</span>p.<span class="pl-c1">x</span><span class="pl-k">-</span>B.<span class="pl-c1">x</span>,V<span class="pl-k">=</span>p.<span class="pl-c1">y</span><span class="pl-k">-</span>B.<span class="pl-c1">y</span>;<span class="pl-k">return</span> Q<span class="pl-k">*</span>Q<span class="pl-k">+</span>V<span class="pl-k">*</span>V};<span class="pl-c1">K</span>.<span class="pl-en">MulFV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(p<span class="pl-k">*</span>B.<span class="pl-c1">x</span>,p<span class="pl-k">*</span>B.<span class="pl-c1">y</span>)};<span class="pl-c1">K</span>.<span class="pl-en">AddMM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">return</span> F.FromVV(K.AddVV(p.col1,B.col1),K.AddVV(p.col2,B.col2))};<span class="pl-c1">K</span>.<span class="pl-en">MulMM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">return</span> F.FromVV(K.MulMV(p,</td>
      </tr>
      <tr>
        <td id="L150" class="blob-num js-line-number" data-line-number="150"></td>
        <td id="LC150" class="blob-code blob-code-inner js-file-line">B.col1),K.MulMV(p,B.col2))};<span class="pl-c1">K</span>.<span class="pl-en">MulTMM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">var</span> Q<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>(K.Dot(p.col1,B.col1),K.Dot(p.col2,B.col1)),V<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>(K.Dot(p.col1,B.col2),K.Dot(p.col2,B.col2));<span class="pl-k">return</span> F.FromVV(Q,V)};<span class="pl-c1">K</span>.<span class="pl-en">Abs</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> p<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>p<span class="pl-k">:-</span>p};<span class="pl-c1">K</span>.<span class="pl-en">AbsV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(K.Abs(p.<span class="pl-c1">x</span>),K.Abs(p.<span class="pl-c1">y</span>))};<span class="pl-c1">K</span>.<span class="pl-en">AbsM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">return</span> F.FromVV(K.AbsV(p.col1),K.AbsV(p.col2))};<span class="pl-c1">K</span>.<span class="pl-en">Min</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(B<span class="pl-k">===</span><span class="pl-c1">undefined</span>)B<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> p<span class="pl-k">&lt;</span>B<span class="pl-k">?</span>p<span class="pl-k">:</span>B};<span class="pl-c1">K</span>.<span class="pl-en">MinV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(K.Min(p.<span class="pl-c1">x</span>,B.<span class="pl-c1">x</span>),K.Min(p.<span class="pl-c1">y</span>,B.<span class="pl-c1">y</span>))};</td>
      </tr>
      <tr>
        <td id="L151" class="blob-num js-line-number" data-line-number="151"></td>
        <td id="LC151" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">K</span>.<span class="pl-en">Max</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(B<span class="pl-k">===</span><span class="pl-c1">undefined</span>)B<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> p<span class="pl-k">&gt;</span>B<span class="pl-k">?</span>p<span class="pl-k">:</span>B};<span class="pl-c1">K</span>.<span class="pl-en">MaxV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(K.Max(p.<span class="pl-c1">x</span>,B.<span class="pl-c1">x</span>),K.Max(p.<span class="pl-c1">y</span>,B.<span class="pl-c1">y</span>))};<span class="pl-c1">K</span>.<span class="pl-en">Clamp</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>,<span class="pl-smi">Q</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(B<span class="pl-k">===</span><span class="pl-c1">undefined</span>)B<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(Q<span class="pl-k">===</span><span class="pl-c1">undefined</span>)Q<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> p<span class="pl-k">&lt;</span>B<span class="pl-k">?</span>B<span class="pl-k">:</span>p<span class="pl-k">&gt;</span>Q<span class="pl-k">?</span>Q<span class="pl-k">:</span>p};<span class="pl-c1">K</span>.<span class="pl-en">ClampV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>,<span class="pl-smi">Q</span>){<span class="pl-k">return</span> K.MaxV(B,K.MinV(p,Q))};<span class="pl-c1">K</span>.<span class="pl-en">Swap</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">var</span> Q<span class="pl-k">=</span>p[<span class="pl-c1">0</span>];p[<span class="pl-c1">0</span>]<span class="pl-k">=</span>B[<span class="pl-c1">0</span>];B[<span class="pl-c1">0</span>]<span class="pl-k">=</span>Q};<span class="pl-c1">K</span>.<span class="pl-en">Random</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()<span class="pl-k">*</span><span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">1</span>};<span class="pl-c1">K</span>.<span class="pl-en">RandomRange</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(B<span class="pl-k">===</span><span class="pl-c1">undefined</span>)B<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> Q<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">random</span>();<span class="pl-k">return</span> Q<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L152" class="blob-num js-line-number" data-line-number="152"></td>
        <td id="LC152" class="blob-code blob-code-inner js-file-line">(B<span class="pl-k">-</span>p)<span class="pl-k">*</span>Q<span class="pl-k">+</span>p};<span class="pl-c1">K</span>.<span class="pl-en">NextPowerOfTwo</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;p|<span class="pl-k">=</span>p<span class="pl-k">&gt;&gt;</span><span class="pl-c1">1</span><span class="pl-k">&amp;</span><span class="pl-c1">2147483647</span>;p|<span class="pl-k">=</span>p<span class="pl-k">&gt;&gt;</span><span class="pl-c1">2</span><span class="pl-k">&amp;</span><span class="pl-c1">1073741823</span>;p|<span class="pl-k">=</span>p<span class="pl-k">&gt;&gt;</span><span class="pl-c1">4</span><span class="pl-k">&amp;</span><span class="pl-c1">268435455</span>;p|<span class="pl-k">=</span>p<span class="pl-k">&gt;&gt;</span><span class="pl-c1">8</span><span class="pl-k">&amp;</span><span class="pl-c1">16777215</span>;p|<span class="pl-k">=</span>p<span class="pl-k">&gt;&gt;</span><span class="pl-c1">16</span><span class="pl-k">&amp;</span><span class="pl-c1">65535</span>;<span class="pl-k">return</span> p<span class="pl-k">+</span><span class="pl-c1">1</span>};<span class="pl-c1">K</span>.<span class="pl-en">IsPowerOfTwo</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> p<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(p<span class="pl-k">&amp;</span>p<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">==</span><span class="pl-c1">0</span>};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Common.<span class="pl-c1">Math</span>.b2Math.b2Vec2_zero<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);Box2D.Common.<span class="pl-c1">Math</span>.b2Math.b2Mat22_identity<span class="pl-k">=</span>F.FromVV(<span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),<span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>));Box2D.Common.<span class="pl-c1">Math</span>.b2Math.b2Transform_identity<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>(K.b2Vec2_zero,K.b2Mat22_identity)});<span class="pl-c1">y</span>.<span class="pl-en">b2Sweep</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.localCenter<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L153" class="blob-num js-line-number" data-line-number="153"></td>
        <td id="LC153" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-v">this</span>.c0<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-v">this</span>.c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-v">this</span>.localCenter.SetV(p.localCenter);<span class="pl-v">this</span>.c0.SetV(p.c0);<span class="pl-v">this</span>.c.SetV(p.c);<span class="pl-v">this</span>.a0<span class="pl-k">=</span>p.a0;<span class="pl-v">this</span>.a<span class="pl-k">=</span>p.a;<span class="pl-v">this</span>.t0<span class="pl-k">=</span>p.t0};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>;p.localCenter.SetV(<span class="pl-v">this</span>.localCenter);p.c0.SetV(<span class="pl-v">this</span>.c0);p.c.SetV(<span class="pl-v">this</span>.c);p.a0<span class="pl-k">=</span><span class="pl-v">this</span>.a0;p.a<span class="pl-k">=</span><span class="pl-v">this</span>.a;p.t0<span class="pl-k">=</span><span class="pl-v">this</span>.t0;<span class="pl-k">return</span> p};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetTransform</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">if</span>(B<span class="pl-k">===</span><span class="pl-c1">undefined</span>)B<span class="pl-k">=</span><span class="pl-c1">0</span>;p.position.<span class="pl-c1">x</span><span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>B)<span class="pl-k">*</span><span class="pl-v">this</span>.c0.<span class="pl-c1">x</span><span class="pl-k">+</span>B<span class="pl-k">*</span><span class="pl-v">this</span>.c.<span class="pl-c1">x</span>;p.position.<span class="pl-c1">y</span><span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>B)<span class="pl-k">*</span><span class="pl-v">this</span>.c0.<span class="pl-c1">y</span><span class="pl-k">+</span>B<span class="pl-k">*</span><span class="pl-v">this</span>.c.<span class="pl-c1">y</span>;p.R.Set((<span class="pl-c1">1</span><span class="pl-k">-</span>B)<span class="pl-k">*</span><span class="pl-v">this</span>.a0<span class="pl-k">+</span>B<span class="pl-k">*</span><span class="pl-v">this</span>.a);</td>
      </tr>
      <tr>
        <td id="L154" class="blob-num js-line-number" data-line-number="154"></td>
        <td id="LC154" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> Q<span class="pl-k">=</span>p.R;p.position.<span class="pl-c1">x</span><span class="pl-k">-=</span>Q.col1.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.localCenter.<span class="pl-c1">x</span><span class="pl-k">+</span>Q.col2.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.localCenter.<span class="pl-c1">y</span>;p.position.<span class="pl-c1">y</span><span class="pl-k">-=</span>Q.col1.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.localCenter.<span class="pl-c1">x</span><span class="pl-k">+</span>Q.col2.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.localCenter.<span class="pl-c1">y</span>};<span class="pl-c1">y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Advance</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.t0<span class="pl-k">&lt;</span>p<span class="pl-k">&amp;&amp;</span><span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-v">this</span>.t0<span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>){<span class="pl-k">var</span> B<span class="pl-k">=</span>(p<span class="pl-k">-</span><span class="pl-v">this</span>.t0)<span class="pl-k">/</span>(<span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-v">this</span>.t0);<span class="pl-v">this</span>.c0.<span class="pl-c1">x</span><span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>B)<span class="pl-k">*</span><span class="pl-v">this</span>.c0.<span class="pl-c1">x</span><span class="pl-k">+</span>B<span class="pl-k">*</span><span class="pl-v">this</span>.c.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.c0.<span class="pl-c1">y</span><span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>B)<span class="pl-k">*</span><span class="pl-v">this</span>.c0.<span class="pl-c1">y</span><span class="pl-k">+</span>B<span class="pl-k">*</span><span class="pl-v">this</span>.c.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.a0<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>B)<span class="pl-k">*</span><span class="pl-v">this</span>.a0<span class="pl-k">+</span>B<span class="pl-k">*</span><span class="pl-v">this</span>.a;<span class="pl-v">this</span>.t0<span class="pl-k">=</span>p}};<span class="pl-c1">w</span>.<span class="pl-en">b2Transform</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.position<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-v">this</span>.R<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">F</span>};<span class="pl-c1">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Transform</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L155" class="blob-num js-line-number" data-line-number="155"></td>
        <td id="LC155" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">null</span>;<span class="pl-k">if</span>(B<span class="pl-k">===</span><span class="pl-c1">undefined</span>)B<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(p){<span class="pl-v">this</span>.position.SetV(p);<span class="pl-v">this</span>.R.SetM(B)}};<span class="pl-c1">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-v">this</span>.position.SetV(p);<span class="pl-v">this</span>.R.SetM(B)};<span class="pl-c1">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetIdentity</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.position.SetZero();<span class="pl-v">this</span>.R.SetIdentity()};<span class="pl-c1">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-v">this</span>.position.SetV(p.position);<span class="pl-v">this</span>.R.SetM(p.R)};<span class="pl-c1">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAngle</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(<span class="pl-v">this</span>.R.col1.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.R.col1.<span class="pl-c1">x</span>)};<span class="pl-c1">A</span>.<span class="pl-en">b2Vec2</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Vec2</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(B<span class="pl-k">===</span><span class="pl-c1">undefined</span>)B<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>p;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>B};</td>
      </tr>
      <tr>
        <td id="L156" class="blob-num js-line-number" data-line-number="156"></td>
        <td id="LC156" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetZero</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(B<span class="pl-k">===</span><span class="pl-c1">undefined</span>)B<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>p;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>B};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>p.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>p.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNegative</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>,<span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">NegativeSelf</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=-</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=-</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-en">Make</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(B<span class="pl-k">===</span><span class="pl-c1">undefined</span>)B<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(p,B)};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">A</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>p.<span class="pl-c1">x</span>;</td>
      </tr>
      <tr>
        <td id="L157" class="blob-num js-line-number" data-line-number="157"></td>
        <td id="LC157" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>p.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Subtract</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>p.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>p.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Multiply</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>p;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>p};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">MulM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">var</span> B<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>p.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>B<span class="pl-k">+</span>p.col2.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>p.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>B<span class="pl-k">+</span>p.col2.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">MulTM</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">var</span> B<span class="pl-k">=</span>K.Dot(<span class="pl-v">this</span>,p.col1);<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>K.Dot(<span class="pl-v">this</span>,p.col2);<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>B};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CrossVF</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> B<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>p<span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=-</span>p<span class="pl-k">*</span>B};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CrossFV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> B<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L158" class="blob-num js-line-number" data-line-number="158"></td>
        <td id="LC158" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=-</span>p<span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>p<span class="pl-k">*</span>B};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">MinV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span>p.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">:</span>p.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span>p.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">:</span>p.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">MaxV</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&gt;</span>p.<span class="pl-c1">x</span><span class="pl-k">?</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">:</span>p.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">&gt;</span>p.<span class="pl-c1">y</span><span class="pl-k">?</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">:</span>p.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Abs</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">&lt;</span><span class="pl-c1">0</span>)<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=-</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">&lt;</span><span class="pl-c1">0</span>)<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=-</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Length</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">LengthSquared</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Normalize</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> p<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L159" class="blob-num js-line-number" data-line-number="159"></td>
        <td id="LC159" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>);<span class="pl-k">if</span>(p<span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)<span class="pl-k">return</span> <span class="pl-c1">0</span>;<span class="pl-k">var</span> B<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>p;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>B;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>B;<span class="pl-k">return</span> p};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsValid</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> K.IsValid(<span class="pl-v">this</span>.<span class="pl-c1">x</span>)<span class="pl-k">&amp;&amp;</span>K.IsValid(<span class="pl-v">this</span>.<span class="pl-c1">y</span>)};<span class="pl-c1">U</span>.<span class="pl-en">b2Vec3</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Vec3</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>,<span class="pl-smi">Q</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(B<span class="pl-k">===</span><span class="pl-c1">undefined</span>)B<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(Q<span class="pl-k">===</span><span class="pl-c1">undefined</span>)Q<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>p;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>B;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>Q};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetZero</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>,<span class="pl-smi">B</span>,<span class="pl-smi">Q</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(B<span class="pl-k">===</span><span class="pl-c1">undefined</span>)B<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(Q<span class="pl-k">===</span><span class="pl-c1">undefined</span>)Q<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>p;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>B;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>Q};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetV</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L160" class="blob-num js-line-number" data-line-number="160"></td>
        <td id="LC160" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=</span>p.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=</span>p.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=</span>p.<span class="pl-c1">z</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNegative</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">U</span>(<span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>,<span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>,<span class="pl-k">-</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>)};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">NegativeSelf</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">=-</span><span class="pl-v">this</span>.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">=-</span><span class="pl-v">this</span>.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">=-</span><span class="pl-v">this</span>.<span class="pl-c1">z</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">U</span>(<span class="pl-v">this</span>.<span class="pl-c1">x</span>,<span class="pl-v">this</span>.<span class="pl-c1">y</span>,<span class="pl-v">this</span>.<span class="pl-c1">z</span>)};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Add</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">+=</span>p.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">+=</span>p.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">+=</span>p.<span class="pl-c1">z</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Subtract</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">-=</span>p.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">-=</span>p.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">-=</span>p.<span class="pl-c1">z</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Multiply</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">p</span>){<span class="pl-k">if</span>(p<span class="pl-k">===</span><span class="pl-c1">undefined</span>)p<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.<span class="pl-c1">x</span><span class="pl-k">*=</span>p;<span class="pl-v">this</span>.<span class="pl-c1">y</span><span class="pl-k">*=</span>p;<span class="pl-v">this</span>.<span class="pl-c1">z</span><span class="pl-k">*=</span>p}})();</td>
      </tr>
      <tr>
        <td id="L161" class="blob-num js-line-number" data-line-number="161"></td>
        <td id="LC161" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> F<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Math,G<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Sweep,K<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Transform,y<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Vec2,w<span class="pl-k">=</span>Box2D.Common.b2Color,A<span class="pl-k">=</span>Box2D.Common.b2Settings,U<span class="pl-k">=</span>Box2D.Collision.b2AABB,p<span class="pl-k">=</span>Box2D.Collision.b2ContactPoint,B<span class="pl-k">=</span>Box2D.Collision.b2DynamicTreeBroadPhase,Q<span class="pl-k">=</span>Box2D.Collision.b2RayCastInput,V<span class="pl-k">=</span>Box2D.Collision.b2RayCastOutput,M<span class="pl-k">=</span>Box2D.Collision.Shapes.b2CircleShape,L<span class="pl-k">=</span>Box2D.Collision.Shapes.b2EdgeShape,I<span class="pl-k">=</span>Box2D.Collision.Shapes.b2MassData,W<span class="pl-k">=</span>Box2D.Collision.Shapes.b2PolygonShape,Y<span class="pl-k">=</span>Box2D.Collision.Shapes.b2Shape,</td>
      </tr>
      <tr>
        <td id="L162" class="blob-num js-line-number" data-line-number="162"></td>
        <td id="LC162" class="blob-code blob-code-inner js-file-line">k<span class="pl-k">=</span>Box2D.Dynamics.b2Body,z<span class="pl-k">=</span>Box2D.Dynamics.b2BodyDef,u<span class="pl-k">=</span>Box2D.Dynamics.b2ContactFilter,D<span class="pl-k">=</span>Box2D.Dynamics.b2ContactImpulse,H<span class="pl-k">=</span>Box2D.Dynamics.b2ContactListener,O<span class="pl-k">=</span>Box2D.Dynamics.b2ContactManager,E<span class="pl-k">=</span>Box2D.Dynamics.b2DebugDraw,R<span class="pl-k">=</span>Box2D.Dynamics.b2DestructionListener,N<span class="pl-k">=</span>Box2D.Dynamics.b2FilterData,S<span class="pl-k">=</span>Box2D.Dynamics.b2Fixture,aa<span class="pl-k">=</span>Box2D.Dynamics.b2FixtureDef,Z<span class="pl-k">=</span>Box2D.Dynamics.b2Island,d<span class="pl-k">=</span>Box2D.Dynamics.b2TimeStep,h<span class="pl-k">=</span>Box2D.Dynamics.b2World,l<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2Contact,j<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2ContactFactory,</td>
      </tr>
      <tr>
        <td id="L163" class="blob-num js-line-number" data-line-number="163"></td>
        <td id="LC163" class="blob-code blob-code-inner js-file-line">o<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2ContactSolver,q<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2Joint,n<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2PulleyJoint;<span class="pl-c1">k</span>.<span class="pl-en">b2Body</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_xf<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>;<span class="pl-v">this</span>.m_sweep<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-v">this</span>.m_linearVelocity<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>;<span class="pl-v">this</span>.m_force<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">connectEdges</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>){<span class="pl-k">if</span>(g<span class="pl-k">===</span><span class="pl-c1">undefined</span>)g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">atan2</span>(c.GetDirectionVector().<span class="pl-c1">y</span>,c.GetDirectionVector().<span class="pl-c1">x</span>);g<span class="pl-k">=</span>F.MulFV(<span class="pl-c1">Math</span>.<span class="pl-c1">tan</span>((b<span class="pl-k">-</span>g)<span class="pl-k">*</span><span class="pl-c1">0.5</span>),c.GetDirectionVector());g<span class="pl-k">=</span>F.SubtractVV(g,c.GetNormalVector());g<span class="pl-k">=</span>F.MulFV(A.b2_toiSlop,g);g<span class="pl-k">=</span>F.AddVV(g,c.GetVertex1());<span class="pl-k">var</span> e<span class="pl-k">=</span>F.AddVV(a.GetDirectionVector(),</td>
      </tr>
      <tr>
        <td id="L164" class="blob-num js-line-number" data-line-number="164"></td>
        <td id="LC164" class="blob-code blob-code-inner js-file-line">c.GetDirectionVector());e.Normalize();<span class="pl-k">var</span> f<span class="pl-k">=</span>F.Dot(a.GetDirectionVector(),c.GetNormalVector())<span class="pl-k">&gt;</span><span class="pl-c1">0</span>;a.SetNextEdge(c,g,e,f);c.SetPrevEdge(a,g,e,f);<span class="pl-k">return</span> b};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CreateFixture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_world.IsLocked()<span class="pl-k">==</span><span class="pl-c1">true</span>)<span class="pl-k">return</span> <span class="pl-c1">null</span>;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">S</span>;c.Create(<span class="pl-v">this</span>,<span class="pl-v">this</span>.m_xf,a);<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>k.e_activeFlag<span class="pl-k">&amp;&amp;</span>c.CreateProxy(<span class="pl-v">this</span>.m_world.m_contactManager.m_broadPhase,<span class="pl-v">this</span>.m_xf);c.m_next<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureList;<span class="pl-v">this</span>.m_fixtureList<span class="pl-k">=</span>c;<span class="pl-k">++</span><span class="pl-v">this</span>.m_fixtureCount;c.m_body<span class="pl-k">=</span><span class="pl-v">this</span>;c.m_density<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.ResetMassData();<span class="pl-v">this</span>.m_world.m_flags|<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L165" class="blob-num js-line-number" data-line-number="165"></td>
        <td id="LC165" class="blob-code blob-code-inner js-file-line">h.e_newFixture;<span class="pl-k">return</span> c};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CreateFixture2</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(c<span class="pl-k">===</span><span class="pl-c1">undefined</span>)c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">aa</span>;g.<span class="pl-c1">shape</span><span class="pl-k">=</span>a;g.density<span class="pl-k">=</span>c;<span class="pl-k">return</span> <span class="pl-v">this</span>.CreateFixture(g)};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DestroyFixture</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_world.IsLocked()<span class="pl-k">!=</span><span class="pl-c1">true</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureList,g<span class="pl-k">=</span><span class="pl-c1">null</span>;c<span class="pl-k">!=</span><span class="pl-c1">null</span>;){<span class="pl-k">if</span>(c<span class="pl-k">==</span>a){<span class="pl-k">if</span>(g)g.m_next<span class="pl-k">=</span>a.m_next;<span class="pl-k">else</span> <span class="pl-v">this</span>.m_fixtureList<span class="pl-k">=</span>a.m_next;<span class="pl-k">break</span>}g<span class="pl-k">=</span>c;c<span class="pl-k">=</span>c.m_next}<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactList;c;){g<span class="pl-k">=</span>c.contact;c<span class="pl-k">=</span>c.<span class="pl-c1">next</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span>g.GetFixtureA(),e<span class="pl-k">=</span>g.GetFixtureB();<span class="pl-k">if</span>(a<span class="pl-k">==</span>b<span class="pl-k">||</span>a<span class="pl-k">==</span>e)<span class="pl-v">this</span>.m_world.m_contactManager.Destroy(g)}<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span></td>
      </tr>
      <tr>
        <td id="L166" class="blob-num js-line-number" data-line-number="166"></td>
        <td id="LC166" class="blob-code blob-code-inner js-file-line">k.e_activeFlag<span class="pl-k">&amp;&amp;</span>a.DestroyProxy(<span class="pl-v">this</span>.m_world.m_contactManager.m_broadPhase);a.Destroy();a.m_body<span class="pl-k">=</span><span class="pl-c1">null</span>;a.m_next<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">--</span><span class="pl-v">this</span>.m_fixtureCount;<span class="pl-v">this</span>.ResetMassData()}};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetPositionAndAngle</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(c<span class="pl-k">===</span><span class="pl-c1">undefined</span>)c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> g;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_world.IsLocked()<span class="pl-k">!=</span><span class="pl-c1">true</span>){<span class="pl-v">this</span>.m_xf.R.Set(c);<span class="pl-v">this</span>.m_xf.position.SetV(a);g<span class="pl-k">=</span><span class="pl-v">this</span>.m_xf.R;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.m_sweep.localCenter;<span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">=</span>g.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>b.<span class="pl-c1">x</span><span class="pl-k">+</span>g.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>b.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">=</span>g.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>b.<span class="pl-c1">x</span><span class="pl-k">+</span>g.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>b.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_xf.position.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+=</span></td>
      </tr>
      <tr>
        <td id="L167" class="blob-num js-line-number" data-line-number="167"></td>
        <td id="LC167" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_xf.position.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_sweep.c0.SetV(<span class="pl-v">this</span>.m_sweep.c);<span class="pl-v">this</span>.m_sweep.a0<span class="pl-k">=</span><span class="pl-v">this</span>.m_sweep.a<span class="pl-k">=</span>c;b<span class="pl-k">=</span><span class="pl-v">this</span>.m_world.m_contactManager.m_broadPhase;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureList;g;g<span class="pl-k">=</span>g.m_next)g.Synchronize(b,<span class="pl-v">this</span>.m_xf,<span class="pl-v">this</span>.m_xf);<span class="pl-v">this</span>.m_world.m_contactManager.FindNewContacts()}};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetTransform</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.SetPositionAndAngle(a.position,a.GetAngle())};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetTransform</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_xf};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetPosition</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_xf.position};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetPosition</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.SetPositionAndAngle(a,</td>
      </tr>
      <tr>
        <td id="L168" class="blob-num js-line-number" data-line-number="168"></td>
        <td id="LC168" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.GetAngle())};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAngle</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_sweep.a};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAngle</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.SetPositionAndAngle(<span class="pl-v">this</span>.GetPosition(),a)};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetWorldCenter</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_sweep.c};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLocalCenter</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_sweep.localCenter};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLinearVelocity</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.m_type<span class="pl-k">!=</span>k.b2_staticBody<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.m_linearVelocity.SetV(a)};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLinearVelocity</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_linearVelocity};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAngularVelocity</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L169" class="blob-num js-line-number" data-line-number="169"></td>
        <td id="LC169" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_type<span class="pl-k">!=</span>k.b2_staticBody)<span class="pl-v">this</span>.m_angularVelocity<span class="pl-k">=</span>a};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAngularVelocity</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_angularVelocity};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetDefinition</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">z</span>;a.<span class="pl-c1">type</span><span class="pl-k">=</span><span class="pl-v">this</span>.GetType();a.allowSleep<span class="pl-k">=</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>k.e_allowSleepFlag)<span class="pl-k">==</span>k.e_allowSleepFlag;a.angle<span class="pl-k">=</span><span class="pl-v">this</span>.GetAngle();a.angularDamping<span class="pl-k">=</span><span class="pl-v">this</span>.m_angularDamping;a.angularVelocity<span class="pl-k">=</span><span class="pl-v">this</span>.m_angularVelocity;a.fixedRotation<span class="pl-k">=</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>k.e_fixedRotationFlag)<span class="pl-k">==</span>k.e_fixedRotationFlag;a.bullet<span class="pl-k">=</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span></td>
      </tr>
      <tr>
        <td id="L170" class="blob-num js-line-number" data-line-number="170"></td>
        <td id="LC170" class="blob-code blob-code-inner js-file-line">k.e_bulletFlag)<span class="pl-k">==</span>k.e_bulletFlag;a.awake<span class="pl-k">=</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>k.e_awakeFlag)<span class="pl-k">==</span>k.e_awakeFlag;a.linearDamping<span class="pl-k">=</span><span class="pl-v">this</span>.m_linearDamping;a.linearVelocity.SetV(<span class="pl-v">this</span>.GetLinearVelocity());a.position<span class="pl-k">=</span><span class="pl-v">this</span>.GetPosition();a.userData<span class="pl-k">=</span><span class="pl-v">this</span>.GetUserData();<span class="pl-k">return</span> a};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ApplyForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_type<span class="pl-k">==</span>k.b2_dynamicBody){<span class="pl-v">this</span>.IsAwake()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_force.<span class="pl-c1">x</span><span class="pl-k">+=</span>a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_force.<span class="pl-c1">y</span><span class="pl-k">+=</span>a.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_torque<span class="pl-k">+=</span>(c.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">x</span>)<span class="pl-k">*</span>a.<span class="pl-c1">y</span><span class="pl-k">-</span>(c.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">y</span>)<span class="pl-k">*</span>a.<span class="pl-c1">x</span>}};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ApplyTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L171" class="blob-num js-line-number" data-line-number="171"></td>
        <td id="LC171" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_type<span class="pl-k">==</span>k.b2_dynamicBody){<span class="pl-v">this</span>.IsAwake()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_torque<span class="pl-k">+=</span>a}};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ApplyImpulse</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_type<span class="pl-k">==</span>k.b2_dynamicBody){<span class="pl-v">this</span>.IsAwake()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMass<span class="pl-k">*</span>a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMass<span class="pl-k">*</span>a.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_angularVelocity<span class="pl-k">+=</span><span class="pl-v">this</span>.m_invI<span class="pl-k">*</span>((c.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">x</span>)<span class="pl-k">*</span>a.<span class="pl-c1">y</span><span class="pl-k">-</span>(c.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">y</span>)<span class="pl-k">*</span>a.<span class="pl-c1">x</span>)}};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Split</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.GetLinearVelocity().Copy(),g<span class="pl-k">=</span><span class="pl-v">this</span>.GetAngularVelocity(),</td>
      </tr>
      <tr>
        <td id="L172" class="blob-num js-line-number" data-line-number="172"></td>
        <td id="LC172" class="blob-code blob-code-inner js-file-line">b<span class="pl-k">=</span><span class="pl-v">this</span>.GetWorldCenter(),e<span class="pl-k">=</span><span class="pl-v">this</span>.m_world.CreateBody(<span class="pl-v">this</span>.GetDefinition()),f,m<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureList;m;)<span class="pl-k">if</span>(a(m)){<span class="pl-k">var</span> r<span class="pl-k">=</span>m.m_next;<span class="pl-k">if</span>(f)f.m_next<span class="pl-k">=</span>r;<span class="pl-k">else</span> <span class="pl-v">this</span>.m_fixtureList<span class="pl-k">=</span>r;<span class="pl-v">this</span>.m_fixtureCount<span class="pl-k">--</span>;m.m_next<span class="pl-k">=</span>e.m_fixtureList;e.m_fixtureList<span class="pl-k">=</span>m;e.m_fixtureCount<span class="pl-k">++</span>;m.m_body<span class="pl-k">=</span>e;m<span class="pl-k">=</span>r}<span class="pl-k">else</span>{f<span class="pl-k">=</span>m;m<span class="pl-k">=</span>m.m_next}<span class="pl-v">this</span>.ResetMassData();e.ResetMassData();f<span class="pl-k">=</span><span class="pl-v">this</span>.GetWorldCenter();a<span class="pl-k">=</span>e.GetWorldCenter();f<span class="pl-k">=</span>F.AddVV(c,F.CrossFV(g,F.SubtractVV(f,b)));c<span class="pl-k">=</span>F.AddVV(c,F.CrossFV(g,F.SubtractVV(a,b)));<span class="pl-v">this</span>.SetLinearVelocity(f);e.SetLinearVelocity(c);</td>
      </tr>
      <tr>
        <td id="L173" class="blob-num js-line-number" data-line-number="173"></td>
        <td id="LC173" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.SetAngularVelocity(g);e.SetAngularVelocity(g);<span class="pl-v">this</span>.SynchronizeFixtures();e.SynchronizeFixtures();<span class="pl-k">return</span> e};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Merge</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c;<span class="pl-k">for</span>(c<span class="pl-k">=</span>a.m_fixtureList;c;){<span class="pl-k">var</span> g<span class="pl-k">=</span>c.m_next;a.m_fixtureCount<span class="pl-k">--</span>;c.m_next<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureList;<span class="pl-v">this</span>.m_fixtureList<span class="pl-k">=</span>c;<span class="pl-v">this</span>.m_fixtureCount<span class="pl-k">++</span>;c.m_body<span class="pl-k">=</span>e;c<span class="pl-k">=</span>g}b.m_fixtureCount<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>,e<span class="pl-k">=</span>a;b.GetWorldCenter();e.GetWorldCenter();b.GetLinearVelocity().Copy();e.GetLinearVelocity().Copy();b.GetAngularVelocity();e.GetAngularVelocity();b.ResetMassData();<span class="pl-v">this</span>.SynchronizeFixtures()};</td>
      </tr>
      <tr>
        <td id="L174" class="blob-num js-line-number" data-line-number="174"></td>
        <td id="LC174" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMass</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_mass};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetInertia</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_I};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMassData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a.mass<span class="pl-k">=</span><span class="pl-v">this</span>.m_mass;a.I<span class="pl-k">=</span><span class="pl-v">this</span>.m_I;a.center.SetV(<span class="pl-v">this</span>.m_sweep.localCenter)};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMassData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){A.b2Assert(<span class="pl-v">this</span>.m_world.IsLocked()<span class="pl-k">==</span><span class="pl-c1">false</span>);<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_world.IsLocked()<span class="pl-k">!=</span><span class="pl-c1">true</span>)<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_type<span class="pl-k">==</span>k.b2_dynamicBody){<span class="pl-v">this</span>.m_invI<span class="pl-k">=</span><span class="pl-v">this</span>.m_I<span class="pl-k">=</span><span class="pl-v">this</span>.m_invMass<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_mass<span class="pl-k">=</span>a.mass;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_mass<span class="pl-k">&lt;=</span><span class="pl-c1">0</span>)<span class="pl-v">this</span>.m_mass<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.m_invMass<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>.m_mass;<span class="pl-k">if</span>(a.I<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>k.e_fixedRotationFlag)<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L175" class="blob-num js-line-number" data-line-number="175"></td>
        <td id="LC175" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>){<span class="pl-v">this</span>.m_I<span class="pl-k">=</span>a.I<span class="pl-k">-</span><span class="pl-v">this</span>.m_mass<span class="pl-k">*</span>(a.center.<span class="pl-c1">x</span><span class="pl-k">*</span>a.center.<span class="pl-c1">x</span><span class="pl-k">+</span>a.center.<span class="pl-c1">y</span><span class="pl-k">*</span>a.center.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.m_invI<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>.m_I}<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.m_sweep.c.Copy();<span class="pl-v">this</span>.m_sweep.localCenter.SetV(a.center);<span class="pl-v">this</span>.m_sweep.c0.SetV(F.MulX(<span class="pl-v">this</span>.m_xf,<span class="pl-v">this</span>.m_sweep.localCenter));<span class="pl-v">this</span>.m_sweep.c.SetV(<span class="pl-v">this</span>.m_sweep.c0);<span class="pl-v">this</span>.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_angularVelocity<span class="pl-k">*-</span>(<span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">-</span>c.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_angularVelocity<span class="pl-k">*+</span>(<span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">-</span>c.<span class="pl-c1">x</span>)}};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ResetMassData</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_invI<span class="pl-k">=</span><span class="pl-v">this</span>.m_I<span class="pl-k">=</span><span class="pl-v">this</span>.m_invMass<span class="pl-k">=</span><span class="pl-v">this</span>.m_mass<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_sweep.localCenter.SetZero();</td>
      </tr>
      <tr>
        <td id="L176" class="blob-num js-line-number" data-line-number="176"></td>
        <td id="LC176" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-k">!</span>(<span class="pl-v">this</span>.m_type<span class="pl-k">==</span>k.b2_staticBody<span class="pl-k">||</span><span class="pl-v">this</span>.m_type<span class="pl-k">==</span>k.b2_kinematicBody)){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span>y.Make(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),c<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureList;c;c<span class="pl-k">=</span>c.m_next)<span class="pl-k">if</span>(c.m_density<span class="pl-k">!=</span><span class="pl-c1">0</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>c.GetMassData();<span class="pl-v">this</span>.m_mass<span class="pl-k">+=</span>g.mass;a.<span class="pl-c1">x</span><span class="pl-k">+=</span>g.center.<span class="pl-c1">x</span><span class="pl-k">*</span>g.mass;a.<span class="pl-c1">y</span><span class="pl-k">+=</span>g.center.<span class="pl-c1">y</span><span class="pl-k">*</span>g.mass;<span class="pl-v">this</span>.m_I<span class="pl-k">+=</span>g.I}<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_mass<span class="pl-k">&gt;</span><span class="pl-c1">0</span>){<span class="pl-v">this</span>.m_invMass<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>.m_mass;a.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-v">this</span>.m_invMass;a.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-v">this</span>.m_invMass}<span class="pl-k">else</span> <span class="pl-v">this</span>.m_invMass<span class="pl-k">=</span><span class="pl-v">this</span>.m_mass<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_I<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>k.e_fixedRotationFlag)<span class="pl-k">==</span><span class="pl-c1">0</span>){<span class="pl-v">this</span>.m_I<span class="pl-k">-=</span><span class="pl-v">this</span>.m_mass<span class="pl-k">*</span>(a.<span class="pl-c1">x</span><span class="pl-k">*</span>a.<span class="pl-c1">x</span><span class="pl-k">+</span>a.<span class="pl-c1">y</span><span class="pl-k">*</span>a.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.m_I<span class="pl-k">*=</span><span class="pl-v">this</span>.m_inertiaScale;A.b2Assert(<span class="pl-v">this</span>.m_I<span class="pl-k">&gt;</span></td>
      </tr>
      <tr>
        <td id="L177" class="blob-num js-line-number" data-line-number="177"></td>
        <td id="LC177" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>);<span class="pl-v">this</span>.m_invI<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>.m_I}<span class="pl-k">else</span> <span class="pl-v">this</span>.m_invI<span class="pl-k">=</span><span class="pl-v">this</span>.m_I<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-v">this</span>.m_sweep.c.Copy();<span class="pl-v">this</span>.m_sweep.localCenter.SetV(a);<span class="pl-v">this</span>.m_sweep.c0.SetV(F.MulX(<span class="pl-v">this</span>.m_xf,<span class="pl-v">this</span>.m_sweep.localCenter));<span class="pl-v">this</span>.m_sweep.c.SetV(<span class="pl-v">this</span>.m_sweep.c0);<span class="pl-v">this</span>.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_angularVelocity<span class="pl-k">*-</span>(<span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">-</span>c.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_angularVelocity<span class="pl-k">*+</span>(<span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">-</span>c.<span class="pl-c1">x</span>)}};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetWorldPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.m_xf.R;a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>(c.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>a.<span class="pl-c1">x</span><span class="pl-k">+</span>c.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>a.<span class="pl-c1">y</span>,c.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>a.<span class="pl-c1">x</span><span class="pl-k">+</span>c.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>a.<span class="pl-c1">y</span>);a.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_xf.position.<span class="pl-c1">x</span>;</td>
      </tr>
      <tr>
        <td id="L178" class="blob-num js-line-number" data-line-number="178"></td>
        <td id="LC178" class="blob-code blob-code-inner js-file-line">a.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_xf.position.<span class="pl-c1">y</span>;<span class="pl-k">return</span> a};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetWorldVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> F.MulMV(<span class="pl-v">this</span>.m_xf.R,a)};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLocalPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> F.MulXT(<span class="pl-v">this</span>.m_xf,a)};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLocalVector</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> F.MulTMV(<span class="pl-v">this</span>.m_xf.R,a)};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLinearVelocityFromWorldPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">y</span>(<span class="pl-v">this</span>.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_angularVelocity<span class="pl-k">*</span>(a.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">y</span>),<span class="pl-v">this</span>.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_angularVelocity<span class="pl-k">*</span>(a.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">x</span>))};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLinearVelocityFromLocalPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L179" class="blob-num js-line-number" data-line-number="179"></td>
        <td id="LC179" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_xf.R;a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>(c.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>a.<span class="pl-c1">x</span><span class="pl-k">+</span>c.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>a.<span class="pl-c1">y</span>,c.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>a.<span class="pl-c1">x</span><span class="pl-k">+</span>c.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>a.<span class="pl-c1">y</span>);a.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_xf.position.<span class="pl-c1">x</span>;a.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_xf.position.<span class="pl-c1">y</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">y</span>(<span class="pl-v">this</span>.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_angularVelocity<span class="pl-k">*</span>(a.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">y</span>),<span class="pl-v">this</span>.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_angularVelocity<span class="pl-k">*</span>(a.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">x</span>))};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLinearDamping</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_linearDamping};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLinearDamping</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_linearDamping<span class="pl-k">=</span>a};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAngularDamping</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_angularDamping};</td>
      </tr>
      <tr>
        <td id="L180" class="blob-num js-line-number" data-line-number="180"></td>
        <td id="LC180" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAngularDamping</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_angularDamping<span class="pl-k">=</span>a};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetType</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_type<span class="pl-k">!=</span>a){<span class="pl-v">this</span>.m_type<span class="pl-k">=</span>a;<span class="pl-v">this</span>.ResetMassData();<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_type<span class="pl-k">==</span>k.b2_staticBody){<span class="pl-v">this</span>.m_linearVelocity.SetZero();<span class="pl-v">this</span>.m_angularVelocity<span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-v">this</span>.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_force.SetZero();<span class="pl-v">this</span>.m_torque<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactList;a;a<span class="pl-k">=</span>a.<span class="pl-c1">next</span>)a.contact.FlagForFiltering()}};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetType</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_type};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetBullet</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a)<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L181" class="blob-num js-line-number" data-line-number="181"></td>
        <td id="LC181" class="blob-code blob-code-inner js-file-line">k.e_bulletFlag;<span class="pl-k">else</span> <span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;=~</span>k.e_bulletFlag};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsBullet</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>k.e_bulletFlag)<span class="pl-k">==</span>k.e_bulletFlag};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetSleepingAllowed</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a)<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>k.e_allowSleepFlag;<span class="pl-k">else</span>{<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;=~</span>k.e_allowSleepFlag;<span class="pl-v">this</span>.SetAwake(<span class="pl-c1">true</span>)}};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAwake</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a){<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>k.e_awakeFlag;<span class="pl-v">this</span>.m_sleepTime<span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">else</span>{<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;=~</span>k.e_awakeFlag;<span class="pl-v">this</span>.m_sleepTime<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_linearVelocity.SetZero();<span class="pl-v">this</span>.m_angularVelocity<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_force.SetZero();<span class="pl-v">this</span>.m_torque<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L182" class="blob-num js-line-number" data-line-number="182"></td>
        <td id="LC182" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>}};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsAwake</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>k.e_awakeFlag)<span class="pl-k">==</span>k.e_awakeFlag};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetFixedRotation</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a)<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>k.e_fixedRotationFlag;<span class="pl-k">else</span> <span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;=~</span>k.e_fixedRotationFlag;<span class="pl-v">this</span>.ResetMassData()};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsFixedRotation</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>k.e_fixedRotationFlag)<span class="pl-k">==</span>k.e_fixedRotationFlag};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetActive</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">!=</span><span class="pl-v">this</span>.IsActive()){<span class="pl-k">var</span> c;<span class="pl-k">if</span>(a){<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>k.e_activeFlag;a<span class="pl-k">=</span><span class="pl-v">this</span>.m_world.m_contactManager.m_broadPhase;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureList;c;c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L183" class="blob-num js-line-number" data-line-number="183"></td>
        <td id="LC183" class="blob-code blob-code-inner js-file-line">c.m_next)c.CreateProxy(a,<span class="pl-v">this</span>.m_xf)}<span class="pl-k">else</span>{<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;=~</span>k.e_activeFlag;a<span class="pl-k">=</span><span class="pl-v">this</span>.m_world.m_contactManager.m_broadPhase;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureList;c;c<span class="pl-k">=</span>c.m_next)c.DestroyProxy(a);<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactList;a;){c<span class="pl-k">=</span>a;a<span class="pl-k">=</span>a.<span class="pl-c1">next</span>;<span class="pl-v">this</span>.m_world.m_contactManager.Destroy(c.contact)}<span class="pl-v">this</span>.m_contactList<span class="pl-k">=</span><span class="pl-c1">null</span>}}};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsActive</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>k.e_activeFlag)<span class="pl-k">==</span>k.e_activeFlag};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsSleepingAllowed</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>k.e_allowSleepFlag)<span class="pl-k">==</span>k.e_allowSleepFlag};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFixtureList</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L184" class="blob-num js-line-number" data-line-number="184"></td>
        <td id="LC184" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_fixtureList};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointList</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_jointList};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetControllerList</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_controllerList};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetContactList</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_contactList};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNext</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_next};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetUserData</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_userData};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetUserData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.m_userData<span class="pl-k">=</span>a};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetWorld</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_world};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Body</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.m_flags<span class="pl-k">=</span><span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L185" class="blob-num js-line-number" data-line-number="185"></td>
        <td id="LC185" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(a.bullet)<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>k.e_bulletFlag;<span class="pl-k">if</span>(a.fixedRotation)<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>k.e_fixedRotationFlag;<span class="pl-k">if</span>(a.allowSleep)<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>k.e_allowSleepFlag;<span class="pl-k">if</span>(a.awake)<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>k.e_awakeFlag;<span class="pl-k">if</span>(a.active)<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>k.e_activeFlag;<span class="pl-v">this</span>.m_world<span class="pl-k">=</span>c;<span class="pl-v">this</span>.m_xf.position.SetV(a.position);<span class="pl-v">this</span>.m_xf.R.Set(a.angle);<span class="pl-v">this</span>.m_sweep.localCenter.SetZero();<span class="pl-v">this</span>.m_sweep.t0<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.m_sweep.a0<span class="pl-k">=</span><span class="pl-v">this</span>.m_sweep.a<span class="pl-k">=</span>a.angle;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-v">this</span>.m_xf.R,b<span class="pl-k">=</span><span class="pl-v">this</span>.m_sweep.localCenter;<span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">=</span>g.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>b.<span class="pl-c1">x</span><span class="pl-k">+</span>g.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>b.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">=</span>g.col1.<span class="pl-c1">y</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L186" class="blob-num js-line-number" data-line-number="186"></td>
        <td id="LC186" class="blob-code blob-code-inner js-file-line">b.<span class="pl-c1">x</span><span class="pl-k">+</span>g.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>b.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_xf.position.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_xf.position.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_sweep.c0.SetV(<span class="pl-v">this</span>.m_sweep.c);<span class="pl-v">this</span>.m_contactList<span class="pl-k">=</span><span class="pl-v">this</span>.m_controllerList<span class="pl-k">=</span><span class="pl-v">this</span>.m_jointList<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_controllerCount<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_next<span class="pl-k">=</span><span class="pl-v">this</span>.m_prev<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_linearVelocity.SetV(a.linearVelocity);<span class="pl-v">this</span>.m_angularVelocity<span class="pl-k">=</span>a.angularVelocity;<span class="pl-v">this</span>.m_linearDamping<span class="pl-k">=</span>a.linearDamping;<span class="pl-v">this</span>.m_angularDamping<span class="pl-k">=</span>a.angularDamping;<span class="pl-v">this</span>.m_force.Set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.m_sleepTime<span class="pl-k">=</span><span class="pl-v">this</span>.m_torque<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_type<span class="pl-k">=</span>a.<span class="pl-c1">type</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_type<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L187" class="blob-num js-line-number" data-line-number="187"></td>
        <td id="LC187" class="blob-code blob-code-inner js-file-line">k.b2_dynamicBody)<span class="pl-v">this</span>.m_invMass<span class="pl-k">=</span><span class="pl-v">this</span>.m_mass<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">else</span> <span class="pl-v">this</span>.m_invMass<span class="pl-k">=</span><span class="pl-v">this</span>.m_mass<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_invI<span class="pl-k">=</span><span class="pl-v">this</span>.m_I<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_inertiaScale<span class="pl-k">=</span>a.inertiaScale;<span class="pl-v">this</span>.m_userData<span class="pl-k">=</span>a.userData;<span class="pl-v">this</span>.m_fixtureList<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_fixtureCount<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SynchronizeFixtures</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span>k.s_xf1;a.R.Set(<span class="pl-v">this</span>.m_sweep.a0);<span class="pl-k">var</span> c<span class="pl-k">=</span>a.R,g<span class="pl-k">=</span><span class="pl-v">this</span>.m_sweep.localCenter;a.position.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_sweep.c0.<span class="pl-c1">x</span><span class="pl-k">-</span>(c.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>g.<span class="pl-c1">x</span><span class="pl-k">+</span>c.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>g.<span class="pl-c1">y</span>);a.position.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_sweep.c0.<span class="pl-c1">y</span><span class="pl-k">-</span>(c.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>g.<span class="pl-c1">x</span><span class="pl-k">+</span>c.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>g.<span class="pl-c1">y</span>);g<span class="pl-k">=</span><span class="pl-v">this</span>.m_world.m_contactManager.m_broadPhase;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureList;c;c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L188" class="blob-num js-line-number" data-line-number="188"></td>
        <td id="LC188" class="blob-code blob-code-inner js-file-line">c.m_next)c.Synchronize(g,a,<span class="pl-v">this</span>.m_xf)};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SynchronizeTransform</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_xf.R.Set(<span class="pl-v">this</span>.m_sweep.a);<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.m_xf.R,c<span class="pl-k">=</span><span class="pl-v">this</span>.m_sweep.localCenter;<span class="pl-v">this</span>.m_xf.position.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">-</span>(a.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>c.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>c.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.m_xf.position.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">-</span>(a.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>c.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>c.<span class="pl-c1">y</span>)};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ShouldCollide</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_type<span class="pl-k">!=</span>k.b2_dynamicBody<span class="pl-k">&amp;&amp;</span>a.m_type<span class="pl-k">!=</span>k.b2_dynamicBody)<span class="pl-k">return</span> <span class="pl-c1">false</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.m_jointList;c;c<span class="pl-k">=</span>c.<span class="pl-c1">next</span>)<span class="pl-k">if</span>(c.other<span class="pl-k">==</span>a)<span class="pl-k">if</span>(c.joint.m_collideConnected<span class="pl-k">==</span><span class="pl-c1">false</span>)<span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L189" class="blob-num js-line-number" data-line-number="189"></td>
        <td id="LC189" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> <span class="pl-c1">true</span>};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Advance</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_sweep.Advance(a);<span class="pl-v">this</span>.m_sweep.c.SetV(<span class="pl-v">this</span>.m_sweep.c0);<span class="pl-v">this</span>.m_sweep.a<span class="pl-k">=</span><span class="pl-v">this</span>.m_sweep.a0;<span class="pl-v">this</span>.SynchronizeTransform()};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Dynamics.b2Body.s_xf1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>;Box2D.Dynamics.b2Body.e_islandFlag<span class="pl-k">=</span><span class="pl-c1">1</span>;Box2D.Dynamics.b2Body.e_awakeFlag<span class="pl-k">=</span><span class="pl-c1">2</span>;Box2D.Dynamics.b2Body.e_allowSleepFlag<span class="pl-k">=</span><span class="pl-c1">4</span>;Box2D.Dynamics.b2Body.e_bulletFlag<span class="pl-k">=</span><span class="pl-c1">8</span>;Box2D.Dynamics.b2Body.e_fixedRotationFlag<span class="pl-k">=</span><span class="pl-c1">16</span>;Box2D.Dynamics.b2Body.e_activeFlag<span class="pl-k">=</span><span class="pl-c1">32</span>;Box2D.Dynamics.b2Body.b2_staticBody<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L190" class="blob-num js-line-number" data-line-number="190"></td>
        <td id="LC190" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;Box2D.Dynamics.b2Body.b2_kinematicBody<span class="pl-k">=</span><span class="pl-c1">1</span>;Box2D.Dynamics.b2Body.b2_dynamicBody<span class="pl-k">=</span><span class="pl-c1">2</span>});<span class="pl-c1">z</span>.<span class="pl-en">b2BodyDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.position<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>;<span class="pl-v">this</span>.linearVelocity<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>};<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2BodyDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.userData<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.position.Set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.angle<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.linearVelocity.Set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.angularDamping<span class="pl-k">=</span><span class="pl-v">this</span>.linearDamping<span class="pl-k">=</span><span class="pl-v">this</span>.angularVelocity<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.awake<span class="pl-k">=</span><span class="pl-v">this</span>.allowSleep<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-v">this</span>.bullet<span class="pl-k">=</span><span class="pl-v">this</span>.fixedRotation<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span>k.b2_staticBody;<span class="pl-v">this</span>.active<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-v">this</span>.inertiaScale<span class="pl-k">=</span><span class="pl-c1">1</span>};<span class="pl-c1">u</span>.<span class="pl-en">b2ContactFilter</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ShouldCollide</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L191" class="blob-num js-line-number" data-line-number="191"></td>
        <td id="LC191" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a.GetFilterData(),b<span class="pl-k">=</span>c.GetFilterData();<span class="pl-k">if</span>(g.groupIndex<span class="pl-k">==</span>b.groupIndex<span class="pl-k">&amp;&amp;</span>g.groupIndex<span class="pl-k">!=</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> g.groupIndex<span class="pl-k">&gt;</span><span class="pl-c1">0</span>;<span class="pl-k">return</span>(g.maskBits<span class="pl-k">&amp;</span>b.categoryBits)<span class="pl-k">!=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>(g.categoryBits<span class="pl-k">&amp;</span>b.maskBits)<span class="pl-k">!=</span><span class="pl-c1">0</span>};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCollide</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">if</span>(<span class="pl-k">!</span>a)<span class="pl-k">return</span> <span class="pl-c1">true</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>.ShouldCollide(a <span class="pl-k">instanceof</span> S<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">null</span>,c)};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Dynamics.b2ContactFilter.b2_defaultFilter<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">u</span>});<span class="pl-c1">D</span>.<span class="pl-en">b2ContactImpulse</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.normalImpulses<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(A.b2_maxManifoldPoints);<span class="pl-v">this</span>.tangentImpulses<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L192" class="blob-num js-line-number" data-line-number="192"></td>
        <td id="LC192" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(A.b2_maxManifoldPoints)};<span class="pl-c1">H</span>.<span class="pl-en">b2ContactListener</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">BeginContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">EndContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">PreSolve</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">PostSolve</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Dynamics.b2ContactListener.b2_defaultListener<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">H</span>});<span class="pl-c1">O</span>.<span class="pl-en">b2ContactManager</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">O</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2ContactManager</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_world<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_contactCount<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_contactFilter<span class="pl-k">=</span>u.b2_defaultFilter;<span class="pl-v">this</span>.m_contactListener<span class="pl-k">=</span>H.b2_defaultListener;</td>
      </tr>
      <tr>
        <td id="L193" class="blob-num js-line-number" data-line-number="193"></td>
        <td id="LC193" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_contactFactory<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">j</span>(<span class="pl-v">this</span>.m_allocator);<span class="pl-v">this</span>.m_broadPhase<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>};<span class="pl-c1">O</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddPair</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> S<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">null</span>,b<span class="pl-k">=</span>c <span class="pl-k">instanceof</span> S<span class="pl-k">?</span>c<span class="pl-k">:</span><span class="pl-c1">null</span>,e<span class="pl-k">=</span>g.GetBody(),f<span class="pl-k">=</span>b.GetBody();<span class="pl-k">if</span>(e<span class="pl-k">!=</span>f){<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=</span>f.GetContactList();m;){<span class="pl-k">if</span>(m.other<span class="pl-k">==</span>e){<span class="pl-k">var</span> r<span class="pl-k">=</span>m.contact.GetFixtureA(),s<span class="pl-k">=</span>m.contact.GetFixtureB();<span class="pl-k">if</span>(r<span class="pl-k">==</span>g<span class="pl-k">&amp;&amp;</span>s<span class="pl-k">==</span>b)<span class="pl-k">return</span>;<span class="pl-k">if</span>(r<span class="pl-k">==</span>b<span class="pl-k">&amp;&amp;</span>s<span class="pl-k">==</span>g)<span class="pl-k">return</span>}m<span class="pl-k">=</span>m.<span class="pl-c1">next</span>}<span class="pl-k">if</span>(f.ShouldCollide(e)<span class="pl-k">!=</span><span class="pl-c1">false</span>)<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_contactFilter.ShouldCollide(g,b)<span class="pl-k">!=</span><span class="pl-c1">false</span>){m<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactFactory.Create(g,b);g<span class="pl-k">=</span>m.GetFixtureA();b<span class="pl-k">=</span>m.GetFixtureB();</td>
      </tr>
      <tr>
        <td id="L194" class="blob-num js-line-number" data-line-number="194"></td>
        <td id="LC194" class="blob-code blob-code-inner js-file-line">e<span class="pl-k">=</span>g.m_body;f<span class="pl-k">=</span>b.m_body;m.m_prev<span class="pl-k">=</span><span class="pl-c1">null</span>;m.m_next<span class="pl-k">=</span><span class="pl-v">this</span>.m_world.m_contactList;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_world.m_contactList<span class="pl-k">!=</span><span class="pl-c1">null</span>)<span class="pl-v">this</span>.m_world.m_contactList.m_prev<span class="pl-k">=</span>m;<span class="pl-v">this</span>.m_world.m_contactList<span class="pl-k">=</span>m;m.m_nodeA.contact<span class="pl-k">=</span>m;m.m_nodeA.other<span class="pl-k">=</span>f;m.m_nodeA.prev<span class="pl-k">=</span><span class="pl-c1">null</span>;m.m_nodeA.<span class="pl-c1">next</span><span class="pl-k">=</span>e.m_contactList;<span class="pl-k">if</span>(e.m_contactList<span class="pl-k">!=</span><span class="pl-c1">null</span>)e.m_contactList.prev<span class="pl-k">=</span>m.m_nodeA;e.m_contactList<span class="pl-k">=</span>m.m_nodeA;m.m_nodeB.contact<span class="pl-k">=</span>m;m.m_nodeB.other<span class="pl-k">=</span>e;m.m_nodeB.prev<span class="pl-k">=</span><span class="pl-c1">null</span>;m.m_nodeB.<span class="pl-c1">next</span><span class="pl-k">=</span>f.m_contactList;<span class="pl-k">if</span>(f.m_contactList<span class="pl-k">!=</span><span class="pl-c1">null</span>)f.m_contactList.prev<span class="pl-k">=</span>m.m_nodeB;f.m_contactList<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L195" class="blob-num js-line-number" data-line-number="195"></td>
        <td id="LC195" class="blob-code blob-code-inner js-file-line">m.m_nodeB;<span class="pl-k">++</span><span class="pl-v">this</span>.m_world.m_contactCount}}};<span class="pl-c1">O</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">FindNewContacts</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_broadPhase.UpdatePairs(Box2D.generateCallback(<span class="pl-v">this</span>,<span class="pl-v">this</span>.AddPair))};<span class="pl-c1">O</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>a.GetFixtureA(),g<span class="pl-k">=</span>a.GetFixtureB();c<span class="pl-k">=</span>c.GetBody();g<span class="pl-k">=</span>g.GetBody();a.IsTouching()<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.m_contactListener.EndContact(a);<span class="pl-k">if</span>(a.m_prev)a.m_prev.m_next<span class="pl-k">=</span>a.m_next;<span class="pl-k">if</span>(a.m_next)a.m_next.m_prev<span class="pl-k">=</span>a.m_prev;<span class="pl-k">if</span>(a<span class="pl-k">==</span><span class="pl-v">this</span>.m_world.m_contactList)<span class="pl-v">this</span>.m_world.m_contactList<span class="pl-k">=</span>a.m_next;<span class="pl-k">if</span>(a.m_nodeA.prev)a.m_nodeA.prev.<span class="pl-c1">next</span><span class="pl-k">=</span>a.m_nodeA.<span class="pl-c1">next</span>;</td>
      </tr>
      <tr>
        <td id="L196" class="blob-num js-line-number" data-line-number="196"></td>
        <td id="LC196" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(a.m_nodeA.<span class="pl-c1">next</span>)a.m_nodeA.<span class="pl-c1">next</span>.prev<span class="pl-k">=</span>a.m_nodeA.prev;<span class="pl-k">if</span>(a.m_nodeA<span class="pl-k">==</span>c.m_contactList)c.m_contactList<span class="pl-k">=</span>a.m_nodeA.<span class="pl-c1">next</span>;<span class="pl-k">if</span>(a.m_nodeB.prev)a.m_nodeB.prev.<span class="pl-c1">next</span><span class="pl-k">=</span>a.m_nodeB.<span class="pl-c1">next</span>;<span class="pl-k">if</span>(a.m_nodeB.<span class="pl-c1">next</span>)a.m_nodeB.<span class="pl-c1">next</span>.prev<span class="pl-k">=</span>a.m_nodeB.prev;<span class="pl-k">if</span>(a.m_nodeB<span class="pl-k">==</span>g.m_contactList)g.m_contactList<span class="pl-k">=</span>a.m_nodeB.<span class="pl-c1">next</span>;<span class="pl-v">this</span>.m_contactFactory.Destroy(a);<span class="pl-k">--</span><span class="pl-v">this</span>.m_contactCount};<span class="pl-c1">O</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Collide</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.m_world.m_contactList;a;){<span class="pl-k">var</span> c<span class="pl-k">=</span>a.GetFixtureA(),g<span class="pl-k">=</span>a.GetFixtureB(),b<span class="pl-k">=</span>c.GetBody(),e<span class="pl-k">=</span>g.GetBody();<span class="pl-k">if</span>(b.IsAwake()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span>e.IsAwake()<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L197" class="blob-num js-line-number" data-line-number="197"></td>
        <td id="LC197" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">false</span>)a<span class="pl-k">=</span>a.GetNext();<span class="pl-k">else</span>{<span class="pl-k">if</span>(a.m_flags<span class="pl-k">&amp;</span>l.e_filterFlag){<span class="pl-k">if</span>(e.ShouldCollide(b)<span class="pl-k">==</span><span class="pl-c1">false</span>){c<span class="pl-k">=</span>a;a<span class="pl-k">=</span>c.GetNext();<span class="pl-v">this</span>.Destroy(c);<span class="pl-k">continue</span>}<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_contactFilter.ShouldCollide(c,g)<span class="pl-k">==</span><span class="pl-c1">false</span>){c<span class="pl-k">=</span>a;a<span class="pl-k">=</span>c.GetNext();<span class="pl-v">this</span>.Destroy(c);<span class="pl-k">continue</span>}a.m_flags<span class="pl-k">&amp;=~</span>l.e_filterFlag}<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_broadPhase.TestOverlap(c.m_proxy,g.m_proxy)<span class="pl-k">==</span><span class="pl-c1">false</span>){c<span class="pl-k">=</span>a;a<span class="pl-k">=</span>c.GetNext();<span class="pl-v">this</span>.Destroy(c)}<span class="pl-k">else</span>{a.Update(<span class="pl-v">this</span>.m_contactListener);a<span class="pl-k">=</span>a.GetNext()}}}};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Dynamics.b2ContactManager.s_evalCP<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>});<span class="pl-c1">E</span>.<span class="pl-en">b2DebugDraw</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L198" class="blob-num js-line-number" data-line-number="198"></td>
        <td id="LC198" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2DebugDraw</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetFlags</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFlags</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AppendFlags</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ClearFlags</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetSprite</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetSprite</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetDrawScale</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetDrawScale</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLineThickness</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLineThickness</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetFillAlpha</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L199" class="blob-num js-line-number" data-line-number="199"></td>
        <td id="LC199" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFillAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetXFormScale</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetXFormScale</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawPolygon</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawSolidPolygon</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawCircle</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawSolidCircle</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawSegment</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawTransform</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Dynamics.b2DebugDraw.e_shapeBit<span class="pl-k">=</span><span class="pl-c1">1</span>;Box2D.Dynamics.b2DebugDraw.e_jointBit<span class="pl-k">=</span><span class="pl-c1">2</span>;Box2D.Dynamics.b2DebugDraw.e_aabbBit<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L200" class="blob-num js-line-number" data-line-number="200"></td>
        <td id="LC200" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">4</span>;Box2D.Dynamics.b2DebugDraw.e_pairBit<span class="pl-k">=</span><span class="pl-c1">8</span>;Box2D.Dynamics.b2DebugDraw.e_centerOfMassBit<span class="pl-k">=</span><span class="pl-c1">16</span>;Box2D.Dynamics.b2DebugDraw.e_controllerBit<span class="pl-k">=</span><span class="pl-c1">32</span>});<span class="pl-c1">R</span>.<span class="pl-en">b2DestructionListener</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">R</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SayGoodbyeJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">R</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SayGoodbyeFixture</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">N</span>.<span class="pl-en">b2FilterData</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.categoryBits<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.maskBits<span class="pl-k">=</span><span class="pl-c1">65535</span>;<span class="pl-v">this</span>.groupIndex<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Copy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;a.categoryBits<span class="pl-k">=</span><span class="pl-v">this</span>.categoryBits;a.maskBits<span class="pl-k">=</span><span class="pl-v">this</span>.maskBits;a.groupIndex<span class="pl-k">=</span><span class="pl-v">this</span>.groupIndex;<span class="pl-k">return</span> a};<span class="pl-c1">S</span>.<span class="pl-en">b2Fixture</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_filter<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L201" class="blob-num js-line-number" data-line-number="201"></td>
        <td id="LC201" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">N</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetType</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_shape.GetType()};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_shape};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetSensor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_isSensor<span class="pl-k">!=</span>a){<span class="pl-v">this</span>.m_isSensor<span class="pl-k">=</span>a;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_body<span class="pl-k">!=</span><span class="pl-c1">null</span>)<span class="pl-k">for</span>(a<span class="pl-k">=</span><span class="pl-v">this</span>.m_body.GetContactList();a;){<span class="pl-k">var</span> c<span class="pl-k">=</span>a.contact,g<span class="pl-k">=</span>c.GetFixtureA(),b<span class="pl-k">=</span>c.GetFixtureB();<span class="pl-k">if</span>(g<span class="pl-k">==</span><span class="pl-v">this</span><span class="pl-k">||</span>b<span class="pl-k">==</span><span class="pl-v">this</span>)c.SetSensor(g.IsSensor()<span class="pl-k">||</span>b.IsSensor());a<span class="pl-k">=</span>a.<span class="pl-c1">next</span>}}};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsSensor</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_isSensor};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetFilterData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.m_filter<span class="pl-k">=</span>a.Copy();<span class="pl-k">if</span>(<span class="pl-k">!</span><span class="pl-v">this</span>.m_body)<span class="pl-k">for</span>(a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L202" class="blob-num js-line-number" data-line-number="202"></td>
        <td id="LC202" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_body.GetContactList();a;){<span class="pl-k">var</span> c<span class="pl-k">=</span>a.contact,g<span class="pl-k">=</span>c.GetFixtureA(),b<span class="pl-k">=</span>c.GetFixtureB();<span class="pl-k">if</span>(g<span class="pl-k">==</span><span class="pl-v">this</span><span class="pl-k">||</span>b<span class="pl-k">==</span><span class="pl-v">this</span>)c.FlagForFiltering();a<span class="pl-k">=</span>a.<span class="pl-c1">next</span>}};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFilterData</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_filter.Copy()};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetBody</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_body};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNext</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_next};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetUserData</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_userData};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetUserData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.m_userData<span class="pl-k">=</span>a};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">TestPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_shape.TestPoint(<span class="pl-v">this</span>.m_body.GetTransform(),</td>
      </tr>
      <tr>
        <td id="L203" class="blob-num js-line-number" data-line-number="203"></td>
        <td id="LC203" class="blob-code blob-code-inner js-file-line">a)};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_shape.RayCast(a,c,<span class="pl-v">this</span>.m_body.GetTransform())};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMassData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(a<span class="pl-k">==</span><span class="pl-c1">null</span>)a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">I</span>;<span class="pl-v">this</span>.m_shape.ComputeMass(a,<span class="pl-v">this</span>.m_density);<span class="pl-k">return</span> a};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetDensity</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_density<span class="pl-k">=</span>a};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetDensity</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_density};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFriction</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_friction};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetFriction</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_friction<span class="pl-k">=</span>a};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetRestitution</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L204" class="blob-num js-line-number" data-line-number="204"></td>
        <td id="LC204" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_restitution};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetRestitution</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_restitution<span class="pl-k">=</span>a};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAABB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_aabb};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Fixture</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_aabb<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;<span class="pl-v">this</span>.m_shape<span class="pl-k">=</span><span class="pl-v">this</span>.m_next<span class="pl-k">=</span><span class="pl-v">this</span>.m_body<span class="pl-k">=</span><span class="pl-v">this</span>.m_userData<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_restitution<span class="pl-k">=</span><span class="pl-v">this</span>.m_friction<span class="pl-k">=</span><span class="pl-v">this</span>.m_density<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>){<span class="pl-v">this</span>.m_userData<span class="pl-k">=</span>g.userData;<span class="pl-v">this</span>.m_friction<span class="pl-k">=</span>g.friction;<span class="pl-v">this</span>.m_restitution<span class="pl-k">=</span>g.restitution;<span class="pl-v">this</span>.m_body<span class="pl-k">=</span>a;<span class="pl-v">this</span>.m_next<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_filter<span class="pl-k">=</span>g.filter.Copy();</td>
      </tr>
      <tr>
        <td id="L205" class="blob-num js-line-number" data-line-number="205"></td>
        <td id="LC205" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_isSensor<span class="pl-k">=</span>g.isSensor;<span class="pl-v">this</span>.m_shape<span class="pl-k">=</span>g.<span class="pl-c1">shape</span>.Copy();<span class="pl-v">this</span>.m_density<span class="pl-k">=</span>g.density};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_shape<span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CreateProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.m_shape.ComputeAABB(<span class="pl-v">this</span>.m_aabb,c);<span class="pl-v">this</span>.m_proxy<span class="pl-k">=</span>a.CreateProxy(<span class="pl-v">this</span>.m_aabb,<span class="pl-v">this</span>)};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DestroyProxy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_proxy<span class="pl-k">!=</span><span class="pl-c1">null</span>){a.DestroyProxy(<span class="pl-v">this</span>.m_proxy);<span class="pl-v">this</span>.m_proxy<span class="pl-k">=</span><span class="pl-c1">null</span>}};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Synchronize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_proxy){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;<span class="pl-v">this</span>.m_shape.ComputeAABB(b,c);<span class="pl-v">this</span>.m_shape.ComputeAABB(e,g);</td>
      </tr>
      <tr>
        <td id="L206" class="blob-num js-line-number" data-line-number="206"></td>
        <td id="LC206" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_aabb.Combine(b,e);c<span class="pl-k">=</span>F.SubtractVV(g.position,c.position);a.MoveProxy(<span class="pl-v">this</span>.m_proxy,<span class="pl-v">this</span>.m_aabb,c)}};<span class="pl-c1">aa</span>.<span class="pl-en">b2FixtureDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.filter<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>};<span class="pl-c1">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2FixtureDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.userData<span class="pl-k">=</span><span class="pl-v">this</span>.<span class="pl-c1">shape</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.friction<span class="pl-k">=</span><span class="pl-c1">0.2</span>;<span class="pl-v">this</span>.density<span class="pl-k">=</span><span class="pl-v">this</span>.restitution<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.filter.categoryBits<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.filter.maskBits<span class="pl-k">=</span><span class="pl-c1">65535</span>;<span class="pl-v">this</span>.filter.groupIndex<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.isSensor<span class="pl-k">=</span><span class="pl-c1">false</span>};<span class="pl-c1">Z</span>.<span class="pl-en">b2Island</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Island</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_bodies<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>;<span class="pl-v">this</span>.m_contacts<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>;<span class="pl-v">this</span>.m_joints<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>};</td>
      </tr>
      <tr>
        <td id="L207" class="blob-num js-line-number" data-line-number="207"></td>
        <td id="LC207" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>,<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(c<span class="pl-k">===</span><span class="pl-c1">undefined</span>)c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(g<span class="pl-k">===</span><span class="pl-c1">undefined</span>)g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_bodyCapacity<span class="pl-k">=</span>a;<span class="pl-v">this</span>.m_contactCapacity<span class="pl-k">=</span>c;<span class="pl-v">this</span>.m_jointCapacity<span class="pl-k">=</span>g;<span class="pl-v">this</span>.m_jointCount<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactCount<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyCount<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_allocator<span class="pl-k">=</span>b;<span class="pl-v">this</span>.m_listener<span class="pl-k">=</span>e;<span class="pl-v">this</span>.m_contactSolver<span class="pl-k">=</span>f;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodies.<span class="pl-c1">length</span>;m<span class="pl-k">&lt;</span>a;m<span class="pl-k">++</span>)<span class="pl-v">this</span>.m_bodies[m]<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-v">this</span>.m_contacts.<span class="pl-c1">length</span>;m<span class="pl-k">&lt;</span>c;m<span class="pl-k">++</span>)<span class="pl-v">this</span>.m_contacts[m]<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">for</span>(m<span class="pl-k">=</span><span class="pl-v">this</span>.m_joints.<span class="pl-c1">length</span>;m<span class="pl-k">&lt;</span>g;m<span class="pl-k">++</span>)<span class="pl-v">this</span>.m_joints[m]<span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Clear</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_jointCount<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L208" class="blob-num js-line-number" data-line-number="208"></td>
        <td id="LC208" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_contactCount<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyCount<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Solve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>,f;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_bodyCount;<span class="pl-k">++</span>b){e<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodies[b];<span class="pl-k">if</span>(e.GetType()<span class="pl-k">==</span>k.b2_dynamicBody){e.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span>a.dt<span class="pl-k">*</span>(c.<span class="pl-c1">x</span><span class="pl-k">+</span>e.m_invMass<span class="pl-k">*</span>e.m_force.<span class="pl-c1">x</span>);e.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>a.dt<span class="pl-k">*</span>(c.<span class="pl-c1">y</span><span class="pl-k">+</span>e.m_invMass<span class="pl-k">*</span>e.m_force.<span class="pl-c1">y</span>);e.m_angularVelocity<span class="pl-k">+=</span>a.dt<span class="pl-k">*</span>e.m_invI<span class="pl-k">*</span>e.m_torque;e.m_linearVelocity.Multiply(F.Clamp(<span class="pl-c1">1</span><span class="pl-k">-</span>a.dt<span class="pl-k">*</span>e.m_linearDamping,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>));e.m_angularVelocity<span class="pl-k">*=</span>F.Clamp(<span class="pl-c1">1</span><span class="pl-k">-</span>a.dt<span class="pl-k">*</span>e.m_angularDamping,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)}}<span class="pl-v">this</span>.m_contactSolver.Initialize(a,<span class="pl-v">this</span>.m_contacts,</td>
      </tr>
      <tr>
        <td id="L209" class="blob-num js-line-number" data-line-number="209"></td>
        <td id="LC209" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_contactCount,<span class="pl-v">this</span>.m_allocator);c<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactSolver;c.InitVelocityConstraints(a);<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_jointCount;<span class="pl-k">++</span>b){f<span class="pl-k">=</span><span class="pl-v">this</span>.m_joints[b];f.InitVelocityConstraints(a)}<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>a.velocityIterations;<span class="pl-k">++</span>b){<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_jointCount;<span class="pl-k">++</span>e){f<span class="pl-k">=</span><span class="pl-v">this</span>.m_joints[e];f.SolveVelocityConstraints(a)}c.SolveVelocityConstraints()}<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_jointCount;<span class="pl-k">++</span>b){f<span class="pl-k">=</span><span class="pl-v">this</span>.m_joints[b];f.FinalizeVelocityConstraints()}c.FinalizeVelocityConstraints();<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_bodyCount;<span class="pl-k">++</span>b){e<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodies[b];<span class="pl-k">if</span>(e.GetType()<span class="pl-k">!=</span></td>
      </tr>
      <tr>
        <td id="L210" class="blob-num js-line-number" data-line-number="210"></td>
        <td id="LC210" class="blob-code blob-code-inner js-file-line">k.b2_staticBody){<span class="pl-k">var</span> m<span class="pl-k">=</span>a.dt<span class="pl-k">*</span>e.m_linearVelocity.<span class="pl-c1">x</span>,r<span class="pl-k">=</span>a.dt<span class="pl-k">*</span>e.m_linearVelocity.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(m<span class="pl-k">*</span>m<span class="pl-k">+</span>r<span class="pl-k">*</span>r<span class="pl-k">&gt;</span>A.b2_maxTranslationSquared){e.m_linearVelocity.Normalize();e.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">*=</span>A.b2_maxTranslation<span class="pl-k">*</span>a.inv_dt;e.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">*=</span>A.b2_maxTranslation<span class="pl-k">*</span>a.inv_dt}m<span class="pl-k">=</span>a.dt<span class="pl-k">*</span>e.m_angularVelocity;<span class="pl-k">if</span>(m<span class="pl-k">*</span>m<span class="pl-k">&gt;</span>A.b2_maxRotationSquared)e.m_angularVelocity<span class="pl-k">=</span>e.m_angularVelocity<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">?-</span>A.b2_maxRotation<span class="pl-k">*</span>a.inv_dt<span class="pl-k">:</span>A.b2_maxRotation<span class="pl-k">*</span>a.inv_dt;e.m_sweep.c0.SetV(e.m_sweep.c);e.m_sweep.a0<span class="pl-k">=</span>e.m_sweep.a;e.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+=</span>a.dt<span class="pl-k">*</span>e.m_linearVelocity.<span class="pl-c1">x</span>;e.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+=</span></td>
      </tr>
      <tr>
        <td id="L211" class="blob-num js-line-number" data-line-number="211"></td>
        <td id="LC211" class="blob-code blob-code-inner js-file-line">a.dt<span class="pl-k">*</span>e.m_linearVelocity.<span class="pl-c1">y</span>;e.m_sweep.a<span class="pl-k">+=</span>a.dt<span class="pl-k">*</span>e.m_angularVelocity;e.SynchronizeTransform()}}<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>a.positionIterations;<span class="pl-k">++</span>b){m<span class="pl-k">=</span>c.SolvePositionConstraints(A.b2_contactBaumgarte);r<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-k">for</span>(e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_jointCount;<span class="pl-k">++</span>e){f<span class="pl-k">=</span><span class="pl-v">this</span>.m_joints[e];f<span class="pl-k">=</span>f.SolvePositionConstraints(A.b2_contactBaumgarte);r<span class="pl-k">=</span>r<span class="pl-k">&amp;&amp;</span>f}<span class="pl-k">if</span>(m<span class="pl-k">&amp;&amp;</span>r)<span class="pl-k">break</span>}<span class="pl-v">this</span>.Report(c.m_constraints);<span class="pl-k">if</span>(g){g<span class="pl-k">=</span><span class="pl-c1">Number</span>.<span class="pl-c1">MAX_VALUE</span>;c<span class="pl-k">=</span>A.b2_linearSleepTolerance<span class="pl-k">*</span>A.b2_linearSleepTolerance;m<span class="pl-k">=</span>A.b2_angularSleepTolerance<span class="pl-k">*</span>A.b2_angularSleepTolerance;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_bodyCount;<span class="pl-k">++</span>b){e<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L212" class="blob-num js-line-number" data-line-number="212"></td>
        <td id="LC212" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_bodies[b];<span class="pl-k">if</span>(e.GetType()<span class="pl-k">!=</span>k.b2_staticBody){<span class="pl-k">if</span>((e.m_flags<span class="pl-k">&amp;</span>k.e_allowSleepFlag)<span class="pl-k">==</span><span class="pl-c1">0</span>)g<span class="pl-k">=</span>e.m_sleepTime<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>((e.m_flags<span class="pl-k">&amp;</span>k.e_allowSleepFlag)<span class="pl-k">==</span><span class="pl-c1">0</span><span class="pl-k">||</span>e.m_angularVelocity<span class="pl-k">*</span>e.m_angularVelocity<span class="pl-k">&gt;</span>m<span class="pl-k">||</span>F.Dot(e.m_linearVelocity,e.m_linearVelocity)<span class="pl-k">&gt;</span>c)g<span class="pl-k">=</span>e.m_sleepTime<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">else</span>{e.m_sleepTime<span class="pl-k">+=</span>a.dt;g<span class="pl-k">=</span>F.Min(g,e.m_sleepTime)}}}<span class="pl-k">if</span>(g<span class="pl-k">&gt;=</span>A.b2_timeToSleep)<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_bodyCount;<span class="pl-k">++</span>b){e<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodies[b];e.SetAwake(<span class="pl-c1">false</span>)}}};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveTOI</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_contactSolver.Initialize(a,<span class="pl-v">this</span>.m_contacts,<span class="pl-v">this</span>.m_contactCount,</td>
      </tr>
      <tr>
        <td id="L213" class="blob-num js-line-number" data-line-number="213"></td>
        <td id="LC213" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_allocator);<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactSolver;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_jointCount;<span class="pl-k">++</span>c)<span class="pl-v">this</span>.m_joints[c].InitVelocityConstraints(a);<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>a.velocityIterations;<span class="pl-k">++</span>c){b.SolveVelocityConstraints();<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_jointCount;<span class="pl-k">++</span>g)<span class="pl-v">this</span>.m_joints[g].SolveVelocityConstraints(a)}<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_bodyCount;<span class="pl-k">++</span>c){g<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodies[c];<span class="pl-k">if</span>(g.GetType()<span class="pl-k">!=</span>k.b2_staticBody){<span class="pl-k">var</span> e<span class="pl-k">=</span>a.dt<span class="pl-k">*</span>g.m_linearVelocity.<span class="pl-c1">x</span>,f<span class="pl-k">=</span>a.dt<span class="pl-k">*</span>g.m_linearVelocity.<span class="pl-c1">y</span>;<span class="pl-k">if</span>(e<span class="pl-k">*</span>e<span class="pl-k">+</span>f<span class="pl-k">*</span>f<span class="pl-k">&gt;</span>A.b2_maxTranslationSquared){g.m_linearVelocity.Normalize();g.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">*=</span>A.b2_maxTranslation<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L214" class="blob-num js-line-number" data-line-number="214"></td>
        <td id="LC214" class="blob-code blob-code-inner js-file-line">a.inv_dt;g.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">*=</span>A.b2_maxTranslation<span class="pl-k">*</span>a.inv_dt}e<span class="pl-k">=</span>a.dt<span class="pl-k">*</span>g.m_angularVelocity;<span class="pl-k">if</span>(e<span class="pl-k">*</span>e<span class="pl-k">&gt;</span>A.b2_maxRotationSquared)g.m_angularVelocity<span class="pl-k">=</span>g.m_angularVelocity<span class="pl-k">&lt;</span><span class="pl-c1">0</span><span class="pl-k">?-</span>A.b2_maxRotation<span class="pl-k">*</span>a.inv_dt<span class="pl-k">:</span>A.b2_maxRotation<span class="pl-k">*</span>a.inv_dt;g.m_sweep.c0.SetV(g.m_sweep.c);g.m_sweep.a0<span class="pl-k">=</span>g.m_sweep.a;g.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+=</span>a.dt<span class="pl-k">*</span>g.m_linearVelocity.<span class="pl-c1">x</span>;g.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+=</span>a.dt<span class="pl-k">*</span>g.m_linearVelocity.<span class="pl-c1">y</span>;g.m_sweep.a<span class="pl-k">+=</span>a.dt<span class="pl-k">*</span>g.m_angularVelocity;g.SynchronizeTransform()}}<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span>a.positionIterations;<span class="pl-k">++</span>c){e<span class="pl-k">=</span>b.SolvePositionConstraints(<span class="pl-c1">0.75</span>);f<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L215" class="blob-num js-line-number" data-line-number="215"></td>
        <td id="LC215" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_jointCount;<span class="pl-k">++</span>g){<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-v">this</span>.m_joints[g].SolvePositionConstraints(A.b2_contactBaumgarte);f<span class="pl-k">=</span>f<span class="pl-k">&amp;&amp;</span>m}<span class="pl-k">if</span>(e<span class="pl-k">&amp;&amp;</span>f)<span class="pl-k">break</span>}<span class="pl-v">this</span>.Report(b.m_constraints)};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Report</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_listener<span class="pl-k">!=</span><span class="pl-c1">null</span>)<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_contactCount;<span class="pl-k">++</span>c){<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-v">this</span>.m_contacts[c],b<span class="pl-k">=</span>a[c],e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span>b.pointCount;<span class="pl-k">++</span>e){Z.s_impulse.normalImpulses[e]<span class="pl-k">=</span>b.points[e].normalImpulse;Z.s_impulse.tangentImpulses[e]<span class="pl-k">=</span>b.points[e].tangentImpulse}<span class="pl-v">this</span>.m_listener.PostSolve(g,Z.s_impulse)}};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddBody</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a.m_islandIndex<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L216" class="blob-num js-line-number" data-line-number="216"></td>
        <td id="LC216" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_bodyCount;<span class="pl-v">this</span>.m_bodies[<span class="pl-v">this</span>.m_bodyCount<span class="pl-k">++</span>]<span class="pl-k">=</span>a};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.m_contacts[<span class="pl-v">this</span>.m_contactCount<span class="pl-k">++</span>]<span class="pl-k">=</span>a};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.m_joints[<span class="pl-v">this</span>.m_jointCount<span class="pl-k">++</span>]<span class="pl-k">=</span>a};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Dynamics.b2Island.s_impulse<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">D</span>});<span class="pl-c1">d</span>.<span class="pl-en">b2TimeStep</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">d</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.dt<span class="pl-k">=</span>a.dt;<span class="pl-v">this</span>.inv_dt<span class="pl-k">=</span>a.inv_dt;<span class="pl-v">this</span>.positionIterations<span class="pl-k">=</span>a.positionIterations;<span class="pl-v">this</span>.velocityIterations<span class="pl-k">=</span>a.velocityIterations;<span class="pl-v">this</span>.warmStarting<span class="pl-k">=</span>a.warmStarting};<span class="pl-c1">h</span>.<span class="pl-en">b2World</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.s_stack<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L217" class="blob-num js-line-number" data-line-number="217"></td>
        <td id="LC217" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">Vector</span>;<span class="pl-v">this</span>.m_contactManager<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">O</span>;<span class="pl-v">this</span>.m_contactSolver<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">o</span>;<span class="pl-v">this</span>.m_island<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Z</span>};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2World</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-v">this</span>.m_controllerList<span class="pl-k">=</span><span class="pl-v">this</span>.m_jointList<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactList<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList<span class="pl-k">=</span><span class="pl-v">this</span>.m_debugDraw<span class="pl-k">=</span><span class="pl-v">this</span>.m_destructionListener<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_controllerCount<span class="pl-k">=</span><span class="pl-v">this</span>.m_jointCount<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactCount<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyCount<span class="pl-k">=</span><span class="pl-c1">0</span>;h.m_warmStarting<span class="pl-k">=</span><span class="pl-c1">true</span>;h.m_continuousPhysics<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-v">this</span>.m_allowSleep<span class="pl-k">=</span>c;<span class="pl-v">this</span>.m_gravity<span class="pl-k">=</span>a;<span class="pl-v">this</span>.m_inv_dt0<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_contactManager.m_world<span class="pl-k">=</span><span class="pl-v">this</span>;<span class="pl-v">this</span>.m_groundBody<span class="pl-k">=</span><span class="pl-v">this</span>.CreateBody(<span class="pl-k">new</span> <span class="pl-en">z</span>)};</td>
      </tr>
      <tr>
        <td id="L218" class="blob-num js-line-number" data-line-number="218"></td>
        <td id="LC218" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetDestructionListener</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.m_destructionListener<span class="pl-k">=</span>a};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetContactFilter</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.m_contactManager.m_contactFilter<span class="pl-k">=</span>a};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetContactListener</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.m_contactManager.m_contactListener<span class="pl-k">=</span>a};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetDebugDraw</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.m_debugDraw<span class="pl-k">=</span>a};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetBroadPhase</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactManager.m_broadPhase;<span class="pl-v">this</span>.m_contactManager.m_broadPhase<span class="pl-k">=</span>a;<span class="pl-k">for</span>(<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;g;g<span class="pl-k">=</span>g.m_next)<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span>g.m_fixtureList;b;b<span class="pl-k">=</span>b.m_next)b.m_proxy<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L219" class="blob-num js-line-number" data-line-number="219"></td>
        <td id="LC219" class="blob-code blob-code-inner js-file-line">a.CreateProxy(c.GetFatAABB(b.m_proxy),b)};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Validate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_contactManager.m_broadPhase.Validate()};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetProxyCount</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_contactManager.m_broadPhase.GetProxyCount()};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CreateBody</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>.IsLocked()<span class="pl-k">==</span><span class="pl-c1">true</span>)<span class="pl-k">return</span> <span class="pl-c1">null</span>;a<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">k</span>(a,<span class="pl-v">this</span>);a.m_prev<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(a.m_next<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList)<span class="pl-v">this</span>.m_bodyList.m_prev<span class="pl-k">=</span>a;<span class="pl-v">this</span>.m_bodyList<span class="pl-k">=</span>a;<span class="pl-k">++</span><span class="pl-v">this</span>.m_bodyCount;<span class="pl-k">return</span> a};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DestroyBody</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(<span class="pl-v">this</span>.IsLocked()<span class="pl-k">!=</span><span class="pl-c1">true</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c<span class="pl-k">=</span>a.m_jointList;c;){<span class="pl-k">var</span> g<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L220" class="blob-num js-line-number" data-line-number="220"></td>
        <td id="LC220" class="blob-code blob-code-inner js-file-line">c;c<span class="pl-k">=</span>c.<span class="pl-c1">next</span>;<span class="pl-v">this</span>.m_destructionListener<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.m_destructionListener.SayGoodbyeJoint(g.joint);<span class="pl-v">this</span>.DestroyJoint(g.joint)}<span class="pl-k">for</span>(c<span class="pl-k">=</span>a.m_controllerList;c;){g<span class="pl-k">=</span>c;c<span class="pl-k">=</span>c.nextController;g.controller.RemoveBody(a)}<span class="pl-k">for</span>(c<span class="pl-k">=</span>a.m_contactList;c;){g<span class="pl-k">=</span>c;c<span class="pl-k">=</span>c.<span class="pl-c1">next</span>;<span class="pl-v">this</span>.m_contactManager.Destroy(g.contact)}a.m_contactList<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span>a.m_fixtureList;c;){g<span class="pl-k">=</span>c;c<span class="pl-k">=</span>c.m_next;<span class="pl-v">this</span>.m_destructionListener<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.m_destructionListener.SayGoodbyeFixture(g);g.DestroyProxy(<span class="pl-v">this</span>.m_contactManager.m_broadPhase);g.Destroy()}a.m_fixtureList<span class="pl-k">=</span><span class="pl-c1">null</span>;a.m_fixtureCount<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L221" class="blob-num js-line-number" data-line-number="221"></td>
        <td id="LC221" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-k">if</span>(a.m_prev)a.m_prev.m_next<span class="pl-k">=</span>a.m_next;<span class="pl-k">if</span>(a.m_next)a.m_next.m_prev<span class="pl-k">=</span>a.m_prev;<span class="pl-k">if</span>(a<span class="pl-k">==</span><span class="pl-v">this</span>.m_bodyList)<span class="pl-v">this</span>.m_bodyList<span class="pl-k">=</span>a.m_next;<span class="pl-k">--</span><span class="pl-v">this</span>.m_bodyCount}};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CreateJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>q.Create(a,<span class="pl-c1">null</span>);c.m_prev<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(c.m_next<span class="pl-k">=</span><span class="pl-v">this</span>.m_jointList)<span class="pl-v">this</span>.m_jointList.m_prev<span class="pl-k">=</span>c;<span class="pl-v">this</span>.m_jointList<span class="pl-k">=</span>c;<span class="pl-k">++</span><span class="pl-v">this</span>.m_jointCount;c.m_edgeA.joint<span class="pl-k">=</span>c;c.m_edgeA.other<span class="pl-k">=</span>c.m_bodyB;c.m_edgeA.prev<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(c.m_edgeA.<span class="pl-c1">next</span><span class="pl-k">=</span>c.m_bodyA.m_jointList)c.m_bodyA.m_jointList.prev<span class="pl-k">=</span>c.m_edgeA;c.m_bodyA.m_jointList<span class="pl-k">=</span>c.m_edgeA;c.m_edgeB.joint<span class="pl-k">=</span>c;</td>
      </tr>
      <tr>
        <td id="L222" class="blob-num js-line-number" data-line-number="222"></td>
        <td id="LC222" class="blob-code blob-code-inner js-file-line">c.m_edgeB.other<span class="pl-k">=</span>c.m_bodyA;c.m_edgeB.prev<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(c.m_edgeB.<span class="pl-c1">next</span><span class="pl-k">=</span>c.m_bodyB.m_jointList)c.m_bodyB.m_jointList.prev<span class="pl-k">=</span>c.m_edgeB;c.m_bodyB.m_jointList<span class="pl-k">=</span>c.m_edgeB;<span class="pl-k">var</span> g<span class="pl-k">=</span>a.bodyA,b<span class="pl-k">=</span>a.bodyB;<span class="pl-k">if</span>(a.collideConnected<span class="pl-k">==</span><span class="pl-c1">false</span>)<span class="pl-k">for</span>(a<span class="pl-k">=</span>b.GetContactList();a;){a.other<span class="pl-k">==</span>g<span class="pl-k">&amp;&amp;</span>a.contact.FlagForFiltering();a<span class="pl-k">=</span>a.<span class="pl-c1">next</span>}<span class="pl-k">return</span> c};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DestroyJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>a.m_collideConnected;<span class="pl-k">if</span>(a.m_prev)a.m_prev.m_next<span class="pl-k">=</span>a.m_next;<span class="pl-k">if</span>(a.m_next)a.m_next.m_prev<span class="pl-k">=</span>a.m_prev;<span class="pl-k">if</span>(a<span class="pl-k">==</span><span class="pl-v">this</span>.m_jointList)<span class="pl-v">this</span>.m_jointList<span class="pl-k">=</span>a.m_next;<span class="pl-k">var</span> g<span class="pl-k">=</span>a.m_bodyA,b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L223" class="blob-num js-line-number" data-line-number="223"></td>
        <td id="LC223" class="blob-code blob-code-inner js-file-line">a.m_bodyB;g.SetAwake(<span class="pl-c1">true</span>);b.SetAwake(<span class="pl-c1">true</span>);<span class="pl-k">if</span>(a.m_edgeA.prev)a.m_edgeA.prev.<span class="pl-c1">next</span><span class="pl-k">=</span>a.m_edgeA.<span class="pl-c1">next</span>;<span class="pl-k">if</span>(a.m_edgeA.<span class="pl-c1">next</span>)a.m_edgeA.<span class="pl-c1">next</span>.prev<span class="pl-k">=</span>a.m_edgeA.prev;<span class="pl-k">if</span>(a.m_edgeA<span class="pl-k">==</span>g.m_jointList)g.m_jointList<span class="pl-k">=</span>a.m_edgeA.<span class="pl-c1">next</span>;a.m_edgeA.prev<span class="pl-k">=</span><span class="pl-c1">null</span>;a.m_edgeA.<span class="pl-c1">next</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(a.m_edgeB.prev)a.m_edgeB.prev.<span class="pl-c1">next</span><span class="pl-k">=</span>a.m_edgeB.<span class="pl-c1">next</span>;<span class="pl-k">if</span>(a.m_edgeB.<span class="pl-c1">next</span>)a.m_edgeB.<span class="pl-c1">next</span>.prev<span class="pl-k">=</span>a.m_edgeB.prev;<span class="pl-k">if</span>(a.m_edgeB<span class="pl-k">==</span>b.m_jointList)b.m_jointList<span class="pl-k">=</span>a.m_edgeB.<span class="pl-c1">next</span>;a.m_edgeB.prev<span class="pl-k">=</span><span class="pl-c1">null</span>;a.m_edgeB.<span class="pl-c1">next</span><span class="pl-k">=</span><span class="pl-c1">null</span>;q.Destroy(a,<span class="pl-c1">null</span>);<span class="pl-k">--</span><span class="pl-v">this</span>.m_jointCount;<span class="pl-k">if</span>(c<span class="pl-k">==</span><span class="pl-c1">false</span>)<span class="pl-k">for</span>(a<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L224" class="blob-num js-line-number" data-line-number="224"></td>
        <td id="LC224" class="blob-code blob-code-inner js-file-line">b.GetContactList();a;){a.other<span class="pl-k">==</span>g<span class="pl-k">&amp;&amp;</span>a.contact.FlagForFiltering();a<span class="pl-k">=</span>a.<span class="pl-c1">next</span>}};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddController</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a.m_next<span class="pl-k">=</span><span class="pl-v">this</span>.m_controllerList;a.m_prev<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_controllerList<span class="pl-k">=</span>a;a.m_world<span class="pl-k">=</span><span class="pl-v">this</span>;<span class="pl-v">this</span>.m_controllerCount<span class="pl-k">++</span>;<span class="pl-k">return</span> a};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RemoveController</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a.m_prev)a.m_prev.m_next<span class="pl-k">=</span>a.m_next;<span class="pl-k">if</span>(a.m_next)a.m_next.m_prev<span class="pl-k">=</span>a.m_prev;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_controllerList<span class="pl-k">==</span>a)<span class="pl-v">this</span>.m_controllerList<span class="pl-k">=</span>a.m_next;<span class="pl-v">this</span>.m_controllerCount<span class="pl-k">--</span>};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">CreateController</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">if</span>(a.m_world<span class="pl-k">!=</span><span class="pl-v">this</span>)<span class="pl-k">throw</span> Error(<span class="pl-s"><span class="pl-pds">&quot;</span>Controller can only be a member of one world<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L225" class="blob-num js-line-number" data-line-number="225"></td>
        <td id="LC225" class="blob-code blob-code-inner js-file-line">a.m_next<span class="pl-k">=</span><span class="pl-v">this</span>.m_controllerList;a.m_prev<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_controllerList)<span class="pl-v">this</span>.m_controllerList.m_prev<span class="pl-k">=</span>a;<span class="pl-v">this</span>.m_controllerList<span class="pl-k">=</span>a;<span class="pl-k">++</span><span class="pl-v">this</span>.m_controllerCount;a.m_world<span class="pl-k">=</span><span class="pl-v">this</span>;<span class="pl-k">return</span> a};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DestroyController</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){a.Clear();<span class="pl-k">if</span>(a.m_next)a.m_next.m_prev<span class="pl-k">=</span>a.m_prev;<span class="pl-k">if</span>(a.m_prev)a.m_prev.m_next<span class="pl-k">=</span>a.m_next;<span class="pl-k">if</span>(a<span class="pl-k">==</span><span class="pl-v">this</span>.m_controllerList)<span class="pl-v">this</span>.m_controllerList<span class="pl-k">=</span>a.m_next;<span class="pl-k">--</span><span class="pl-v">this</span>.m_controllerCount};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetWarmStarting</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){h.m_warmStarting<span class="pl-k">=</span>a};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetContinuousPhysics</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){h.m_continuousPhysics<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L226" class="blob-num js-line-number" data-line-number="226"></td>
        <td id="LC226" class="blob-code blob-code-inner js-file-line">a};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetBodyCount</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyCount};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointCount</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_jointCount};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetContactCount</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_contactCount};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetGravity</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-v">this</span>.m_gravity<span class="pl-k">=</span>a};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetGravity</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_gravity};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetGroundBody</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_groundBody};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Step</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>){<span class="pl-k">if</span>(a<span class="pl-k">===</span><span class="pl-c1">undefined</span>)a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(c<span class="pl-k">===</span><span class="pl-c1">undefined</span>)c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(g<span class="pl-k">===</span><span class="pl-c1">undefined</span>)g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>h.e_newFixture){<span class="pl-v">this</span>.m_contactManager.FindNewContacts();</td>
      </tr>
      <tr>
        <td id="L227" class="blob-num js-line-number" data-line-number="227"></td>
        <td id="LC227" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;=~</span>h.e_newFixture}<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>h.e_locked;<span class="pl-k">var</span> b<span class="pl-k">=</span>h.s_timestep2;b.dt<span class="pl-k">=</span>a;b.velocityIterations<span class="pl-k">=</span>c;b.positionIterations<span class="pl-k">=</span>g;b.inv_dt<span class="pl-k">=</span>a<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span>a<span class="pl-k">:</span><span class="pl-c1">0</span>;b.dtRatio<span class="pl-k">=</span><span class="pl-v">this</span>.m_inv_dt0<span class="pl-k">*</span>a;b.warmStarting<span class="pl-k">=</span>h.m_warmStarting;<span class="pl-v">this</span>.m_contactManager.Collide();b.dt<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.Solve(b);h.m_continuousPhysics<span class="pl-k">&amp;&amp;</span>b.dt<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.SolveTOI(b);<span class="pl-k">if</span>(b.dt<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-v">this</span>.m_inv_dt0<span class="pl-k">=</span>b.inv_dt;<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;=~</span>h.e_locked};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ClearForces</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;a;a<span class="pl-k">=</span>a.m_next){a.m_force.SetZero();a.m_torque<span class="pl-k">=</span><span class="pl-c1">0</span>}};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawDebugData</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L228" class="blob-num js-line-number" data-line-number="228"></td>
        <td id="LC228" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_debugDraw<span class="pl-k">!=</span><span class="pl-c1">null</span>){<span class="pl-v">this</span>.m_debugDraw.m_sprite.graphics.<span class="pl-c1">clear</span>();<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.m_debugDraw.GetFlags(),c,g,b;<span class="pl-k">new</span> <span class="pl-en">y</span>;<span class="pl-k">new</span> <span class="pl-en">y</span>;<span class="pl-k">new</span> <span class="pl-en">y</span>;<span class="pl-k">var</span> e;<span class="pl-k">new</span> <span class="pl-en">U</span>;<span class="pl-k">new</span> <span class="pl-en">U</span>;e<span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">y</span>,<span class="pl-k">new</span> <span class="pl-en">y</span>,<span class="pl-k">new</span> <span class="pl-en">y</span>,<span class="pl-k">new</span> <span class="pl-en">y</span>];<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-k">if</span>(a<span class="pl-k">&amp;</span>E.e_shapeBit)<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;c;c<span class="pl-k">=</span>c.m_next){e<span class="pl-k">=</span>c.m_xf;<span class="pl-k">for</span>(g<span class="pl-k">=</span>c.GetFixtureList();g;g<span class="pl-k">=</span>g.m_next){b<span class="pl-k">=</span>g.GetShape();<span class="pl-k">if</span>(c.IsActive()<span class="pl-k">==</span><span class="pl-c1">false</span>)f.Set(<span class="pl-c1">0.5</span>,<span class="pl-c1">0.5</span>,<span class="pl-c1">0.3</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(c.GetType()<span class="pl-k">==</span>k.b2_staticBody)f.Set(<span class="pl-c1">0.5</span>,<span class="pl-c1">0.9</span>,<span class="pl-c1">0.5</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(c.GetType()<span class="pl-k">==</span>k.b2_kinematicBody)f.Set(<span class="pl-c1">0.5</span>,<span class="pl-c1">0.5</span>,<span class="pl-c1">0.9</span>);<span class="pl-k">else</span> c.IsAwake()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L229" class="blob-num js-line-number" data-line-number="229"></td>
        <td id="LC229" class="blob-code blob-code-inner js-file-line">f.Set(<span class="pl-c1">0.6</span>,<span class="pl-c1">0.6</span>,<span class="pl-c1">0.6</span>)<span class="pl-k">:</span>f.Set(<span class="pl-c1">0.9</span>,<span class="pl-c1">0.7</span>,<span class="pl-c1">0.7</span>);<span class="pl-v">this</span>.DrawShape(b,e,f)}}<span class="pl-k">if</span>(a<span class="pl-k">&amp;</span>E.e_jointBit)<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.m_jointList;c;c<span class="pl-k">=</span>c.m_next)<span class="pl-v">this</span>.DrawJoint(c);<span class="pl-k">if</span>(a<span class="pl-k">&amp;</span>E.e_controllerBit)<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.m_controllerList;c;c<span class="pl-k">=</span>c.m_next)c.Draw(<span class="pl-v">this</span>.m_debugDraw);<span class="pl-k">if</span>(a<span class="pl-k">&amp;</span>E.e_pairBit){f.Set(<span class="pl-c1">0.3</span>,<span class="pl-c1">0.9</span>,<span class="pl-c1">0.9</span>);<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactManager.m_contactList;c;c<span class="pl-k">=</span>c.GetNext()){b<span class="pl-k">=</span>c.GetFixtureA();g<span class="pl-k">=</span>c.GetFixtureB();b<span class="pl-k">=</span>b.GetAABB().GetCenter();g<span class="pl-k">=</span>g.GetAABB().GetCenter();<span class="pl-v">this</span>.m_debugDraw.DrawSegment(b,g,f)}}<span class="pl-k">if</span>(a<span class="pl-k">&amp;</span>E.e_aabbBit){b<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactManager.m_broadPhase;e<span class="pl-k">=</span>[<span class="pl-k">new</span> <span class="pl-en">y</span>,</td>
      </tr>
      <tr>
        <td id="L230" class="blob-num js-line-number" data-line-number="230"></td>
        <td id="LC230" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">y</span>,<span class="pl-k">new</span> <span class="pl-en">y</span>,<span class="pl-k">new</span> <span class="pl-en">y</span>];<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;c;c<span class="pl-k">=</span>c.GetNext())<span class="pl-k">if</span>(c.IsActive()<span class="pl-k">!=</span><span class="pl-c1">false</span>)<span class="pl-k">for</span>(g<span class="pl-k">=</span>c.GetFixtureList();g;g<span class="pl-k">=</span>g.GetNext()){<span class="pl-k">var</span> m<span class="pl-k">=</span>b.GetFatAABB(g.m_proxy);e[<span class="pl-c1">0</span>].Set(m.lowerBound.<span class="pl-c1">x</span>,m.lowerBound.<span class="pl-c1">y</span>);e[<span class="pl-c1">1</span>].Set(m.upperBound.<span class="pl-c1">x</span>,m.lowerBound.<span class="pl-c1">y</span>);e[<span class="pl-c1">2</span>].Set(m.upperBound.<span class="pl-c1">x</span>,m.upperBound.<span class="pl-c1">y</span>);e[<span class="pl-c1">3</span>].Set(m.lowerBound.<span class="pl-c1">x</span>,m.upperBound.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.m_debugDraw.DrawPolygon(e,<span class="pl-c1">4</span>,f)}}<span class="pl-k">if</span>(a<span class="pl-k">&amp;</span>E.e_centerOfMassBit)<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;c;c<span class="pl-k">=</span>c.m_next){e<span class="pl-k">=</span>h.s_xf;e.R<span class="pl-k">=</span>c.m_xf.R;e.position<span class="pl-k">=</span>c.GetWorldCenter();<span class="pl-v">this</span>.m_debugDraw.DrawTransform(e)}}};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">QueryAABB</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L231" class="blob-num js-line-number" data-line-number="231"></td>
        <td id="LC231" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactManager.m_broadPhase;g.Query(<span class="pl-k">function</span>(<span class="pl-smi">b</span>){<span class="pl-k">return</span> a(g.GetUserData(b))},c)};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">QueryShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>){<span class="pl-k">if</span>(g<span class="pl-k">===</span><span class="pl-c1">undefined</span>)g<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(g<span class="pl-k">==</span><span class="pl-c1">null</span>){g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>;g.SetIdentity()}<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactManager.m_broadPhase,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;c.ComputeAABB(e,g);b.Query(<span class="pl-k">function</span>(<span class="pl-smi">f</span>){f<span class="pl-k">=</span>b.GetUserData(f)<span class="pl-k">instanceof</span> S<span class="pl-k">?</span>b.GetUserData(f)<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(Y.TestOverlap(c,g,f.GetShape(),f.GetBody().GetTransform()))<span class="pl-k">return</span> a(f);<span class="pl-k">return</span> <span class="pl-c1">true</span>},e)};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">QueryPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactManager.m_broadPhase,</td>
      </tr>
      <tr>
        <td id="L232" class="blob-num js-line-number" data-line-number="232"></td>
        <td id="LC232" class="blob-code blob-code-inner js-file-line">b<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;b.lowerBound.Set(c.<span class="pl-c1">x</span><span class="pl-k">-</span>A.b2_linearSlop,c.<span class="pl-c1">y</span><span class="pl-k">-</span>A.b2_linearSlop);b.upperBound.Set(c.<span class="pl-c1">x</span><span class="pl-k">+</span>A.b2_linearSlop,c.<span class="pl-c1">y</span><span class="pl-k">+</span>A.b2_linearSlop);g.Query(<span class="pl-k">function</span>(<span class="pl-smi">e</span>){e<span class="pl-k">=</span>g.GetUserData(e)<span class="pl-k">instanceof</span> S<span class="pl-k">?</span>g.GetUserData(e)<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(e.TestPoint(c))<span class="pl-k">return</span> a(e);<span class="pl-k">return</span> <span class="pl-c1">true</span>},b)};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCast</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>){<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactManager.m_broadPhase,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>,f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Q</span>(c,g);b.RayCast(<span class="pl-k">function</span>(<span class="pl-smi">m</span>,<span class="pl-smi">r</span>){<span class="pl-k">var</span> s<span class="pl-k">=</span>b.GetUserData(r);s<span class="pl-k">=</span>s <span class="pl-k">instanceof</span> S<span class="pl-k">?</span>s<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(s.RayCast(e,m)){<span class="pl-k">var</span> v<span class="pl-k">=</span>e.fraction,t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>((<span class="pl-c1">1</span><span class="pl-k">-</span>v)<span class="pl-k">*</span>c.<span class="pl-c1">x</span><span class="pl-k">+</span>v<span class="pl-k">*</span>g.<span class="pl-c1">x</span>,(<span class="pl-c1">1</span><span class="pl-k">-</span>v)<span class="pl-k">*</span>c.<span class="pl-c1">y</span><span class="pl-k">+</span>v<span class="pl-k">*</span>g.<span class="pl-c1">y</span>);<span class="pl-k">return</span> a(s,</td>
      </tr>
      <tr>
        <td id="L233" class="blob-num js-line-number" data-line-number="233"></td>
        <td id="LC233" class="blob-code blob-code-inner js-file-line">t,e.normal,v)}<span class="pl-k">return</span> m.maxFraction},f)};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCastOne</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> g;<span class="pl-v">this</span>.RayCast(<span class="pl-k">function</span>(<span class="pl-smi">b</span>,<span class="pl-smi">e</span>,<span class="pl-smi">f</span>,<span class="pl-smi">m</span>){<span class="pl-k">if</span>(m<span class="pl-k">===</span><span class="pl-c1">undefined</span>)m<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">=</span>b;<span class="pl-k">return</span> m},a,c);<span class="pl-k">return</span> g};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RayCastAll</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>;<span class="pl-v">this</span>.RayCast(<span class="pl-k">function</span>(<span class="pl-smi">b</span>){g[g.<span class="pl-c1">length</span>]<span class="pl-k">=</span>b;<span class="pl-k">return</span> <span class="pl-c1">1</span>},a,c);<span class="pl-k">return</span> g};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetBodyList</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyList};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointList</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_jointList};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetContactList</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_contactList};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsLocked</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span></td>
      </tr>
      <tr>
        <td id="L234" class="blob-num js-line-number" data-line-number="234"></td>
        <td id="LC234" class="blob-code blob-code-inner js-file-line">h.e_locked)<span class="pl-k">&gt;</span><span class="pl-c1">0</span>};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Solve</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> c,g<span class="pl-k">=</span><span class="pl-v">this</span>.m_controllerList;g;g<span class="pl-k">=</span>g.m_next)g.Step(a);g<span class="pl-k">=</span><span class="pl-v">this</span>.m_island;g.Initialize(<span class="pl-v">this</span>.m_bodyCount,<span class="pl-v">this</span>.m_contactCount,<span class="pl-v">this</span>.m_jointCount,<span class="pl-c1">null</span>,<span class="pl-v">this</span>.m_contactManager.m_contactListener,<span class="pl-v">this</span>.m_contactSolver);<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;c;c<span class="pl-k">=</span>c.m_next)c.m_flags<span class="pl-k">&amp;=~</span>k.e_islandFlag;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactList;b;b<span class="pl-k">=</span>b.m_next)b.m_flags<span class="pl-k">&amp;=~</span>l.e_islandFlag;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-v">this</span>.m_jointList;b;b<span class="pl-k">=</span>b.m_next)b.m_islandFlag<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-c1">parseInt</span>(<span class="pl-v">this</span>.m_bodyCount);b<span class="pl-k">=</span><span class="pl-v">this</span>.s_stack;<span class="pl-k">for</span>(<span class="pl-k">var</span> e<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;e;e<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L235" class="blob-num js-line-number" data-line-number="235"></td>
        <td id="LC235" class="blob-code blob-code-inner js-file-line">e.m_next)<span class="pl-k">if</span>(<span class="pl-k">!</span>(e.m_flags<span class="pl-k">&amp;</span>k.e_islandFlag))<span class="pl-k">if</span>(<span class="pl-k">!</span>(e.IsAwake()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">||</span>e.IsActive()<span class="pl-k">==</span><span class="pl-c1">false</span>))<span class="pl-k">if</span>(e.GetType()<span class="pl-k">!=</span>k.b2_staticBody){g.Clear();<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">0</span>;b[f<span class="pl-k">++</span>]<span class="pl-k">=</span>e;<span class="pl-k">for</span>(e.m_flags|<span class="pl-k">=</span>k.e_islandFlag;f<span class="pl-k">&gt;</span><span class="pl-c1">0</span>;){c<span class="pl-k">=</span>b[<span class="pl-k">--</span>f];g.AddBody(c);c.IsAwake()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span>c.SetAwake(<span class="pl-c1">true</span>);<span class="pl-k">if</span>(c.GetType()<span class="pl-k">!=</span>k.b2_staticBody){<span class="pl-k">for</span>(<span class="pl-k">var</span> m,r<span class="pl-k">=</span>c.m_contactList;r;r<span class="pl-k">=</span>r.<span class="pl-c1">next</span>)<span class="pl-k">if</span>(<span class="pl-k">!</span>(r.contact.m_flags<span class="pl-k">&amp;</span>l.e_islandFlag))<span class="pl-k">if</span>(<span class="pl-k">!</span>(r.contact.IsSensor()<span class="pl-k">==</span><span class="pl-c1">true</span><span class="pl-k">||</span>r.contact.IsEnabled()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">||</span>r.contact.IsTouching()<span class="pl-k">==</span><span class="pl-c1">false</span>)){g.AddContact(r.contact);r.contact.m_flags|<span class="pl-k">=</span>l.e_islandFlag;</td>
      </tr>
      <tr>
        <td id="L236" class="blob-num js-line-number" data-line-number="236"></td>
        <td id="LC236" class="blob-code blob-code-inner js-file-line">m<span class="pl-k">=</span>r.other;<span class="pl-k">if</span>(<span class="pl-k">!</span>(m.m_flags<span class="pl-k">&amp;</span>k.e_islandFlag)){b[f<span class="pl-k">++</span>]<span class="pl-k">=</span>m;m.m_flags|<span class="pl-k">=</span>k.e_islandFlag}}<span class="pl-k">for</span>(c<span class="pl-k">=</span>c.m_jointList;c;c<span class="pl-k">=</span>c.<span class="pl-c1">next</span>)<span class="pl-k">if</span>(c.joint.m_islandFlag<span class="pl-k">!=</span><span class="pl-c1">true</span>){m<span class="pl-k">=</span>c.other;<span class="pl-k">if</span>(m.IsActive()<span class="pl-k">!=</span><span class="pl-c1">false</span>){g.AddJoint(c.joint);c.joint.m_islandFlag<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span>(m.m_flags<span class="pl-k">&amp;</span>k.e_islandFlag)){b[f<span class="pl-k">++</span>]<span class="pl-k">=</span>m;m.m_flags|<span class="pl-k">=</span>k.e_islandFlag}}}}}g.Solve(a,<span class="pl-v">this</span>.m_gravity,<span class="pl-v">this</span>.m_allowSleep);<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>g.m_bodyCount;<span class="pl-k">++</span>f){c<span class="pl-k">=</span>g.m_bodies[f];<span class="pl-k">if</span>(c.GetType()<span class="pl-k">==</span>k.b2_staticBody)c.m_flags<span class="pl-k">&amp;=~</span>k.e_islandFlag}}<span class="pl-k">for</span>(f<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">&lt;</span>b.<span class="pl-c1">length</span>;<span class="pl-k">++</span>f){<span class="pl-k">if</span>(<span class="pl-k">!</span>b[f])<span class="pl-k">break</span>;b[f]<span class="pl-k">=</span><span class="pl-c1">null</span>}<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;c;c<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L237" class="blob-num js-line-number" data-line-number="237"></td>
        <td id="LC237" class="blob-code blob-code-inner js-file-line">c.m_next)c.IsAwake()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">||</span>c.IsActive()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">||</span>c.GetType()<span class="pl-k">!=</span>k.b2_staticBody<span class="pl-k">&amp;&amp;</span>c.SynchronizeFixtures();<span class="pl-v">this</span>.m_contactManager.FindNewContacts()};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveTOI</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c,g,b,e<span class="pl-k">=</span><span class="pl-v">this</span>.m_island;e.Initialize(<span class="pl-v">this</span>.m_bodyCount,A.b2_maxTOIContactsPerIsland,A.b2_maxTOIJointsPerIsland,<span class="pl-c1">null</span>,<span class="pl-v">this</span>.m_contactManager.m_contactListener,<span class="pl-v">this</span>.m_contactSolver);<span class="pl-k">var</span> f<span class="pl-k">=</span>h.s_queue;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;c;c<span class="pl-k">=</span>c.m_next){c.m_flags<span class="pl-k">&amp;=~</span>k.e_islandFlag;c.m_sweep.t0<span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactList;b;b<span class="pl-k">=</span>b.m_next)b.m_flags<span class="pl-k">&amp;=~</span>(l.e_toiFlag|</td>
      </tr>
      <tr>
        <td id="L238" class="blob-num js-line-number" data-line-number="238"></td>
        <td id="LC238" class="blob-code blob-code-inner js-file-line">l.e_islandFlag);<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-v">this</span>.m_jointList;b;b<span class="pl-k">=</span>b.m_next)b.m_islandFlag<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">for</span>(;;){<span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-c1">null</span>,r<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-v">this</span>.m_contactList;b;b<span class="pl-k">=</span>b.m_next)<span class="pl-k">if</span>(<span class="pl-k">!</span>(b.IsSensor()<span class="pl-k">==</span><span class="pl-c1">true</span><span class="pl-k">||</span>b.IsEnabled()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">||</span>b.IsContinuous()<span class="pl-k">==</span><span class="pl-c1">false</span>)){c<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">if</span>(b.m_flags<span class="pl-k">&amp;</span>l.e_toiFlag)c<span class="pl-k">=</span>b.m_toi;<span class="pl-k">else</span>{c<span class="pl-k">=</span>b.m_fixtureA;g<span class="pl-k">=</span>b.m_fixtureB;c<span class="pl-k">=</span>c.m_body;g<span class="pl-k">=</span>g.m_body;<span class="pl-k">if</span>((c.GetType()<span class="pl-k">!=</span>k.b2_dynamicBody<span class="pl-k">||</span>c.IsAwake()<span class="pl-k">==</span><span class="pl-c1">false</span>)<span class="pl-k">&amp;&amp;</span>(g.GetType()<span class="pl-k">!=</span>k.b2_dynamicBody<span class="pl-k">||</span>g.IsAwake()<span class="pl-k">==</span><span class="pl-c1">false</span>))<span class="pl-k">continue</span>;<span class="pl-k">var</span> s<span class="pl-k">=</span>c.m_sweep.t0;<span class="pl-k">if</span>(c.m_sweep.t0<span class="pl-k">&lt;</span>g.m_sweep.t0){s<span class="pl-k">=</span>g.m_sweep.t0;c.m_sweep.Advance(s)}<span class="pl-k">else</span> <span class="pl-k">if</span>(g.m_sweep.t0<span class="pl-k">&lt;</span></td>
      </tr>
      <tr>
        <td id="L239" class="blob-num js-line-number" data-line-number="239"></td>
        <td id="LC239" class="blob-code blob-code-inner js-file-line">c.m_sweep.t0){s<span class="pl-k">=</span>c.m_sweep.t0;g.m_sweep.Advance(s)}c<span class="pl-k">=</span>b.ComputeTOI(c.m_sweep,g.m_sweep);A.b2Assert(<span class="pl-c1">0</span><span class="pl-k">&lt;=</span>c<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">&lt;=</span><span class="pl-c1">1</span>);<span class="pl-k">if</span>(c<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>c<span class="pl-k">&lt;</span><span class="pl-c1">1</span>){c<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>c)<span class="pl-k">*</span>s<span class="pl-k">+</span>c;<span class="pl-k">if</span>(c<span class="pl-k">&gt;</span><span class="pl-c1">1</span>)c<span class="pl-k">=</span><span class="pl-c1">1</span>}b.m_toi<span class="pl-k">=</span>c;b.m_flags|<span class="pl-k">=</span>l.e_toiFlag}<span class="pl-k">if</span>(<span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span><span class="pl-k">&lt;</span>c<span class="pl-k">&amp;&amp;</span>c<span class="pl-k">&lt;</span>r){m<span class="pl-k">=</span>b;r<span class="pl-k">=</span>c}}<span class="pl-k">if</span>(m<span class="pl-k">==</span><span class="pl-c1">null</span><span class="pl-k">||</span><span class="pl-c1">1</span><span class="pl-k">-</span><span class="pl-c1">100</span><span class="pl-k">*</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span><span class="pl-k">&lt;</span>r)<span class="pl-k">break</span>;c<span class="pl-k">=</span>m.m_fixtureA;g<span class="pl-k">=</span>m.m_fixtureB;c<span class="pl-k">=</span>c.m_body;g<span class="pl-k">=</span>g.m_body;h.s_backupA.Set(c.m_sweep);h.s_backupB.Set(g.m_sweep);c.Advance(r);g.Advance(r);m.Update(<span class="pl-v">this</span>.m_contactManager.m_contactListener);m.m_flags<span class="pl-k">&amp;=~</span>l.e_toiFlag;<span class="pl-k">if</span>(m.IsSensor()<span class="pl-k">==</span><span class="pl-c1">true</span><span class="pl-k">||</span>m.IsEnabled()<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L240" class="blob-num js-line-number" data-line-number="240"></td>
        <td id="LC240" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">false</span>){c.m_sweep.Set(h.s_backupA);g.m_sweep.Set(h.s_backupB);c.SynchronizeTransform();g.SynchronizeTransform()}<span class="pl-k">else</span> <span class="pl-k">if</span>(m.IsTouching()<span class="pl-k">!=</span><span class="pl-c1">false</span>){c<span class="pl-k">=</span>c;<span class="pl-k">if</span>(c.GetType()<span class="pl-k">!=</span>k.b2_dynamicBody)c<span class="pl-k">=</span>g;e.Clear();m<span class="pl-k">=</span>b<span class="pl-k">=</span><span class="pl-c1">0</span>;f[b<span class="pl-k">+</span>m<span class="pl-k">++</span>]<span class="pl-k">=</span>c;<span class="pl-k">for</span>(c.m_flags|<span class="pl-k">=</span>k.e_islandFlag;m<span class="pl-k">&gt;</span><span class="pl-c1">0</span>;){c<span class="pl-k">=</span>f[b<span class="pl-k">++</span>];<span class="pl-k">--</span>m;e.AddBody(c);c.IsAwake()<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span>c.SetAwake(<span class="pl-c1">true</span>);<span class="pl-k">if</span>(c.GetType()<span class="pl-k">==</span>k.b2_dynamicBody){<span class="pl-k">for</span>(g<span class="pl-k">=</span>c.m_contactList;g;g<span class="pl-k">=</span>g.<span class="pl-c1">next</span>){<span class="pl-k">if</span>(e.m_contactCount<span class="pl-k">==</span>e.m_contactCapacity)<span class="pl-k">break</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span>(g.contact.m_flags<span class="pl-k">&amp;</span>l.e_islandFlag))<span class="pl-k">if</span>(<span class="pl-k">!</span>(g.contact.IsSensor()<span class="pl-k">==</span><span class="pl-c1">true</span><span class="pl-k">||</span>g.contact.IsEnabled()<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L241" class="blob-num js-line-number" data-line-number="241"></td>
        <td id="LC241" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">false</span><span class="pl-k">||</span>g.contact.IsTouching()<span class="pl-k">==</span><span class="pl-c1">false</span>)){e.AddContact(g.contact);g.contact.m_flags|<span class="pl-k">=</span>l.e_islandFlag;s<span class="pl-k">=</span>g.other;<span class="pl-k">if</span>(<span class="pl-k">!</span>(s.m_flags<span class="pl-k">&amp;</span>k.e_islandFlag)){<span class="pl-k">if</span>(s.GetType()<span class="pl-k">!=</span>k.b2_staticBody){s.Advance(r);s.SetAwake(<span class="pl-c1">true</span>)}f[b<span class="pl-k">+</span>m]<span class="pl-k">=</span>s;<span class="pl-k">++</span>m;s.m_flags|<span class="pl-k">=</span>k.e_islandFlag}}}<span class="pl-k">for</span>(c<span class="pl-k">=</span>c.m_jointList;c;c<span class="pl-k">=</span>c.<span class="pl-c1">next</span>)<span class="pl-k">if</span>(e.m_jointCount<span class="pl-k">!=</span>e.m_jointCapacity)<span class="pl-k">if</span>(c.joint.m_islandFlag<span class="pl-k">!=</span><span class="pl-c1">true</span>){s<span class="pl-k">=</span>c.other;<span class="pl-k">if</span>(s.IsActive()<span class="pl-k">!=</span><span class="pl-c1">false</span>){e.AddJoint(c.joint);c.joint.m_islandFlag<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-k">if</span>(<span class="pl-k">!</span>(s.m_flags<span class="pl-k">&amp;</span>k.e_islandFlag)){<span class="pl-k">if</span>(s.GetType()<span class="pl-k">!=</span>k.b2_staticBody){s.Advance(r);s.SetAwake(<span class="pl-c1">true</span>)}f[b<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L242" class="blob-num js-line-number" data-line-number="242"></td>
        <td id="LC242" class="blob-code blob-code-inner js-file-line">m]<span class="pl-k">=</span>s;<span class="pl-k">++</span>m;s.m_flags|<span class="pl-k">=</span>k.e_islandFlag}}}}}b<span class="pl-k">=</span>h.s_timestep;b.warmStarting<span class="pl-k">=</span><span class="pl-c1">false</span>;b.dt<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>r)<span class="pl-k">*</span>a.dt;b.inv_dt<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>b.dt;b.dtRatio<span class="pl-k">=</span><span class="pl-c1">0</span>;b.velocityIterations<span class="pl-k">=</span>a.velocityIterations;b.positionIterations<span class="pl-k">=</span>a.positionIterations;e.SolveTOI(b);<span class="pl-k">for</span>(r<span class="pl-k">=</span>r<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">&lt;</span>e.m_bodyCount;<span class="pl-k">++</span>r){c<span class="pl-k">=</span>e.m_bodies[r];c.m_flags<span class="pl-k">&amp;=~</span>k.e_islandFlag;<span class="pl-k">if</span>(c.IsAwake()<span class="pl-k">!=</span><span class="pl-c1">false</span>)<span class="pl-k">if</span>(c.GetType()<span class="pl-k">==</span>k.b2_dynamicBody){c.SynchronizeFixtures();<span class="pl-k">for</span>(g<span class="pl-k">=</span>c.m_contactList;g;g<span class="pl-k">=</span>g.<span class="pl-c1">next</span>)g.contact.m_flags<span class="pl-k">&amp;=~</span>l.e_toiFlag}}<span class="pl-k">for</span>(r<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">&lt;</span>e.m_contactCount;<span class="pl-k">++</span>r){b<span class="pl-k">=</span>e.m_contacts[r];b.m_flags<span class="pl-k">&amp;=~</span>(l.e_toiFlag|</td>
      </tr>
      <tr>
        <td id="L243" class="blob-num js-line-number" data-line-number="243"></td>
        <td id="LC243" class="blob-code blob-code-inner js-file-line">l.e_islandFlag)}<span class="pl-k">for</span>(r<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">&lt;</span>e.m_jointCount;<span class="pl-k">++</span>r){b<span class="pl-k">=</span>e.m_joints[r];b.m_islandFlag<span class="pl-k">=</span><span class="pl-c1">false</span>}<span class="pl-v">this</span>.m_contactManager.FindNewContacts()}}};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>){<span class="pl-k">var</span> c<span class="pl-k">=</span>a.GetBodyA(),g<span class="pl-k">=</span>a.GetBodyB(),b<span class="pl-k">=</span>c.m_xf.position,e<span class="pl-k">=</span>g.m_xf.position,f<span class="pl-k">=</span>a.GetAnchorA(),m<span class="pl-k">=</span>a.GetAnchorB(),r<span class="pl-k">=</span>h.s_jointColor;<span class="pl-k">switch</span>(a.m_type){<span class="pl-k">case</span> q.e_distanceJoint<span class="pl-k">:</span><span class="pl-v">this</span>.m_debugDraw.DrawSegment(f,m,r);<span class="pl-k">break</span>;<span class="pl-k">case</span> q.e_pulleyJoint<span class="pl-k">:</span>c<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> n<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">null</span>;a<span class="pl-k">=</span>c.GetGroundAnchorA();c<span class="pl-k">=</span>c.GetGroundAnchorB();<span class="pl-v">this</span>.m_debugDraw.DrawSegment(a,f,r);<span class="pl-v">this</span>.m_debugDraw.DrawSegment(c,</td>
      </tr>
      <tr>
        <td id="L244" class="blob-num js-line-number" data-line-number="244"></td>
        <td id="LC244" class="blob-code blob-code-inner js-file-line">m,r);<span class="pl-v">this</span>.m_debugDraw.DrawSegment(a,c,r);<span class="pl-k">break</span>;<span class="pl-k">case</span> q.e_mouseJoint<span class="pl-k">:</span><span class="pl-v">this</span>.m_debugDraw.DrawSegment(f,m,r);<span class="pl-k">break</span>;<span class="pl-k">default</span><span class="pl-k">:</span>c<span class="pl-k">!=</span><span class="pl-v">this</span>.m_groundBody<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.m_debugDraw.DrawSegment(b,f,r);<span class="pl-v">this</span>.m_debugDraw.DrawSegment(f,m,r);g<span class="pl-k">!=</span><span class="pl-v">this</span>.m_groundBody<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.m_debugDraw.DrawSegment(e,m,r)}};<span class="pl-c1">h</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawShape</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">a</span>,<span class="pl-smi">c</span>,<span class="pl-smi">g</span>){<span class="pl-k">switch</span>(a.m_type){<span class="pl-k">case</span> Y.e_circleShape<span class="pl-k">:</span><span class="pl-k">var</span> b<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> M<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_debugDraw.DrawSolidCircle(F.MulX(c,b.m_p),b.m_radius,c.R.col1,g);<span class="pl-k">break</span>;<span class="pl-k">case</span> Y.e_polygonShape<span class="pl-k">:</span>b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> W<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">null</span>;</td>
      </tr>
      <tr>
        <td id="L245" class="blob-num js-line-number" data-line-number="245"></td>
        <td id="LC245" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(b.GetVertexCount());<span class="pl-k">var</span> e<span class="pl-k">=</span>b.GetVertices(),f<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(a);<span class="pl-k">for</span>(b<span class="pl-k">=</span><span class="pl-c1">0</span>;b<span class="pl-k">&lt;</span>a;<span class="pl-k">++</span>b)f[b]<span class="pl-k">=</span>F.MulX(c,e[b]);<span class="pl-v">this</span>.m_debugDraw.DrawSolidPolygon(f,a,g);<span class="pl-k">break</span>;<span class="pl-k">case</span> Y.e_edgeShape<span class="pl-k">:</span>b<span class="pl-k">=</span>a <span class="pl-k">instanceof</span> L<span class="pl-k">?</span>a<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_debugDraw.DrawSegment(F.MulX(c,b.GetVertex1()),F.MulX(c,b.GetVertex2()),g)}};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Dynamics.b2World.s_timestep2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">d</span>;Box2D.Dynamics.b2World.s_xf<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>;Box2D.Dynamics.b2World.s_backupA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;Box2D.Dynamics.b2World.s_backupB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;Box2D.Dynamics.b2World.s_timestep<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">d</span>;</td>
      </tr>
      <tr>
        <td id="L246" class="blob-num js-line-number" data-line-number="246"></td>
        <td id="LC246" class="blob-code blob-code-inner js-file-line">Box2D.Dynamics.b2World.s_queue<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>;Box2D.Dynamics.b2World.s_jointColor<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">0.8</span>,<span class="pl-c1">0.8</span>);Box2D.Dynamics.b2World.e_newFixture<span class="pl-k">=</span><span class="pl-c1">1</span>;Box2D.Dynamics.b2World.e_locked<span class="pl-k">=</span><span class="pl-c1">2</span>})})();</td>
      </tr>
      <tr>
        <td id="L247" class="blob-num js-line-number" data-line-number="247"></td>
        <td id="LC247" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> F<span class="pl-k">=</span>Box2D.Collision.Shapes.b2CircleShape,G<span class="pl-k">=</span>Box2D.Collision.Shapes.b2EdgeShape,K<span class="pl-k">=</span>Box2D.Collision.Shapes.b2PolygonShape,y<span class="pl-k">=</span>Box2D.Collision.Shapes.b2Shape,w<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2CircleContact,A<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2Contact,U<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2ContactConstraint,p<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2ContactConstraintPoint,B<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2ContactEdge,Q<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2ContactFactory,V<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2ContactRegister,M<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2ContactResult,</td>
      </tr>
      <tr>
        <td id="L248" class="blob-num js-line-number" data-line-number="248"></td>
        <td id="LC248" class="blob-code blob-code-inner js-file-line">L<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2ContactSolver,I<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2EdgeAndCircleContact,W<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2NullContact,Y<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2PolyAndCircleContact,k<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2PolyAndEdgeContact,z<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2PolygonContact,u<span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2PositionSolverManifold,D<span class="pl-k">=</span>Box2D.Dynamics.b2Body,H<span class="pl-k">=</span>Box2D.Dynamics.b2TimeStep,O<span class="pl-k">=</span>Box2D.Common.b2Settings,E<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Mat22,R<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Math,N<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Vec2,S<span class="pl-k">=</span>Box2D.Collision.b2Collision,</td>
      </tr>
      <tr>
        <td id="L249" class="blob-num js-line-number" data-line-number="249"></td>
        <td id="LC249" class="blob-code blob-code-inner js-file-line">aa<span class="pl-k">=</span>Box2D.Collision.b2ContactID,Z<span class="pl-k">=</span>Box2D.Collision.b2Manifold,d<span class="pl-k">=</span>Box2D.Collision.b2TimeOfImpact,h<span class="pl-k">=</span>Box2D.Collision.b2TOIInput,l<span class="pl-k">=</span>Box2D.Collision.b2WorldManifold;Box2D.inherit(w,Box2D.Dynamics.Contacts.b2Contact);<span class="pl-c1">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2Contact.<span class="pl-c1">prototype</span>;<span class="pl-c1">w</span>.<span class="pl-en">b2CircleContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Contacts.b2Contact.b2Contact.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)};<span class="pl-c1">w</span>.<span class="pl-en">Create</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">w</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>){<span class="pl-v">this</span>.__super.<span class="pl-c1">Reset</span>.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,j,o)};<span class="pl-c1">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Evaluate</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L250" class="blob-num js-line-number" data-line-number="250"></td>
        <td id="LC250" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureA.GetBody(),o<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureB.GetBody();S.CollideCircles(<span class="pl-v">this</span>.m_manifold,<span class="pl-v">this</span>.m_fixtureA.GetShape()<span class="pl-k">instanceof</span> F<span class="pl-k">?</span><span class="pl-v">this</span>.m_fixtureA.GetShape()<span class="pl-k">:</span><span class="pl-c1">null</span>,j.m_xf,<span class="pl-v">this</span>.m_fixtureB.GetShape()<span class="pl-k">instanceof</span> F<span class="pl-k">?</span><span class="pl-v">this</span>.m_fixtureB.GetShape()<span class="pl-k">:</span><span class="pl-c1">null</span>,o.m_xf)};<span class="pl-c1">A</span>.<span class="pl-en">b2Contact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_nodeA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>;<span class="pl-v">this</span>.m_nodeB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>;<span class="pl-v">this</span>.m_manifold<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Z</span>;<span class="pl-v">this</span>.m_oldManifold<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Z</span>};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetManifold</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_manifold};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetWorldManifold</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureA.GetBody(),</td>
      </tr>
      <tr>
        <td id="L251" class="blob-num js-line-number" data-line-number="251"></td>
        <td id="LC251" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureB.GetBody(),n<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureA.GetShape(),a<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureB.GetShape();j.Initialize(<span class="pl-v">this</span>.m_manifold,o.GetTransform(),n.m_radius,q.GetTransform(),a.m_radius)};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsTouching</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>A.e_touchingFlag)<span class="pl-k">==</span>A.e_touchingFlag};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsContinuous</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>A.e_continuousFlag)<span class="pl-k">==</span>A.e_continuousFlag};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetSensor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){<span class="pl-k">if</span>(j)<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>A.e_sensorFlag;<span class="pl-k">else</span> <span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;=~</span>A.e_sensorFlag};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsSensor</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span></td>
      </tr>
      <tr>
        <td id="L252" class="blob-num js-line-number" data-line-number="252"></td>
        <td id="LC252" class="blob-code blob-code-inner js-file-line">A.e_sensorFlag)<span class="pl-k">==</span>A.e_sensorFlag};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetEnabled</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){<span class="pl-k">if</span>(j)<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>A.e_enabledFlag;<span class="pl-k">else</span> <span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;=~</span>A.e_enabledFlag};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsEnabled</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>A.e_enabledFlag)<span class="pl-k">==</span>A.e_enabledFlag};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNext</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_next};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFixtureA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_fixtureA};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFixtureB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_fixtureB};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">FlagForFiltering</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>A.e_filterFlag};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Contact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};</td>
      </tr>
      <tr>
        <td id="L253" class="blob-num js-line-number" data-line-number="253"></td>
        <td id="LC253" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>){<span class="pl-k">if</span>(j<span class="pl-k">===</span><span class="pl-c1">undefined</span>)j<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(o<span class="pl-k">===</span><span class="pl-c1">undefined</span>)o<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_flags<span class="pl-k">=</span>A.e_enabledFlag;<span class="pl-k">if</span>(<span class="pl-k">!</span>j<span class="pl-k">||!</span>o)<span class="pl-v">this</span>.m_fixtureB<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureA<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">else</span>{<span class="pl-k">if</span>(j.IsSensor()<span class="pl-k">||</span>o.IsSensor())<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>A.e_sensorFlag;<span class="pl-k">var</span> q<span class="pl-k">=</span>j.GetBody(),n<span class="pl-k">=</span>o.GetBody();<span class="pl-k">if</span>(q.GetType()<span class="pl-k">!=</span>D.b2_dynamicBody<span class="pl-k">||</span>q.IsBullet()<span class="pl-k">||</span>n.GetType()<span class="pl-k">!=</span>D.b2_dynamicBody<span class="pl-k">||</span>n.IsBullet())<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>A.e_continuousFlag;<span class="pl-v">this</span>.m_fixtureA<span class="pl-k">=</span>j;<span class="pl-v">this</span>.m_fixtureB<span class="pl-k">=</span>o;<span class="pl-v">this</span>.m_manifold.m_pointCount<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_next<span class="pl-k">=</span><span class="pl-v">this</span>.m_prev<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_nodeA.contact<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_nodeA.prev<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L254" class="blob-num js-line-number" data-line-number="254"></td>
        <td id="LC254" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_nodeA.<span class="pl-c1">next</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_nodeA.other<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_nodeB.contact<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_nodeB.prev<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_nodeB.<span class="pl-c1">next</span><span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_nodeB.other<span class="pl-k">=</span><span class="pl-c1">null</span>}};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Update</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-v">this</span>.m_oldManifold;<span class="pl-v">this</span>.m_oldManifold<span class="pl-k">=</span><span class="pl-v">this</span>.m_manifold;<span class="pl-v">this</span>.m_manifold<span class="pl-k">=</span>o;<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>A.e_enabledFlag;<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-c1">false</span>;o<span class="pl-k">=</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>A.e_touchingFlag)<span class="pl-k">==</span>A.e_touchingFlag;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureA.m_body,a<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureB.m_body,c<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureA.m_aabb.TestOverlap(<span class="pl-v">this</span>.m_fixtureB.m_aabb);<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>A.e_sensorFlag){<span class="pl-k">if</span>(c){q<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L255" class="blob-num js-line-number" data-line-number="255"></td>
        <td id="LC255" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_fixtureA.GetShape();c<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureB.GetShape();n<span class="pl-k">=</span>n.GetTransform();a<span class="pl-k">=</span>a.GetTransform();q<span class="pl-k">=</span>y.TestOverlap(q,n,c,a)}<span class="pl-v">this</span>.m_manifold.m_pointCount<span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">else</span>{<span class="pl-k">if</span>(n.GetType()<span class="pl-k">!=</span>D.b2_dynamicBody<span class="pl-k">||</span>n.IsBullet()<span class="pl-k">||</span>a.GetType()<span class="pl-k">!=</span>D.b2_dynamicBody<span class="pl-k">||</span>a.IsBullet())<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>A.e_continuousFlag;<span class="pl-k">else</span> <span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;=~</span>A.e_continuousFlag;<span class="pl-k">if</span>(c){<span class="pl-v">this</span>.Evaluate();q<span class="pl-k">=</span><span class="pl-v">this</span>.m_manifold.m_pointCount<span class="pl-k">&gt;</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_manifold.m_pointCount;<span class="pl-k">++</span>c){<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-v">this</span>.m_manifold.m_points[c];g.m_normalImpulse<span class="pl-k">=</span><span class="pl-c1">0</span>;g.m_tangentImpulse<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> b<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L256" class="blob-num js-line-number" data-line-number="256"></td>
        <td id="LC256" class="blob-code blob-code-inner js-file-line">g.m_id,e<span class="pl-k">=</span><span class="pl-c1">0</span>;e<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_oldManifold.m_pointCount;<span class="pl-k">++</span>e){<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-v">this</span>.m_oldManifold.m_points[e];<span class="pl-k">if</span>(f.m_id.key<span class="pl-k">==</span>b.key){g.m_normalImpulse<span class="pl-k">=</span>f.m_normalImpulse;g.m_tangentImpulse<span class="pl-k">=</span>f.m_tangentImpulse;<span class="pl-k">break</span>}}}}<span class="pl-k">else</span> <span class="pl-v">this</span>.m_manifold.m_pointCount<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(q<span class="pl-k">!=</span>o){n.SetAwake(<span class="pl-c1">true</span>);a.SetAwake(<span class="pl-c1">true</span>)}}<span class="pl-k">if</span>(q)<span class="pl-v">this</span>.m_flags|<span class="pl-k">=</span>A.e_touchingFlag;<span class="pl-k">else</span> <span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;=~</span>A.e_touchingFlag;o<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span>q<span class="pl-k">==</span><span class="pl-c1">true</span><span class="pl-k">&amp;&amp;</span>j.BeginContact(<span class="pl-v">this</span>);o<span class="pl-k">==</span><span class="pl-c1">true</span><span class="pl-k">&amp;&amp;</span>q<span class="pl-k">==</span><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span>j.EndContact(<span class="pl-v">this</span>);(<span class="pl-v">this</span>.m_flags<span class="pl-k">&amp;</span>A.e_sensorFlag)<span class="pl-k">==</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>j.PreSolve(<span class="pl-v">this</span>,<span class="pl-v">this</span>.m_oldManifold)};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Evaluate</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L257" class="blob-num js-line-number" data-line-number="257"></td>
        <td id="LC257" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ComputeTOI</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>){A.s_input.proxyA.Set(<span class="pl-v">this</span>.m_fixtureA.GetShape());A.s_input.proxyB.Set(<span class="pl-v">this</span>.m_fixtureB.GetShape());A.s_input.sweepA<span class="pl-k">=</span>j;A.s_input.sweepB<span class="pl-k">=</span>o;A.s_input.tolerance<span class="pl-k">=</span>O.b2_linearSlop;<span class="pl-k">return</span> d.TimeOfImpact(A.s_input)};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag<span class="pl-k">=</span><span class="pl-c1">1</span>;Box2D.Dynamics.Contacts.b2Contact.e_continuousFlag<span class="pl-k">=</span><span class="pl-c1">2</span>;Box2D.Dynamics.Contacts.b2Contact.e_islandFlag<span class="pl-k">=</span><span class="pl-c1">4</span>;Box2D.Dynamics.Contacts.b2Contact.e_toiFlag<span class="pl-k">=</span><span class="pl-c1">8</span>;Box2D.Dynamics.Contacts.b2Contact.e_touchingFlag<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L258" class="blob-num js-line-number" data-line-number="258"></td>
        <td id="LC258" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">16</span>;Box2D.Dynamics.Contacts.b2Contact.e_enabledFlag<span class="pl-k">=</span><span class="pl-c1">32</span>;Box2D.Dynamics.Contacts.b2Contact.e_filterFlag<span class="pl-k">=</span><span class="pl-c1">64</span>;Box2D.Dynamics.Contacts.b2Contact.s_input<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">h</span>});<span class="pl-c1">U</span>.<span class="pl-en">b2ContactConstraint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.localPlaneNormal<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;<span class="pl-v">this</span>.localPoint<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;<span class="pl-v">this</span>.normal<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;<span class="pl-v">this</span>.normalMass<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">E</span>;<span class="pl-v">this</span>.K<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">E</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2ContactConstraint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.points<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(O.b2_maxManifoldPoints);<span class="pl-k">for</span>(<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span>O.b2_maxManifoldPoints;j<span class="pl-k">++</span>)<span class="pl-v">this</span>.points[j]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">p</span>};<span class="pl-c1">p</span>.<span class="pl-en">b2ContactConstraintPoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.localPoint<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;</td>
      </tr>
      <tr>
        <td id="L259" class="blob-num js-line-number" data-line-number="259"></td>
        <td id="LC259" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.rA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;<span class="pl-v">this</span>.rB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>};<span class="pl-c1">B</span>.<span class="pl-en">b2ContactEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">Q</span>.<span class="pl-en">b2ContactFactory</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2ContactFactory</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){<span class="pl-v">this</span>.m_allocator<span class="pl-k">=</span>j;<span class="pl-v">this</span>.InitializeRegisters()};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddType</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>,<span class="pl-smi">q</span>,<span class="pl-smi">n</span>){<span class="pl-k">if</span>(q<span class="pl-k">===</span><span class="pl-c1">undefined</span>)q<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(n<span class="pl-k">===</span><span class="pl-c1">undefined</span>)n<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_registers[q][n].createFcn<span class="pl-k">=</span>j;<span class="pl-v">this</span>.m_registers[q][n].destroyFcn<span class="pl-k">=</span>o;<span class="pl-v">this</span>.m_registers[q][n].primary<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-k">if</span>(q<span class="pl-k">!=</span>n){<span class="pl-v">this</span>.m_registers[n][q].createFcn<span class="pl-k">=</span>j;<span class="pl-v">this</span>.m_registers[n][q].destroyFcn<span class="pl-k">=</span>o;<span class="pl-v">this</span>.m_registers[n][q].primary<span class="pl-k">=</span><span class="pl-c1">false</span>}};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitializeRegisters</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L260" class="blob-num js-line-number" data-line-number="260"></td>
        <td id="LC260" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_registers<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(y.e_shapeTypeCount);<span class="pl-k">for</span>(<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span>y.e_shapeTypeCount;j<span class="pl-k">++</span>){<span class="pl-v">this</span>.m_registers[j]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(y.e_shapeTypeCount);<span class="pl-k">for</span>(<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-c1">0</span>;o<span class="pl-k">&lt;</span>y.e_shapeTypeCount;o<span class="pl-k">++</span>)<span class="pl-v">this</span>.m_registers[j][o]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>}<span class="pl-v">this</span>.AddType(w.Create,w.Destroy,y.e_circleShape,y.e_circleShape);<span class="pl-v">this</span>.AddType(Y.Create,Y.Destroy,y.e_polygonShape,y.e_circleShape);<span class="pl-v">this</span>.AddType(z.Create,z.Destroy,y.e_polygonShape,y.e_polygonShape);<span class="pl-v">this</span>.AddType(I.Create,I.Destroy,y.e_edgeShape,y.e_circleShape);<span class="pl-v">this</span>.AddType(k.Create,k.Destroy,</td>
      </tr>
      <tr>
        <td id="L261" class="blob-num js-line-number" data-line-number="261"></td>
        <td id="LC261" class="blob-code blob-code-inner js-file-line">y.e_polygonShape,y.e_edgeShape)};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>){<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(j.GetType()),n<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(o.GetType());q<span class="pl-k">=</span><span class="pl-v">this</span>.m_registers[q][n];<span class="pl-k">if</span>(q.pool){n<span class="pl-k">=</span>q.pool;q.pool<span class="pl-k">=</span>n.m_next;q.poolCount<span class="pl-k">--</span>;n.<span class="pl-c1">Reset</span>(j,o);<span class="pl-k">return</span> n}n<span class="pl-k">=</span>q.createFcn;<span class="pl-k">if</span>(n<span class="pl-k">!=</span><span class="pl-c1">null</span>){<span class="pl-k">if</span>(q.primary){n<span class="pl-k">=</span>n(<span class="pl-v">this</span>.m_allocator);n.<span class="pl-c1">Reset</span>(j,o)}<span class="pl-k">else</span>{n<span class="pl-k">=</span>n(<span class="pl-v">this</span>.m_allocator);n.<span class="pl-c1">Reset</span>(o,j)}<span class="pl-k">return</span> n}<span class="pl-k">else</span> <span class="pl-k">return</span> <span class="pl-c1">null</span>};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){<span class="pl-k">if</span>(j.m_manifold.m_pointCount<span class="pl-k">&gt;</span><span class="pl-c1">0</span>){j.m_fixtureA.m_body.SetAwake(<span class="pl-c1">true</span>);j.m_fixtureB.m_body.SetAwake(<span class="pl-c1">true</span>)}<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(j.m_fixtureA.GetType()),</td>
      </tr>
      <tr>
        <td id="L262" class="blob-num js-line-number" data-line-number="262"></td>
        <td id="LC262" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(j.m_fixtureB.GetType());o<span class="pl-k">=</span><span class="pl-v">this</span>.m_registers[o][q];o.poolCount<span class="pl-k">++</span>;j.m_next<span class="pl-k">=</span>o.pool;o.pool<span class="pl-k">=</span>j;o<span class="pl-k">=</span>o.destroyFcn;o(j,<span class="pl-v">this</span>.m_allocator)};<span class="pl-c1">V</span>.<span class="pl-en">b2ContactRegister</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">M</span>.<span class="pl-en">b2ContactResult</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.position<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;<span class="pl-v">this</span>.normal<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;<span class="pl-v">this</span>.<span class="pl-c1">id</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">aa</span>};<span class="pl-c1">L</span>.<span class="pl-en">b2ContactSolver</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_step<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">H</span>;<span class="pl-v">this</span>.m_constraints<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2ContactSolver</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>,<span class="pl-smi">q</span>,<span class="pl-smi">n</span>){<span class="pl-k">if</span>(q<span class="pl-k">===</span><span class="pl-c1">undefined</span>)q<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> a;<span class="pl-v">this</span>.m_step.Set(j);<span class="pl-v">this</span>.m_allocator<span class="pl-k">=</span>n;j<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-v">this</span>.m_constraintCount<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L263" class="blob-num js-line-number" data-line-number="263"></td>
        <td id="LC263" class="blob-code blob-code-inner js-file-line">q;<span class="pl-v">this</span>.m_constraints.<span class="pl-c1">length</span><span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_constraintCount;)<span class="pl-v">this</span>.m_constraints[<span class="pl-v">this</span>.m_constraints.<span class="pl-c1">length</span>]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>;<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span>q;<span class="pl-k">++</span>j){a<span class="pl-k">=</span>o[j];n<span class="pl-k">=</span>a.m_fixtureA;<span class="pl-k">var</span> c<span class="pl-k">=</span>a.m_fixtureB,g<span class="pl-k">=</span>n.m_shape.m_radius,b<span class="pl-k">=</span>c.m_shape.m_radius,e<span class="pl-k">=</span>n.m_body,f<span class="pl-k">=</span>c.m_body,m<span class="pl-k">=</span>a.GetManifold(),r<span class="pl-k">=</span>O.b2MixFriction(n.GetFriction(),c.GetFriction()),s<span class="pl-k">=</span>O.b2MixRestitution(n.GetRestitution(),c.GetRestitution()),v<span class="pl-k">=</span>e.m_linearVelocity.<span class="pl-c1">x</span>,t<span class="pl-k">=</span>e.m_linearVelocity.<span class="pl-c1">y</span>,x<span class="pl-k">=</span>f.m_linearVelocity.<span class="pl-c1">x</span>,C<span class="pl-k">=</span>f.m_linearVelocity.<span class="pl-c1">y</span>,J<span class="pl-k">=</span>e.m_angularVelocity,T<span class="pl-k">=</span>f.m_angularVelocity;O.b2Assert(m.m_pointCount<span class="pl-k">&gt;</span></td>
      </tr>
      <tr>
        <td id="L264" class="blob-num js-line-number" data-line-number="264"></td>
        <td id="LC264" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>);L.s_worldManifold.Initialize(m,e.m_xf,g,f.m_xf,b);c<span class="pl-k">=</span>L.s_worldManifold.m_normal.<span class="pl-c1">x</span>;a<span class="pl-k">=</span>L.s_worldManifold.m_normal.<span class="pl-c1">y</span>;n<span class="pl-k">=</span><span class="pl-v">this</span>.m_constraints[j];n.bodyA<span class="pl-k">=</span>e;n.bodyB<span class="pl-k">=</span>f;n.manifold<span class="pl-k">=</span>m;n.normal.<span class="pl-c1">x</span><span class="pl-k">=</span>c;n.normal.<span class="pl-c1">y</span><span class="pl-k">=</span>a;n.pointCount<span class="pl-k">=</span>m.m_pointCount;n.friction<span class="pl-k">=</span>r;n.restitution<span class="pl-k">=</span>s;n.localPlaneNormal.<span class="pl-c1">x</span><span class="pl-k">=</span>m.m_localPlaneNormal.<span class="pl-c1">x</span>;n.localPlaneNormal.<span class="pl-c1">y</span><span class="pl-k">=</span>m.m_localPlaneNormal.<span class="pl-c1">y</span>;n.localPoint.<span class="pl-c1">x</span><span class="pl-k">=</span>m.m_localPoint.<span class="pl-c1">x</span>;n.localPoint.<span class="pl-c1">y</span><span class="pl-k">=</span>m.m_localPoint.<span class="pl-c1">y</span>;n.radius<span class="pl-k">=</span>g<span class="pl-k">+</span>b;n.<span class="pl-c1">type</span><span class="pl-k">=</span>m.m_type;<span class="pl-k">for</span>(g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">&lt;</span>n.pointCount;<span class="pl-k">++</span>g){r<span class="pl-k">=</span>m.m_points[g];b<span class="pl-k">=</span>n.points[g];b.normalImpulse<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L265" class="blob-num js-line-number" data-line-number="265"></td>
        <td id="LC265" class="blob-code blob-code-inner js-file-line">r.m_normalImpulse;b.tangentImpulse<span class="pl-k">=</span>r.m_tangentImpulse;b.localPoint.SetV(r.m_localPoint);r<span class="pl-k">=</span>b.rA.<span class="pl-c1">x</span><span class="pl-k">=</span>L.s_worldManifold.m_points[g].<span class="pl-c1">x</span><span class="pl-k">-</span>e.m_sweep.c.<span class="pl-c1">x</span>;s<span class="pl-k">=</span>b.rA.<span class="pl-c1">y</span><span class="pl-k">=</span>L.s_worldManifold.m_points[g].<span class="pl-c1">y</span><span class="pl-k">-</span>e.m_sweep.c.<span class="pl-c1">y</span>;<span class="pl-k">var</span> P<span class="pl-k">=</span>b.rB.<span class="pl-c1">x</span><span class="pl-k">=</span>L.s_worldManifold.m_points[g].<span class="pl-c1">x</span><span class="pl-k">-</span>f.m_sweep.c.<span class="pl-c1">x</span>,X<span class="pl-k">=</span>b.rB.<span class="pl-c1">y</span><span class="pl-k">=</span>L.s_worldManifold.m_points[g].<span class="pl-c1">y</span><span class="pl-k">-</span>f.m_sweep.c.<span class="pl-c1">y</span>,$<span class="pl-k">=</span>r<span class="pl-k">*</span>a<span class="pl-k">-</span>s<span class="pl-k">*</span>c,ba<span class="pl-k">=</span>P<span class="pl-k">*</span>a<span class="pl-k">-</span>X<span class="pl-k">*</span>c;$<span class="pl-k">*=</span>$;ba<span class="pl-k">*=</span>ba;b.normalMass<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(e.m_invMass<span class="pl-k">+</span>f.m_invMass<span class="pl-k">+</span>e.m_invI<span class="pl-k">*</span>$<span class="pl-k">+</span>f.m_invI<span class="pl-k">*</span>ba);<span class="pl-k">var</span> ca<span class="pl-k">=</span>e.m_mass<span class="pl-k">*</span>e.m_invMass<span class="pl-k">+</span>f.m_mass<span class="pl-k">*</span>f.m_invMass;ca<span class="pl-k">+=</span>e.m_mass<span class="pl-k">*</span>e.m_invI<span class="pl-k">*</span>$<span class="pl-k">+</span>f.m_mass<span class="pl-k">*</span>f.m_invI<span class="pl-k">*</span>ba;</td>
      </tr>
      <tr>
        <td id="L266" class="blob-num js-line-number" data-line-number="266"></td>
        <td id="LC266" class="blob-code blob-code-inner js-file-line">b.equalizedMass<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>ca;ba<span class="pl-k">=</span>a;ca<span class="pl-k">=-</span>c;$<span class="pl-k">=</span>r<span class="pl-k">*</span>ca<span class="pl-k">-</span>s<span class="pl-k">*</span>ba;ba<span class="pl-k">=</span>P<span class="pl-k">*</span>ca<span class="pl-k">-</span>X<span class="pl-k">*</span>ba;$<span class="pl-k">*=</span>$;ba<span class="pl-k">*=</span>ba;b.tangentMass<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(e.m_invMass<span class="pl-k">+</span>f.m_invMass<span class="pl-k">+</span>e.m_invI<span class="pl-k">*</span>$<span class="pl-k">+</span>f.m_invI<span class="pl-k">*</span>ba);b.velocityBias<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">=</span>n.normal.<span class="pl-c1">x</span><span class="pl-k">*</span>(x<span class="pl-k">+-</span>T<span class="pl-k">*</span>X<span class="pl-k">-</span>v<span class="pl-k">-</span> <span class="pl-k">-</span>J<span class="pl-k">*</span>s)<span class="pl-k">+</span>n.normal.<span class="pl-c1">y</span><span class="pl-k">*</span>(C<span class="pl-k">+</span>T<span class="pl-k">*</span>P<span class="pl-k">-</span>t<span class="pl-k">-</span>J<span class="pl-k">*</span>r);<span class="pl-k">if</span>(r<span class="pl-k">&lt;-</span>O.b2_velocityThreshold)b.velocityBias<span class="pl-k">+=-</span>n.restitution<span class="pl-k">*</span>r}<span class="pl-k">if</span>(n.pointCount<span class="pl-k">==</span><span class="pl-c1">2</span>){C<span class="pl-k">=</span>n.points[<span class="pl-c1">0</span>];x<span class="pl-k">=</span>n.points[<span class="pl-c1">1</span>];m<span class="pl-k">=</span>e.m_invMass;e<span class="pl-k">=</span>e.m_invI;v<span class="pl-k">=</span>f.m_invMass;f<span class="pl-k">=</span>f.m_invI;t<span class="pl-k">=</span>C.rA.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">-</span>C.rA.<span class="pl-c1">y</span><span class="pl-k">*</span>c;C<span class="pl-k">=</span>C.rB.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">-</span>C.rB.<span class="pl-c1">y</span><span class="pl-k">*</span>c;J<span class="pl-k">=</span>x.rA.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">-</span>x.rA.<span class="pl-c1">y</span><span class="pl-k">*</span>c;x<span class="pl-k">=</span>x.rB.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">-</span>x.rB.<span class="pl-c1">y</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span>m<span class="pl-k">+</span>v<span class="pl-k">+</span>e<span class="pl-k">*</span>t<span class="pl-k">*</span>t<span class="pl-k">+</span>f<span class="pl-k">*</span>C<span class="pl-k">*</span>C;a<span class="pl-k">=</span>m<span class="pl-k">+</span>v<span class="pl-k">+</span>e<span class="pl-k">*</span>J<span class="pl-k">*</span>J<span class="pl-k">+</span>f<span class="pl-k">*</span>x<span class="pl-k">*</span>x;f<span class="pl-k">=</span>m<span class="pl-k">+</span>v<span class="pl-k">+</span>e<span class="pl-k">*</span>t<span class="pl-k">*</span>J<span class="pl-k">+</span>f<span class="pl-k">*</span>C<span class="pl-k">*</span>x;<span class="pl-k">if</span>(c<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L267" class="blob-num js-line-number" data-line-number="267"></td>
        <td id="LC267" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">&lt;</span><span class="pl-c1">100</span><span class="pl-k">*</span>(c<span class="pl-k">*</span>a<span class="pl-k">-</span>f<span class="pl-k">*</span>f)){n.K.col1.Set(c,f);n.K.col2.Set(f,a);n.K.GetInverse(n.normalMass)}<span class="pl-k">else</span> n.pointCount<span class="pl-k">=</span><span class="pl-c1">1</span>}}};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-c1">0</span>;o<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_constraintCount;<span class="pl-k">++</span>o){<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-v">this</span>.m_constraints[o],n<span class="pl-k">=</span>q.bodyA,a<span class="pl-k">=</span>q.bodyB,c<span class="pl-k">=</span>n.m_invMass,g<span class="pl-k">=</span>n.m_invI,b<span class="pl-k">=</span>a.m_invMass,e<span class="pl-k">=</span>a.m_invI,f<span class="pl-k">=</span>q.normal.<span class="pl-c1">x</span>,m<span class="pl-k">=</span>q.normal.<span class="pl-c1">y</span>,r<span class="pl-k">=</span>m,s<span class="pl-k">=-</span>f,v<span class="pl-k">=</span><span class="pl-c1">0</span>,t<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(j.warmStarting){t<span class="pl-k">=</span>q.pointCount;<span class="pl-k">for</span>(v<span class="pl-k">=</span><span class="pl-c1">0</span>;v<span class="pl-k">&lt;</span>t;<span class="pl-k">++</span>v){<span class="pl-k">var</span> x<span class="pl-k">=</span>q.points[v];x.normalImpulse<span class="pl-k">*=</span>j.dtRatio;x.tangentImpulse<span class="pl-k">*=</span>j.dtRatio;<span class="pl-k">var</span> C<span class="pl-k">=</span>x.normalImpulse<span class="pl-k">*</span>f<span class="pl-k">+</span>x.tangentImpulse<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L268" class="blob-num js-line-number" data-line-number="268"></td>
        <td id="LC268" class="blob-code blob-code-inner js-file-line">r,J<span class="pl-k">=</span>x.normalImpulse<span class="pl-k">*</span>m<span class="pl-k">+</span>x.tangentImpulse<span class="pl-k">*</span>s;n.m_angularVelocity<span class="pl-k">-=</span>g<span class="pl-k">*</span>(x.rA.<span class="pl-c1">x</span><span class="pl-k">*</span>J<span class="pl-k">-</span>x.rA.<span class="pl-c1">y</span><span class="pl-k">*</span>C);n.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">-=</span>c<span class="pl-k">*</span>C;n.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">-=</span>c<span class="pl-k">*</span>J;a.m_angularVelocity<span class="pl-k">+=</span>e<span class="pl-k">*</span>(x.rB.<span class="pl-c1">x</span><span class="pl-k">*</span>J<span class="pl-k">-</span>x.rB.<span class="pl-c1">y</span><span class="pl-k">*</span>C);a.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span>b<span class="pl-k">*</span>C;a.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>b<span class="pl-k">*</span>J}}<span class="pl-k">else</span>{t<span class="pl-k">=</span>q.pointCount;<span class="pl-k">for</span>(v<span class="pl-k">=</span><span class="pl-c1">0</span>;v<span class="pl-k">&lt;</span>t;<span class="pl-k">++</span>v){n<span class="pl-k">=</span>q.points[v];n.normalImpulse<span class="pl-k">=</span><span class="pl-c1">0</span>;n.tangentImpulse<span class="pl-k">=</span><span class="pl-c1">0</span>}}}};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">0</span>,o,q<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>,a<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span>n<span class="pl-k">=</span>n<span class="pl-k">=</span>q<span class="pl-k">=</span>q<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>q<span class="pl-k">=</span>q<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span>q<span class="pl-k">=</span>a<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>,f,m<span class="pl-k">=</span><span class="pl-c1">0</span>;m<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_constraintCount;<span class="pl-k">++</span>m){a<span class="pl-k">=</span><span class="pl-v">this</span>.m_constraints[m];<span class="pl-k">var</span> r<span class="pl-k">=</span>a.bodyA,</td>
      </tr>
      <tr>
        <td id="L269" class="blob-num js-line-number" data-line-number="269"></td>
        <td id="LC269" class="blob-code blob-code-inner js-file-line">s<span class="pl-k">=</span>a.bodyB,v<span class="pl-k">=</span>r.m_angularVelocity,t<span class="pl-k">=</span>s.m_angularVelocity,x<span class="pl-k">=</span>r.m_linearVelocity,C<span class="pl-k">=</span>s.m_linearVelocity,J<span class="pl-k">=</span>r.m_invMass,T<span class="pl-k">=</span>r.m_invI,P<span class="pl-k">=</span>s.m_invMass,X<span class="pl-k">=</span>s.m_invI;b<span class="pl-k">=</span>a.normal.<span class="pl-c1">x</span>;<span class="pl-k">var</span> $<span class="pl-k">=</span>e<span class="pl-k">=</span>a.normal.<span class="pl-c1">y</span>;f<span class="pl-k">=-</span>b;g<span class="pl-k">=</span>a.friction;<span class="pl-k">for</span>(j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span>a.pointCount;j<span class="pl-k">++</span>){o<span class="pl-k">=</span>a.points[j];q<span class="pl-k">=</span>C.<span class="pl-c1">x</span><span class="pl-k">-</span>t<span class="pl-k">*</span>o.rB.<span class="pl-c1">y</span><span class="pl-k">-</span>x.<span class="pl-c1">x</span><span class="pl-k">+</span>v<span class="pl-k">*</span>o.rA.<span class="pl-c1">y</span>;n<span class="pl-k">=</span>C.<span class="pl-c1">y</span><span class="pl-k">+</span>t<span class="pl-k">*</span>o.rB.<span class="pl-c1">x</span><span class="pl-k">-</span>x.<span class="pl-c1">y</span><span class="pl-k">-</span>v<span class="pl-k">*</span>o.rA.<span class="pl-c1">x</span>;q<span class="pl-k">=</span>q<span class="pl-k">*</span>$<span class="pl-k">+</span>n<span class="pl-k">*</span>f;q<span class="pl-k">=</span>o.tangentMass<span class="pl-k">*-</span>q;n<span class="pl-k">=</span>g<span class="pl-k">*</span>o.normalImpulse;n<span class="pl-k">=</span>R.Clamp(o.tangentImpulse<span class="pl-k">+</span>q,<span class="pl-k">-</span>n,n);q<span class="pl-k">=</span>n<span class="pl-k">-</span>o.tangentImpulse;c<span class="pl-k">=</span>q<span class="pl-k">*</span>$;q<span class="pl-k">=</span>q<span class="pl-k">*</span>f;x.<span class="pl-c1">x</span><span class="pl-k">-=</span>J<span class="pl-k">*</span>c;x.<span class="pl-c1">y</span><span class="pl-k">-=</span>J<span class="pl-k">*</span>q;v<span class="pl-k">-=</span>T<span class="pl-k">*</span>(o.rA.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span>o.rA.<span class="pl-c1">y</span><span class="pl-k">*</span>c);C.<span class="pl-c1">x</span><span class="pl-k">+=</span>P<span class="pl-k">*</span>c;C.<span class="pl-c1">y</span><span class="pl-k">+=</span>P<span class="pl-k">*</span>q;t<span class="pl-k">+=</span>X<span class="pl-k">*</span>(o.rB.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span>o.rB.<span class="pl-c1">y</span><span class="pl-k">*</span>c);o.tangentImpulse<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L270" class="blob-num js-line-number" data-line-number="270"></td>
        <td id="LC270" class="blob-code blob-code-inner js-file-line">n}<span class="pl-c1">parseInt</span>(a.pointCount);<span class="pl-k">if</span>(a.pointCount<span class="pl-k">==</span><span class="pl-c1">1</span>){o<span class="pl-k">=</span>a.points[<span class="pl-c1">0</span>];q<span class="pl-k">=</span>C.<span class="pl-c1">x</span><span class="pl-k">+-</span>t<span class="pl-k">*</span>o.rB.<span class="pl-c1">y</span><span class="pl-k">-</span>x.<span class="pl-c1">x</span><span class="pl-k">-</span> <span class="pl-k">-</span>v<span class="pl-k">*</span>o.rA.<span class="pl-c1">y</span>;n<span class="pl-k">=</span>C.<span class="pl-c1">y</span><span class="pl-k">+</span>t<span class="pl-k">*</span>o.rB.<span class="pl-c1">x</span><span class="pl-k">-</span>x.<span class="pl-c1">y</span><span class="pl-k">-</span>v<span class="pl-k">*</span>o.rA.<span class="pl-c1">x</span>;a<span class="pl-k">=</span>q<span class="pl-k">*</span>b<span class="pl-k">+</span>n<span class="pl-k">*</span>e;q<span class="pl-k">=-</span>o.normalMass<span class="pl-k">*</span>(a<span class="pl-k">-</span>o.velocityBias);n<span class="pl-k">=</span>o.normalImpulse<span class="pl-k">+</span>q;n<span class="pl-k">=</span>n<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span>n<span class="pl-k">:</span><span class="pl-c1">0</span>;q<span class="pl-k">=</span>n<span class="pl-k">-</span>o.normalImpulse;c<span class="pl-k">=</span>q<span class="pl-k">*</span>b;q<span class="pl-k">=</span>q<span class="pl-k">*</span>e;x.<span class="pl-c1">x</span><span class="pl-k">-=</span>J<span class="pl-k">*</span>c;x.<span class="pl-c1">y</span><span class="pl-k">-=</span>J<span class="pl-k">*</span>q;v<span class="pl-k">-=</span>T<span class="pl-k">*</span>(o.rA.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span>o.rA.<span class="pl-c1">y</span><span class="pl-k">*</span>c);C.<span class="pl-c1">x</span><span class="pl-k">+=</span>P<span class="pl-k">*</span>c;C.<span class="pl-c1">y</span><span class="pl-k">+=</span>P<span class="pl-k">*</span>q;t<span class="pl-k">+=</span>X<span class="pl-k">*</span>(o.rB.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span>o.rB.<span class="pl-c1">y</span><span class="pl-k">*</span>c);o.normalImpulse<span class="pl-k">=</span>n}<span class="pl-k">else</span>{o<span class="pl-k">=</span>a.points[<span class="pl-c1">0</span>];j<span class="pl-k">=</span>a.points[<span class="pl-c1">1</span>];q<span class="pl-k">=</span>o.normalImpulse;g<span class="pl-k">=</span>j.normalImpulse;<span class="pl-k">var</span> ba<span class="pl-k">=</span>(C.<span class="pl-c1">x</span><span class="pl-k">-</span>t<span class="pl-k">*</span>o.rB.<span class="pl-c1">y</span><span class="pl-k">-</span>x.<span class="pl-c1">x</span><span class="pl-k">+</span>v<span class="pl-k">*</span>o.rA.<span class="pl-c1">y</span>)<span class="pl-k">*</span>b<span class="pl-k">+</span>(C.<span class="pl-c1">y</span><span class="pl-k">+</span>t<span class="pl-k">*</span>o.rB.<span class="pl-c1">x</span><span class="pl-k">-</span>x.<span class="pl-c1">y</span><span class="pl-k">-</span>v<span class="pl-k">*</span>o.rA.<span class="pl-c1">x</span>)<span class="pl-k">*</span>e,ca<span class="pl-k">=</span>(C.<span class="pl-c1">x</span><span class="pl-k">-</span>t<span class="pl-k">*</span>j.rB.<span class="pl-c1">y</span><span class="pl-k">-</span>x.<span class="pl-c1">x</span><span class="pl-k">+</span>v<span class="pl-k">*</span>j.rA.<span class="pl-c1">y</span>)<span class="pl-k">*</span>b<span class="pl-k">+</span>(C.<span class="pl-c1">y</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L271" class="blob-num js-line-number" data-line-number="271"></td>
        <td id="LC271" class="blob-code blob-code-inner js-file-line">t<span class="pl-k">*</span>j.rB.<span class="pl-c1">x</span><span class="pl-k">-</span>x.<span class="pl-c1">y</span><span class="pl-k">-</span>v<span class="pl-k">*</span>j.rA.<span class="pl-c1">x</span>)<span class="pl-k">*</span>e;n<span class="pl-k">=</span>ba<span class="pl-k">-</span>o.velocityBias;c<span class="pl-k">=</span>ca<span class="pl-k">-</span>j.velocityBias;f<span class="pl-k">=</span>a.K;n<span class="pl-k">-=</span>f.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">+</span>f.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>g;<span class="pl-k">for</span>(c<span class="pl-k">-=</span>f.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>q<span class="pl-k">+</span>f.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>g;;){f<span class="pl-k">=</span>a.normalMass;$<span class="pl-k">=-</span>(f.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span>f.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>c);f<span class="pl-k">=-</span>(f.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span>f.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>c);<span class="pl-k">if</span>($<span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>f<span class="pl-k">&gt;=</span><span class="pl-c1">0</span>){q<span class="pl-k">=</span>$<span class="pl-k">-</span>q;g<span class="pl-k">=</span>f<span class="pl-k">-</span>g;a<span class="pl-k">=</span>q<span class="pl-k">*</span>b;q<span class="pl-k">=</span>q<span class="pl-k">*</span>e;b<span class="pl-k">=</span>g<span class="pl-k">*</span>b;e<span class="pl-k">=</span>g<span class="pl-k">*</span>e;x.<span class="pl-c1">x</span><span class="pl-k">-=</span>J<span class="pl-k">*</span>(a<span class="pl-k">+</span>b);x.<span class="pl-c1">y</span><span class="pl-k">-=</span>J<span class="pl-k">*</span>(q<span class="pl-k">+</span>e);v<span class="pl-k">-=</span>T<span class="pl-k">*</span>(o.rA.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span>o.rA.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span>j.rA.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">-</span>j.rA.<span class="pl-c1">y</span><span class="pl-k">*</span>b);C.<span class="pl-c1">x</span><span class="pl-k">+=</span>P<span class="pl-k">*</span>(a<span class="pl-k">+</span>b);C.<span class="pl-c1">y</span><span class="pl-k">+=</span>P<span class="pl-k">*</span>(q<span class="pl-k">+</span>e);t<span class="pl-k">+=</span>X<span class="pl-k">*</span>(o.rB.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span>o.rB.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span>j.rB.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">-</span>j.rB.<span class="pl-c1">y</span><span class="pl-k">*</span>b);o.normalImpulse<span class="pl-k">=</span>$;j.normalImpulse<span class="pl-k">=</span>f;<span class="pl-k">break</span>}$<span class="pl-k">=-</span>o.normalMass<span class="pl-k">*</span>n;f<span class="pl-k">=</span><span class="pl-c1">0</span>;ca<span class="pl-k">=</span>a.K.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>$<span class="pl-k">+</span>c;<span class="pl-k">if</span>($<span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>ca<span class="pl-k">&gt;=</span><span class="pl-c1">0</span>){q<span class="pl-k">=</span>$<span class="pl-k">-</span>q;g<span class="pl-k">=</span>f<span class="pl-k">-</span>g;a<span class="pl-k">=</span>q<span class="pl-k">*</span>b;</td>
      </tr>
      <tr>
        <td id="L272" class="blob-num js-line-number" data-line-number="272"></td>
        <td id="LC272" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">=</span>q<span class="pl-k">*</span>e;b<span class="pl-k">=</span>g<span class="pl-k">*</span>b;e<span class="pl-k">=</span>g<span class="pl-k">*</span>e;x.<span class="pl-c1">x</span><span class="pl-k">-=</span>J<span class="pl-k">*</span>(a<span class="pl-k">+</span>b);x.<span class="pl-c1">y</span><span class="pl-k">-=</span>J<span class="pl-k">*</span>(q<span class="pl-k">+</span>e);v<span class="pl-k">-=</span>T<span class="pl-k">*</span>(o.rA.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span>o.rA.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span>j.rA.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">-</span>j.rA.<span class="pl-c1">y</span><span class="pl-k">*</span>b);C.<span class="pl-c1">x</span><span class="pl-k">+=</span>P<span class="pl-k">*</span>(a<span class="pl-k">+</span>b);C.<span class="pl-c1">y</span><span class="pl-k">+=</span>P<span class="pl-k">*</span>(q<span class="pl-k">+</span>e);t<span class="pl-k">+=</span>X<span class="pl-k">*</span>(o.rB.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span>o.rB.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span>j.rB.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">-</span>j.rB.<span class="pl-c1">y</span><span class="pl-k">*</span>b);o.normalImpulse<span class="pl-k">=</span>$;j.normalImpulse<span class="pl-k">=</span>f;<span class="pl-k">break</span>}$<span class="pl-k">=</span><span class="pl-c1">0</span>;f<span class="pl-k">=-</span>j.normalMass<span class="pl-k">*</span>c;ba<span class="pl-k">=</span>a.K.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>f<span class="pl-k">+</span>n;<span class="pl-k">if</span>(f<span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>ba<span class="pl-k">&gt;=</span><span class="pl-c1">0</span>){q<span class="pl-k">=</span>$<span class="pl-k">-</span>q;g<span class="pl-k">=</span>f<span class="pl-k">-</span>g;a<span class="pl-k">=</span>q<span class="pl-k">*</span>b;q<span class="pl-k">=</span>q<span class="pl-k">*</span>e;b<span class="pl-k">=</span>g<span class="pl-k">*</span>b;e<span class="pl-k">=</span>g<span class="pl-k">*</span>e;x.<span class="pl-c1">x</span><span class="pl-k">-=</span>J<span class="pl-k">*</span>(a<span class="pl-k">+</span>b);x.<span class="pl-c1">y</span><span class="pl-k">-=</span>J<span class="pl-k">*</span>(q<span class="pl-k">+</span>e);v<span class="pl-k">-=</span>T<span class="pl-k">*</span>(o.rA.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span>o.rA.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span>j.rA.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">-</span>j.rA.<span class="pl-c1">y</span><span class="pl-k">*</span>b);C.<span class="pl-c1">x</span><span class="pl-k">+=</span>P<span class="pl-k">*</span>(a<span class="pl-k">+</span>b);C.<span class="pl-c1">y</span><span class="pl-k">+=</span>P<span class="pl-k">*</span>(q<span class="pl-k">+</span>e);t<span class="pl-k">+=</span>X<span class="pl-k">*</span>(o.rB.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span>o.rB.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span>j.rB.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">-</span>j.rB.<span class="pl-c1">y</span><span class="pl-k">*</span>b);o.normalImpulse<span class="pl-k">=</span>$;j.normalImpulse<span class="pl-k">=</span>f;<span class="pl-k">break</span>}f<span class="pl-k">=</span>$<span class="pl-k">=</span><span class="pl-c1">0</span>;ba<span class="pl-k">=</span>n;ca<span class="pl-k">=</span>c;<span class="pl-k">if</span>(ba<span class="pl-k">&gt;=</span><span class="pl-c1">0</span><span class="pl-k">&amp;&amp;</span>ca<span class="pl-k">&gt;=</span><span class="pl-c1">0</span>){q<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L273" class="blob-num js-line-number" data-line-number="273"></td>
        <td id="LC273" class="blob-code blob-code-inner js-file-line">$<span class="pl-k">-</span>q;g<span class="pl-k">=</span>f<span class="pl-k">-</span>g;a<span class="pl-k">=</span>q<span class="pl-k">*</span>b;q<span class="pl-k">=</span>q<span class="pl-k">*</span>e;b<span class="pl-k">=</span>g<span class="pl-k">*</span>b;e<span class="pl-k">=</span>g<span class="pl-k">*</span>e;x.<span class="pl-c1">x</span><span class="pl-k">-=</span>J<span class="pl-k">*</span>(a<span class="pl-k">+</span>b);x.<span class="pl-c1">y</span><span class="pl-k">-=</span>J<span class="pl-k">*</span>(q<span class="pl-k">+</span>e);v<span class="pl-k">-=</span>T<span class="pl-k">*</span>(o.rA.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span>o.rA.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span>j.rA.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">-</span>j.rA.<span class="pl-c1">y</span><span class="pl-k">*</span>b);C.<span class="pl-c1">x</span><span class="pl-k">+=</span>P<span class="pl-k">*</span>(a<span class="pl-k">+</span>b);C.<span class="pl-c1">y</span><span class="pl-k">+=</span>P<span class="pl-k">*</span>(q<span class="pl-k">+</span>e);t<span class="pl-k">+=</span>X<span class="pl-k">*</span>(o.rB.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">-</span>o.rB.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span>j.rB.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">-</span>j.rB.<span class="pl-c1">y</span><span class="pl-k">*</span>b);o.normalImpulse<span class="pl-k">=</span>$;j.normalImpulse<span class="pl-k">=</span>f;<span class="pl-k">break</span>}<span class="pl-k">break</span>}}r.m_angularVelocity<span class="pl-k">=</span>v;s.m_angularVelocity<span class="pl-k">=</span>t}};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">FinalizeVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_constraintCount;<span class="pl-k">++</span>j)<span class="pl-k">for</span>(<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-v">this</span>.m_constraints[j],q<span class="pl-k">=</span>o.manifold,n<span class="pl-k">=</span><span class="pl-c1">0</span>;n<span class="pl-k">&lt;</span>o.pointCount;<span class="pl-k">++</span>n){<span class="pl-k">var</span> a<span class="pl-k">=</span>q.m_points[n],c<span class="pl-k">=</span>o.points[n];a.m_normalImpulse<span class="pl-k">=</span>c.normalImpulse;a.m_tangentImpulse<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L274" class="blob-num js-line-number" data-line-number="274"></td>
        <td id="LC274" class="blob-code blob-code-inner js-file-line">c.tangentImpulse}};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){<span class="pl-k">if</span>(j<span class="pl-k">===</span><span class="pl-c1">undefined</span>)j<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">for</span>(<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-c1">0</span>,q<span class="pl-k">=</span><span class="pl-c1">0</span>;q<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_constraintCount;q<span class="pl-k">++</span>){<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-v">this</span>.m_constraints[q],a<span class="pl-k">=</span>n.bodyA,c<span class="pl-k">=</span>n.bodyB,g<span class="pl-k">=</span>a.m_mass<span class="pl-k">*</span>a.m_invMass,b<span class="pl-k">=</span>a.m_mass<span class="pl-k">*</span>a.m_invI,e<span class="pl-k">=</span>c.m_mass<span class="pl-k">*</span>c.m_invMass,f<span class="pl-k">=</span>c.m_mass<span class="pl-k">*</span>c.m_invI;L.s_psm.Initialize(n);<span class="pl-k">for</span>(<span class="pl-k">var</span> m<span class="pl-k">=</span>L.s_psm.m_normal,r<span class="pl-k">=</span><span class="pl-c1">0</span>;r<span class="pl-k">&lt;</span>n.pointCount;r<span class="pl-k">++</span>){<span class="pl-k">var</span> s<span class="pl-k">=</span>n.points[r],v<span class="pl-k">=</span>L.s_psm.m_points[r],t<span class="pl-k">=</span>L.s_psm.m_separations[r],x<span class="pl-k">=</span>v.<span class="pl-c1">x</span><span class="pl-k">-</span>a.m_sweep.c.<span class="pl-c1">x</span>,C<span class="pl-k">=</span>v.<span class="pl-c1">y</span><span class="pl-k">-</span>a.m_sweep.c.<span class="pl-c1">y</span>,J<span class="pl-k">=</span>v.<span class="pl-c1">x</span><span class="pl-k">-</span>c.m_sweep.c.<span class="pl-c1">x</span>;v<span class="pl-k">=</span>v.<span class="pl-c1">y</span><span class="pl-k">-</span>c.m_sweep.c.<span class="pl-c1">y</span>;o<span class="pl-k">=</span>o<span class="pl-k">&lt;</span>t<span class="pl-k">?</span>o<span class="pl-k">:</span>t;t<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L275" class="blob-num js-line-number" data-line-number="275"></td>
        <td id="LC275" class="blob-code blob-code-inner js-file-line">R.Clamp(j<span class="pl-k">*</span>(t<span class="pl-k">+</span>O.b2_linearSlop),<span class="pl-k">-</span>O.b2_maxLinearCorrection,<span class="pl-c1">0</span>);t<span class="pl-k">=-</span>s.equalizedMass<span class="pl-k">*</span>t;s<span class="pl-k">=</span>t<span class="pl-k">*</span>m.<span class="pl-c1">x</span>;t<span class="pl-k">=</span>t<span class="pl-k">*</span>m.<span class="pl-c1">y</span>;a.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">-=</span>g<span class="pl-k">*</span>s;a.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">-=</span>g<span class="pl-k">*</span>t;a.m_sweep.a<span class="pl-k">-=</span>b<span class="pl-k">*</span>(x<span class="pl-k">*</span>t<span class="pl-k">-</span>C<span class="pl-k">*</span>s);a.SynchronizeTransform();c.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+=</span>e<span class="pl-k">*</span>s;c.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+=</span>e<span class="pl-k">*</span>t;c.m_sweep.a<span class="pl-k">+=</span>f<span class="pl-k">*</span>(J<span class="pl-k">*</span>t<span class="pl-k">-</span>v<span class="pl-k">*</span>s);c.SynchronizeTransform()}}<span class="pl-k">return</span> o<span class="pl-k">&gt;-</span><span class="pl-c1">1.5</span><span class="pl-k">*</span>O.b2_linearSlop};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">l</span>;Box2D.Dynamics.Contacts.b2ContactSolver.s_psm<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">u</span>});Box2D.inherit(I,Box2D.Dynamics.Contacts.b2Contact);</td>
      </tr>
      <tr>
        <td id="L276" class="blob-num js-line-number" data-line-number="276"></td>
        <td id="LC276" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2Contact.<span class="pl-c1">prototype</span>;<span class="pl-c1">I</span>.<span class="pl-en">b2EdgeAndCircleContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Contacts.b2Contact.b2Contact.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)};<span class="pl-c1">I</span>.<span class="pl-en">Create</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">I</span>};<span class="pl-c1">I</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>){<span class="pl-v">this</span>.__super.<span class="pl-c1">Reset</span>.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,j,o)};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Evaluate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureA.GetBody(),o<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureB.GetBody();<span class="pl-v">this</span>.b2CollideEdgeAndCircle(<span class="pl-v">this</span>.m_manifold,<span class="pl-v">this</span>.m_fixtureA.GetShape()<span class="pl-k">instanceof</span> G<span class="pl-k">?</span><span class="pl-v">this</span>.m_fixtureA.GetShape()<span class="pl-k">:</span><span class="pl-c1">null</span>,j.m_xf,</td>
      </tr>
      <tr>
        <td id="L277" class="blob-num js-line-number" data-line-number="277"></td>
        <td id="LC277" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_fixtureB.GetShape()<span class="pl-k">instanceof</span> F<span class="pl-k">?</span><span class="pl-v">this</span>.m_fixtureB.GetShape()<span class="pl-k">:</span><span class="pl-c1">null</span>,o.m_xf)};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2CollideEdgeAndCircle</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};Box2D.inherit(W,Box2D.Dynamics.Contacts.b2Contact);<span class="pl-c1">W</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2Contact.<span class="pl-c1">prototype</span>;<span class="pl-c1">W</span>.<span class="pl-en">b2NullContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Contacts.b2Contact.b2Contact.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)};<span class="pl-c1">W</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2NullContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.__super.b2Contact.<span class="pl-c1">call</span>(<span class="pl-v">this</span>)};<span class="pl-c1">W</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Evaluate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};Box2D.inherit(Y,Box2D.Dynamics.Contacts.b2Contact);<span class="pl-c1">Y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L278" class="blob-num js-line-number" data-line-number="278"></td>
        <td id="LC278" class="blob-code blob-code-inner js-file-line">Box2D.Dynamics.Contacts.b2Contact.<span class="pl-c1">prototype</span>;<span class="pl-c1">Y</span>.<span class="pl-en">b2PolyAndCircleContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Contacts.b2Contact.b2Contact.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)};<span class="pl-c1">Y</span>.<span class="pl-en">Create</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">Y</span>};<span class="pl-c1">Y</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">Y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>){<span class="pl-v">this</span>.__super.<span class="pl-c1">Reset</span>.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,j,o);O.b2Assert(j.GetType()<span class="pl-k">==</span>y.e_polygonShape);O.b2Assert(o.GetType()<span class="pl-k">==</span>y.e_circleShape)};<span class="pl-c1">Y</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Evaluate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureA.m_body,o<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureB.m_body;S.CollidePolygonAndCircle(<span class="pl-v">this</span>.m_manifold,<span class="pl-v">this</span>.m_fixtureA.GetShape()<span class="pl-k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L279" class="blob-num js-line-number" data-line-number="279"></td>
        <td id="LC279" class="blob-code blob-code-inner js-file-line">K<span class="pl-k">?</span><span class="pl-v">this</span>.m_fixtureA.GetShape()<span class="pl-k">:</span><span class="pl-c1">null</span>,j.m_xf,<span class="pl-v">this</span>.m_fixtureB.GetShape()<span class="pl-k">instanceof</span> F<span class="pl-k">?</span><span class="pl-v">this</span>.m_fixtureB.GetShape()<span class="pl-k">:</span><span class="pl-c1">null</span>,o.m_xf)};Box2D.inherit(k,Box2D.Dynamics.Contacts.b2Contact);<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2Contact.<span class="pl-c1">prototype</span>;<span class="pl-c1">k</span>.<span class="pl-en">b2PolyAndEdgeContact</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Contacts.b2Contact.b2Contact.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)};<span class="pl-c1">k</span>.<span class="pl-en">Create</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">k</span>};<span class="pl-c1">k</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>){<span class="pl-v">this</span>.__super.<span class="pl-c1">Reset</span>.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,j,o);O.b2Assert(j.GetType()<span class="pl-k">==</span>y.e_polygonShape);</td>
      </tr>
      <tr>
        <td id="L280" class="blob-num js-line-number" data-line-number="280"></td>
        <td id="LC280" class="blob-code blob-code-inner js-file-line">O.b2Assert(o.GetType()<span class="pl-k">==</span>y.e_edgeShape)};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Evaluate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureA.GetBody(),o<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureB.GetBody();<span class="pl-v">this</span>.b2CollidePolyAndEdge(<span class="pl-v">this</span>.m_manifold,<span class="pl-v">this</span>.m_fixtureA.GetShape()<span class="pl-k">instanceof</span> K<span class="pl-k">?</span><span class="pl-v">this</span>.m_fixtureA.GetShape()<span class="pl-k">:</span><span class="pl-c1">null</span>,j.m_xf,<span class="pl-v">this</span>.m_fixtureB.GetShape()<span class="pl-k">instanceof</span> G<span class="pl-k">?</span><span class="pl-v">this</span>.m_fixtureB.GetShape()<span class="pl-k">:</span><span class="pl-c1">null</span>,o.m_xf)};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2CollidePolyAndEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};Box2D.inherit(z,Box2D.Dynamics.Contacts.b2Contact);<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Contacts.b2Contact.<span class="pl-c1">prototype</span>;z.b2PolygonContact<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L281" class="blob-num js-line-number" data-line-number="281"></td>
        <td id="LC281" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){Box2D.Dynamics.Contacts.b2Contact.b2Contact.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)};<span class="pl-c1">z</span>.<span class="pl-en">Create</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">z</span>};<span class="pl-c1">z</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Reset</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>,<span class="pl-smi">o</span>){<span class="pl-v">this</span>.__super.<span class="pl-c1">Reset</span>.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,j,o)};<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Evaluate</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureA.GetBody(),o<span class="pl-k">=</span><span class="pl-v">this</span>.m_fixtureB.GetBody();S.CollidePolygons(<span class="pl-v">this</span>.m_manifold,<span class="pl-v">this</span>.m_fixtureA.GetShape()<span class="pl-k">instanceof</span> K<span class="pl-k">?</span><span class="pl-v">this</span>.m_fixtureA.GetShape()<span class="pl-k">:</span><span class="pl-c1">null</span>,j.m_xf,<span class="pl-v">this</span>.m_fixtureB.GetShape()<span class="pl-k">instanceof</span> K<span class="pl-k">?</span><span class="pl-v">this</span>.m_fixtureB.GetShape()<span class="pl-k">:</span><span class="pl-c1">null</span>,o.m_xf)};u.b2PositionSolverManifold<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L282" class="blob-num js-line-number" data-line-number="282"></td>
        <td id="LC282" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2PositionSolverManifold</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_normal<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;<span class="pl-v">this</span>.m_separations<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector_a2j_Number</span>(O.b2_maxManifoldPoints);<span class="pl-v">this</span>.m_points<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Vector</span>(O.b2_maxManifoldPoints);<span class="pl-k">for</span>(<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">&lt;</span>O.b2_maxManifoldPoints;j<span class="pl-k">++</span>)<span class="pl-v">this</span>.m_points[j]<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">j</span>){O.b2Assert(j.pointCount<span class="pl-k">&gt;</span><span class="pl-c1">0</span>);<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-c1">0</span>,q<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>,a,c<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">switch</span>(j.<span class="pl-c1">type</span>){<span class="pl-k">case</span> Z.e_circles<span class="pl-k">:</span>a<span class="pl-k">=</span>j.bodyA.m_xf.R;n<span class="pl-k">=</span>j.localPoint;o<span class="pl-k">=</span>j.bodyA.m_xf.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(a.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>);q<span class="pl-k">=</span>j.bodyA.m_xf.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(a.col1.<span class="pl-c1">y</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L283" class="blob-num js-line-number" data-line-number="283"></td>
        <td id="LC283" class="blob-code blob-code-inner js-file-line">n.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>);a<span class="pl-k">=</span>j.bodyB.m_xf.R;n<span class="pl-k">=</span>j.points[<span class="pl-c1">0</span>].localPoint;c<span class="pl-k">=</span>j.bodyB.m_xf.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(a.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>);a<span class="pl-k">=</span>j.bodyB.m_xf.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(a.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>);n<span class="pl-k">=</span>c<span class="pl-k">-</span>o;g<span class="pl-k">=</span>a<span class="pl-k">-</span>q;<span class="pl-k">var</span> b<span class="pl-k">=</span>n<span class="pl-k">*</span>n<span class="pl-k">+</span>g<span class="pl-k">*</span>g;<span class="pl-k">if</span>(b<span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span><span class="pl-k">*</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>){b<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(b);<span class="pl-v">this</span>.m_normal.<span class="pl-c1">x</span><span class="pl-k">=</span>n<span class="pl-k">/</span>b;<span class="pl-v">this</span>.m_normal.<span class="pl-c1">y</span><span class="pl-k">=</span>g<span class="pl-k">/</span>b}<span class="pl-k">else</span>{<span class="pl-v">this</span>.m_normal.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.m_normal.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-v">this</span>.m_points[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(o<span class="pl-k">+</span>c);<span class="pl-v">this</span>.m_points[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(q<span class="pl-k">+</span>a);<span class="pl-v">this</span>.m_separations[<span class="pl-c1">0</span>]<span class="pl-k">=</span>n<span class="pl-k">*</span><span class="pl-v">this</span>.m_normal.<span class="pl-c1">x</span><span class="pl-k">+</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_normal.<span class="pl-c1">y</span><span class="pl-k">-</span>j.radius;<span class="pl-k">break</span>;<span class="pl-k">case</span> Z.e_faceA<span class="pl-k">:</span>a<span class="pl-k">=</span>j.bodyA.m_xf.R;n<span class="pl-k">=</span>j.localPlaneNormal;</td>
      </tr>
      <tr>
        <td id="L284" class="blob-num js-line-number" data-line-number="284"></td>
        <td id="LC284" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_normal.<span class="pl-c1">x</span><span class="pl-k">=</span>a.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_normal.<span class="pl-c1">y</span><span class="pl-k">=</span>a.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>;a<span class="pl-k">=</span>j.bodyA.m_xf.R;n<span class="pl-k">=</span>j.localPoint;c<span class="pl-k">=</span>j.bodyA.m_xf.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(a.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>);g<span class="pl-k">=</span>j.bodyA.m_xf.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(a.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>);a<span class="pl-k">=</span>j.bodyB.m_xf.R;<span class="pl-k">for</span>(o<span class="pl-k">=</span><span class="pl-c1">0</span>;o<span class="pl-k">&lt;</span>j.pointCount;<span class="pl-k">++</span>o){n<span class="pl-k">=</span>j.points[o].localPoint;q<span class="pl-k">=</span>j.bodyB.m_xf.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(a.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>);n<span class="pl-k">=</span>j.bodyB.m_xf.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(a.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.m_separations[o]<span class="pl-k">=</span>(q<span class="pl-k">-</span>c)<span class="pl-k">*</span><span class="pl-v">this</span>.m_normal.<span class="pl-c1">x</span><span class="pl-k">+</span>(n<span class="pl-k">-</span>g)<span class="pl-k">*</span><span class="pl-v">this</span>.m_normal.<span class="pl-c1">y</span><span class="pl-k">-</span>j.radius;<span class="pl-v">this</span>.m_points[o].<span class="pl-c1">x</span><span class="pl-k">=</span>q;<span class="pl-v">this</span>.m_points[o].<span class="pl-c1">y</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L285" class="blob-num js-line-number" data-line-number="285"></td>
        <td id="LC285" class="blob-code blob-code-inner js-file-line">n}<span class="pl-k">break</span>;<span class="pl-k">case</span> Z.e_faceB<span class="pl-k">:</span>a<span class="pl-k">=</span>j.bodyB.m_xf.R;n<span class="pl-k">=</span>j.localPlaneNormal;<span class="pl-v">this</span>.m_normal.<span class="pl-c1">x</span><span class="pl-k">=</span>a.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_normal.<span class="pl-c1">y</span><span class="pl-k">=</span>a.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>;a<span class="pl-k">=</span>j.bodyB.m_xf.R;n<span class="pl-k">=</span>j.localPoint;c<span class="pl-k">=</span>j.bodyB.m_xf.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(a.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>);g<span class="pl-k">=</span>j.bodyB.m_xf.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(a.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>);a<span class="pl-k">=</span>j.bodyA.m_xf.R;<span class="pl-k">for</span>(o<span class="pl-k">=</span><span class="pl-c1">0</span>;o<span class="pl-k">&lt;</span>j.pointCount;<span class="pl-k">++</span>o){n<span class="pl-k">=</span>j.points[o].localPoint;q<span class="pl-k">=</span>j.bodyA.m_xf.position.<span class="pl-c1">x</span><span class="pl-k">+</span>(a.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>);n<span class="pl-k">=</span>j.bodyA.m_xf.position.<span class="pl-c1">y</span><span class="pl-k">+</span>(a.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>a.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>);<span class="pl-v">this</span>.m_separations[o]<span class="pl-k">=</span>(q<span class="pl-k">-</span>c)<span class="pl-k">*</span><span class="pl-v">this</span>.m_normal.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L286" class="blob-num js-line-number" data-line-number="286"></td>
        <td id="LC286" class="blob-code blob-code-inner js-file-line">(n<span class="pl-k">-</span>g)<span class="pl-k">*</span><span class="pl-v">this</span>.m_normal.<span class="pl-c1">y</span><span class="pl-k">-</span>j.radius;<span class="pl-v">this</span>.m_points[o].Set(q,n)}<span class="pl-v">this</span>.m_normal.<span class="pl-c1">x</span><span class="pl-k">*=-</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.m_normal.<span class="pl-c1">y</span><span class="pl-k">*=-</span><span class="pl-c1">1</span>}};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Dynamics.Contacts.b2PositionSolverManifold.circlePointA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>;Box2D.Dynamics.Contacts.b2PositionSolverManifold.circlePointB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>})})();</td>
      </tr>
      <tr>
        <td id="L287" class="blob-num js-line-number" data-line-number="287"></td>
        <td id="LC287" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> F<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Mat22,G<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Math,K<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Vec2,y<span class="pl-k">=</span>Box2D.Common.b2Color,w<span class="pl-k">=</span>Box2D.Dynamics.Controllers.b2BuoyancyController,A<span class="pl-k">=</span>Box2D.Dynamics.Controllers.b2ConstantAccelController,U<span class="pl-k">=</span>Box2D.Dynamics.Controllers.b2ConstantForceController,p<span class="pl-k">=</span>Box2D.Dynamics.Controllers.b2Controller,B<span class="pl-k">=</span>Box2D.Dynamics.Controllers.b2ControllerEdge,Q<span class="pl-k">=</span>Box2D.Dynamics.Controllers.b2GravityController,V<span class="pl-k">=</span>Box2D.Dynamics.Controllers.b2TensorDampingController;Box2D.inherit(w,Box2D.Dynamics.Controllers.b2Controller);</td>
      </tr>
      <tr>
        <td id="L288" class="blob-num js-line-number" data-line-number="288"></td>
        <td id="LC288" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Controllers.b2Controller.<span class="pl-c1">prototype</span>;<span class="pl-c1">w</span>.<span class="pl-en">b2BuoyancyController</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Controllers.b2Controller.b2Controller.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.normal<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>(<span class="pl-c1">0</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>);<span class="pl-v">this</span>.density<span class="pl-k">=</span><span class="pl-v">this</span>.offset<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.velocity<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.linearDrag<span class="pl-k">=</span><span class="pl-c1">2</span>;<span class="pl-v">this</span>.angularDrag<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.useDensity<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-v">this</span>.useWorldGravity<span class="pl-k">=</span><span class="pl-c1">true</span>;<span class="pl-v">this</span>.gravity<span class="pl-k">=</span><span class="pl-c1">null</span>};<span class="pl-c1">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Step</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_bodyList){<span class="pl-k">if</span>(<span class="pl-v">this</span>.useWorldGravity)<span class="pl-v">this</span>.gravity<span class="pl-k">=</span><span class="pl-v">this</span>.GetWorld().GetGravity().Copy();<span class="pl-k">for</span>(<span class="pl-k">var</span> M<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;M;M<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L289" class="blob-num js-line-number" data-line-number="289"></td>
        <td id="LC289" class="blob-code blob-code-inner js-file-line">M.nextBody){<span class="pl-k">var</span> L<span class="pl-k">=</span>M.<span class="pl-c1">body</span>;<span class="pl-k">if</span>(L.IsAwake()<span class="pl-k">!=</span><span class="pl-c1">false</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> I<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>,W<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>,Y<span class="pl-k">=</span><span class="pl-c1">0</span>,k<span class="pl-k">=</span><span class="pl-c1">0</span>,z<span class="pl-k">=</span>L.GetFixtureList();z;z<span class="pl-k">=</span>z.GetNext()){<span class="pl-k">var</span> u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>,D<span class="pl-k">=</span>z.GetShape().ComputeSubmergedArea(<span class="pl-v">this</span>.normal,<span class="pl-v">this</span>.offset,L.GetTransform(),u);Y<span class="pl-k">+=</span>D;I.<span class="pl-c1">x</span><span class="pl-k">+=</span>D<span class="pl-k">*</span>u.<span class="pl-c1">x</span>;I.<span class="pl-c1">y</span><span class="pl-k">+=</span>D<span class="pl-k">*</span>u.<span class="pl-c1">y</span>;<span class="pl-k">var</span> H<span class="pl-k">=</span><span class="pl-c1">0</span>;H<span class="pl-k">=</span><span class="pl-c1">1</span>;k<span class="pl-k">+=</span>D<span class="pl-k">*</span>H;W.<span class="pl-c1">x</span><span class="pl-k">+=</span>D<span class="pl-k">*</span>u.<span class="pl-c1">x</span><span class="pl-k">*</span>H;W.<span class="pl-c1">y</span><span class="pl-k">+=</span>D<span class="pl-k">*</span>u.<span class="pl-c1">y</span><span class="pl-k">*</span>H}I.<span class="pl-c1">x</span><span class="pl-k">/=</span>Y;I.<span class="pl-c1">y</span><span class="pl-k">/=</span>Y;W.<span class="pl-c1">x</span><span class="pl-k">/=</span>k;W.<span class="pl-c1">y</span><span class="pl-k">/=</span>k;<span class="pl-k">if</span>(<span class="pl-k">!</span>(Y<span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)){k<span class="pl-k">=</span><span class="pl-v">this</span>.gravity.GetNegative();k.Multiply(<span class="pl-v">this</span>.density<span class="pl-k">*</span>Y);L.ApplyForce(k,W);W<span class="pl-k">=</span>L.GetLinearVelocityFromWorldPoint(I);W.Subtract(<span class="pl-v">this</span>.velocity);W.Multiply(<span class="pl-k">-</span><span class="pl-v">this</span>.linearDrag<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L290" class="blob-num js-line-number" data-line-number="290"></td>
        <td id="LC290" class="blob-code blob-code-inner js-file-line">Y);L.ApplyForce(W,I);L.ApplyTorque(<span class="pl-k">-</span>L.GetInertia()<span class="pl-k">/</span>L.GetMass()<span class="pl-k">*</span>Y<span class="pl-k">*</span>L.GetAngularVelocity()<span class="pl-k">*</span><span class="pl-v">this</span>.angularDrag)}}}}};<span class="pl-c1">w</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Draw</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">M</span>){<span class="pl-k">var</span> L<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>,I<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>;L.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.normal.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.offset<span class="pl-k">+</span><span class="pl-v">this</span>.normal.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">1E3</span>;L.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.normal.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.offset<span class="pl-k">-</span><span class="pl-v">this</span>.normal.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">1E3</span>;I.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.normal.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.offset<span class="pl-k">-</span><span class="pl-v">this</span>.normal.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-c1">1E3</span>;I.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.normal.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.offset<span class="pl-k">+</span><span class="pl-v">this</span>.normal.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-c1">1E3</span>;<span class="pl-k">var</span> W<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">y</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>);M.DrawSegment(L,I,W)};Box2D.inherit(A,Box2D.Dynamics.Controllers.b2Controller);<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Controllers.b2Controller.<span class="pl-c1">prototype</span>;</td>
      </tr>
      <tr>
        <td id="L291" class="blob-num js-line-number" data-line-number="291"></td>
        <td id="LC291" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">A</span>.<span class="pl-en">b2ConstantAccelController</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Controllers.b2Controller.b2Controller.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.A<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)};<span class="pl-c1">A</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Step</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">M</span>){M<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>(<span class="pl-v">this</span>.A.<span class="pl-c1">x</span><span class="pl-k">*</span>M.dt,<span class="pl-v">this</span>.A.<span class="pl-c1">y</span><span class="pl-k">*</span>M.dt);<span class="pl-k">for</span>(<span class="pl-k">var</span> L<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;L;L<span class="pl-k">=</span>L.nextBody){<span class="pl-k">var</span> I<span class="pl-k">=</span>L.<span class="pl-c1">body</span>;I.IsAwake()<span class="pl-k">&amp;&amp;</span>I.SetLinearVelocity(<span class="pl-k">new</span> <span class="pl-en">K</span>(I.GetLinearVelocity().<span class="pl-c1">x</span><span class="pl-k">+</span>M.<span class="pl-c1">x</span>,I.GetLinearVelocity().<span class="pl-c1">y</span><span class="pl-k">+</span>M.<span class="pl-c1">y</span>))}};Box2D.inherit(U,Box2D.Dynamics.Controllers.b2Controller);<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Controllers.b2Controller.<span class="pl-c1">prototype</span>;U.b2ConstantForceController<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L292" class="blob-num js-line-number" data-line-number="292"></td>
        <td id="LC292" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){Box2D.Dynamics.Controllers.b2Controller.b2Controller.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.F<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Step</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(<span class="pl-k">var</span> M<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;M;M<span class="pl-k">=</span>M.nextBody){<span class="pl-k">var</span> L<span class="pl-k">=</span>M.<span class="pl-c1">body</span>;L.IsAwake()<span class="pl-k">&amp;&amp;</span>L.ApplyForce(<span class="pl-v">this</span>.F,L.GetWorldCenter())}};<span class="pl-c1">p</span>.<span class="pl-en">b2Controller</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Step</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Draw</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AddBody</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">M</span>){<span class="pl-k">var</span> L<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>;L.controller<span class="pl-k">=</span><span class="pl-v">this</span>;L.<span class="pl-c1">body</span><span class="pl-k">=</span>M;L.nextBody<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;L.prevBody<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_bodyList<span class="pl-k">=</span>L;<span class="pl-k">if</span>(L.nextBody)L.nextBody.prevBody<span class="pl-k">=</span>L;<span class="pl-v">this</span>.m_bodyCount<span class="pl-k">++</span>;</td>
      </tr>
      <tr>
        <td id="L293" class="blob-num js-line-number" data-line-number="293"></td>
        <td id="LC293" class="blob-code blob-code-inner js-file-line">L.nextController<span class="pl-k">=</span>M.m_controllerList;L.prevController<span class="pl-k">=</span><span class="pl-c1">null</span>;M.m_controllerList<span class="pl-k">=</span>L;<span class="pl-k">if</span>(L.nextController)L.nextController.prevController<span class="pl-k">=</span>L;M.m_controllerCount<span class="pl-k">++</span>};<span class="pl-c1">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">RemoveBody</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">M</span>){<span class="pl-k">for</span>(<span class="pl-k">var</span> L<span class="pl-k">=</span>M.m_controllerList;L<span class="pl-k">&amp;&amp;</span>L.controller<span class="pl-k">!=</span><span class="pl-v">this</span>;)L<span class="pl-k">=</span>L.nextController;<span class="pl-k">if</span>(L.prevBody)L.prevBody.nextBody<span class="pl-k">=</span>L.nextBody;<span class="pl-k">if</span>(L.nextBody)L.nextBody.prevBody<span class="pl-k">=</span>L.prevBody;<span class="pl-k">if</span>(L.nextController)L.nextController.prevController<span class="pl-k">=</span>L.prevController;<span class="pl-k">if</span>(L.prevController)L.prevController.nextController<span class="pl-k">=</span>L.nextController;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_bodyList<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L294" class="blob-num js-line-number" data-line-number="294"></td>
        <td id="LC294" class="blob-code blob-code-inner js-file-line">L)<span class="pl-v">this</span>.m_bodyList<span class="pl-k">=</span>L.nextBody;<span class="pl-k">if</span>(M.m_controllerList<span class="pl-k">==</span>L)M.m_controllerList<span class="pl-k">=</span>L.nextController;M.m_controllerCount<span class="pl-k">--</span>;<span class="pl-v">this</span>.m_bodyCount<span class="pl-k">--</span>};<span class="pl-c1">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Clear</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">for</span>(;<span class="pl-v">this</span>.m_bodyList;)<span class="pl-v">this</span>.RemoveBody(<span class="pl-v">this</span>.m_bodyList.<span class="pl-c1">body</span>)};<span class="pl-c1">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNext</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_next};<span class="pl-c1">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetWorld</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_world};<span class="pl-c1">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetBodyList</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyList};<span class="pl-c1">B</span>.<span class="pl-en">b2ControllerEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};Box2D.inherit(Q,Box2D.Dynamics.Controllers.b2Controller);<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Controllers.b2Controller.<span class="pl-c1">prototype</span>;</td>
      </tr>
      <tr>
        <td id="L295" class="blob-num js-line-number" data-line-number="295"></td>
        <td id="LC295" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Q</span>.<span class="pl-en">b2GravityController</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Controllers.b2Controller.b2Controller.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.G<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.invSqr<span class="pl-k">=</span><span class="pl-c1">true</span>};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Step</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> M<span class="pl-k">=</span><span class="pl-c1">null</span>,L<span class="pl-k">=</span><span class="pl-c1">null</span>,I<span class="pl-k">=</span><span class="pl-c1">null</span>,W<span class="pl-k">=</span><span class="pl-c1">0</span>,Y<span class="pl-k">=</span><span class="pl-c1">null</span>,k<span class="pl-k">=</span><span class="pl-c1">null</span>,z<span class="pl-k">=</span><span class="pl-c1">null</span>,u<span class="pl-k">=</span><span class="pl-c1">0</span>,D<span class="pl-k">=</span><span class="pl-c1">0</span>,H<span class="pl-k">=</span><span class="pl-c1">0</span>;u<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.invSqr)<span class="pl-k">for</span>(M<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;M;M<span class="pl-k">=</span>M.nextBody){L<span class="pl-k">=</span>M.<span class="pl-c1">body</span>;I<span class="pl-k">=</span>L.GetWorldCenter();W<span class="pl-k">=</span>L.GetMass();<span class="pl-k">for</span>(Y<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;Y<span class="pl-k">!=</span>M;Y<span class="pl-k">=</span>Y.nextBody){k<span class="pl-k">=</span>Y.<span class="pl-c1">body</span>;z<span class="pl-k">=</span>k.GetWorldCenter();u<span class="pl-k">=</span>z.<span class="pl-c1">x</span><span class="pl-k">-</span>I.<span class="pl-c1">x</span>;D<span class="pl-k">=</span>z.<span class="pl-c1">y</span><span class="pl-k">-</span>I.<span class="pl-c1">y</span>;H<span class="pl-k">=</span>u<span class="pl-k">*</span>u<span class="pl-k">+</span>D<span class="pl-k">*</span>D;<span class="pl-k">if</span>(<span class="pl-k">!</span>(H<span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)){u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>(u,D);u.Multiply(<span class="pl-v">this</span>.G<span class="pl-k">/</span>H<span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(H)<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L296" class="blob-num js-line-number" data-line-number="296"></td>
        <td id="LC296" class="blob-code blob-code-inner js-file-line">W<span class="pl-k">*</span>k.GetMass());L.IsAwake()<span class="pl-k">&amp;&amp;</span>L.ApplyForce(u,I);u.Multiply(<span class="pl-k">-</span><span class="pl-c1">1</span>);k.IsAwake()<span class="pl-k">&amp;&amp;</span>k.ApplyForce(u,z)}}}<span class="pl-k">else</span> <span class="pl-k">for</span>(M<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;M;M<span class="pl-k">=</span>M.nextBody){L<span class="pl-k">=</span>M.<span class="pl-c1">body</span>;I<span class="pl-k">=</span>L.GetWorldCenter();W<span class="pl-k">=</span>L.GetMass();<span class="pl-k">for</span>(Y<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;Y<span class="pl-k">!=</span>M;Y<span class="pl-k">=</span>Y.nextBody){k<span class="pl-k">=</span>Y.<span class="pl-c1">body</span>;z<span class="pl-k">=</span>k.GetWorldCenter();u<span class="pl-k">=</span>z.<span class="pl-c1">x</span><span class="pl-k">-</span>I.<span class="pl-c1">x</span>;D<span class="pl-k">=</span>z.<span class="pl-c1">y</span><span class="pl-k">-</span>I.<span class="pl-c1">y</span>;H<span class="pl-k">=</span>u<span class="pl-k">*</span>u<span class="pl-k">+</span>D<span class="pl-k">*</span>D;<span class="pl-k">if</span>(<span class="pl-k">!</span>(H<span class="pl-k">&lt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)){u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>(u,D);u.Multiply(<span class="pl-v">this</span>.G<span class="pl-k">/</span>H<span class="pl-k">*</span>W<span class="pl-k">*</span>k.GetMass());L.IsAwake()<span class="pl-k">&amp;&amp;</span>L.ApplyForce(u,I);u.Multiply(<span class="pl-k">-</span><span class="pl-c1">1</span>);k.IsAwake()<span class="pl-k">&amp;&amp;</span>k.ApplyForce(u,z)}}}};Box2D.inherit(V,Box2D.Dynamics.Controllers.b2Controller);<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L297" class="blob-num js-line-number" data-line-number="297"></td>
        <td id="LC297" class="blob-code blob-code-inner js-file-line">Box2D.Dynamics.Controllers.b2Controller.<span class="pl-c1">prototype</span>;<span class="pl-c1">V</span>.<span class="pl-en">b2TensorDampingController</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Controllers.b2Controller.b2Controller.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.T<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">F</span>;<span class="pl-v">this</span>.maxTimestep<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAxisAligned</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">M</span>,<span class="pl-smi">L</span>){<span class="pl-k">if</span>(M<span class="pl-k">===</span><span class="pl-c1">undefined</span>)M<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(L<span class="pl-k">===</span><span class="pl-c1">undefined</span>)L<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.T.col1.<span class="pl-c1">x</span><span class="pl-k">=-</span>M;<span class="pl-v">this</span>.T.col1.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.T.col2.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.T.col2.<span class="pl-c1">y</span><span class="pl-k">=-</span>L;<span class="pl-v">this</span>.maxTimestep<span class="pl-k">=</span>M<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">||</span>L<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">Math</span>.<span class="pl-c1">max</span>(M,L)<span class="pl-k">:</span><span class="pl-c1">0</span>};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Step</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">M</span>){M<span class="pl-k">=</span>M.dt;<span class="pl-k">if</span>(<span class="pl-k">!</span>(M<span class="pl-k">&lt;=</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)){<span class="pl-k">if</span>(M<span class="pl-k">&gt;</span><span class="pl-v">this</span>.maxTimestep<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.maxTimestep<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)M<span class="pl-k">=</span><span class="pl-v">this</span>.maxTimestep;</td>
      </tr>
      <tr>
        <td id="L298" class="blob-num js-line-number" data-line-number="298"></td>
        <td id="LC298" class="blob-code blob-code-inner js-file-line"><span class="pl-k">for</span>(<span class="pl-k">var</span> L<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyList;L;L<span class="pl-k">=</span>L.nextBody){<span class="pl-k">var</span> I<span class="pl-k">=</span>L.<span class="pl-c1">body</span>;<span class="pl-k">if</span>(I.IsAwake()){<span class="pl-k">var</span> W<span class="pl-k">=</span>I.GetWorldVector(G.MulMV(<span class="pl-v">this</span>.T,I.GetLocalVector(I.GetLinearVelocity())));I.SetLinearVelocity(<span class="pl-k">new</span> <span class="pl-en">K</span>(I.GetLinearVelocity().<span class="pl-c1">x</span><span class="pl-k">+</span>W.<span class="pl-c1">x</span><span class="pl-k">*</span>M,I.GetLinearVelocity().<span class="pl-c1">y</span><span class="pl-k">+</span>W.<span class="pl-c1">y</span><span class="pl-k">*</span>M))}}}}})();</td>
      </tr>
      <tr>
        <td id="L299" class="blob-num js-line-number" data-line-number="299"></td>
        <td id="LC299" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> F<span class="pl-k">=</span>Box2D.Common.b2Settings,G<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Mat22,K<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Mat33,y<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Math,w<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Vec2,A<span class="pl-k">=</span>Box2D.Common.<span class="pl-c1">Math</span>.b2Vec3,U<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2DistanceJoint,p<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2DistanceJointDef,B<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2FrictionJoint,Q<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2FrictionJointDef,V<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2GearJoint,M<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2GearJointDef,L<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2Jacobian,I<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2Joint,W<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2JointDef,</td>
      </tr>
      <tr>
        <td id="L300" class="blob-num js-line-number" data-line-number="300"></td>
        <td id="LC300" class="blob-code blob-code-inner js-file-line">Y<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2JointEdge,k<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2LineJoint,z<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2LineJointDef,u<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2MouseJoint,D<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2MouseJointDef,H<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2PrismaticJoint,O<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2PrismaticJointDef,E<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2PulleyJoint,R<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2PulleyJointDef,N<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2RevoluteJoint,S<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2RevoluteJointDef,aa<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2WeldJoint,Z<span class="pl-k">=</span>Box2D.Dynamics.Joints.b2WeldJointDef;</td>
      </tr>
      <tr>
        <td id="L301" class="blob-num js-line-number" data-line-number="301"></td>
        <td id="LC301" class="blob-code blob-code-inner js-file-line">Box2D.inherit(U,Box2D.Dynamics.Joints.b2Joint);<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2Joint.<span class="pl-c1">prototype</span>;<span class="pl-c1">U</span>.<span class="pl-en">b2DistanceJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2Joint.b2Joint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.m_localAnchor1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_localAnchor2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_u<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyA.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor1)};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyB.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor2)};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L302" class="blob-num js-line-number" data-line-number="302"></td>
        <td id="LC302" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">*</span><span class="pl-v">this</span>.m_u.<span class="pl-c1">x</span>,d<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">*</span><span class="pl-v">this</span>.m_u.<span class="pl-c1">y</span>)};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">0</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_length};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLength</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_length<span class="pl-k">=</span>d};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFrequency</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_frequencyHz};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetFrequency</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_frequencyHz<span class="pl-k">=</span>d};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetDampingRatio</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_dampingRatio};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetDampingRatio</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L303" class="blob-num js-line-number" data-line-number="303"></td>
        <td id="LC303" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_dampingRatio<span class="pl-k">=</span>d};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2DistanceJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-v">this</span>.__super.b2Joint.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,d);<span class="pl-v">this</span>.m_localAnchor1.SetV(d.localAnchorA);<span class="pl-v">this</span>.m_localAnchor2.SetV(d.localAnchorB);<span class="pl-v">this</span>.m_length<span class="pl-k">=</span>d.<span class="pl-c1">length</span>;<span class="pl-v">this</span>.m_frequencyHz<span class="pl-k">=</span>d.frequencyHz;<span class="pl-v">this</span>.m_dampingRatio<span class="pl-k">=</span>d.dampingRatio;<span class="pl-v">this</span>.m_bias<span class="pl-k">=</span><span class="pl-v">this</span>.m_gamma<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h,l<span class="pl-k">=</span><span class="pl-c1">0</span>,j<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,o<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB;h<span class="pl-k">=</span>j.m_xf.R;<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span>j.m_sweep.localCenter.<span class="pl-c1">x</span>,n<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L304" class="blob-num js-line-number" data-line-number="304"></td>
        <td id="LC304" class="blob-code blob-code-inner js-file-line">j.m_sweep.localCenter.<span class="pl-c1">y</span>;l<span class="pl-k">=</span>h.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">+</span>h.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>n;n<span class="pl-k">=</span>h.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>q<span class="pl-k">+</span>h.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>n;q<span class="pl-k">=</span>l;h<span class="pl-k">=</span>o.m_xf.R;<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span>o.m_sweep.localCenter.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span>o.m_sweep.localCenter.<span class="pl-c1">y</span>;l<span class="pl-k">=</span>h.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span>h.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span>h.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span>h.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>l;<span class="pl-v">this</span>.m_u.<span class="pl-c1">x</span><span class="pl-k">=</span>o.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span>a<span class="pl-k">-</span>j.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">-</span>q;<span class="pl-v">this</span>.m_u.<span class="pl-c1">y</span><span class="pl-k">=</span>o.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>c<span class="pl-k">-</span>j.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">-</span>n;l<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(<span class="pl-v">this</span>.m_u.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_u.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_u.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_u.<span class="pl-c1">y</span>);l<span class="pl-k">&gt;</span>F.b2_linearSlop<span class="pl-k">?</span><span class="pl-v">this</span>.m_u.Multiply(<span class="pl-c1">1</span><span class="pl-k">/</span>l)<span class="pl-k">:</span><span class="pl-v">this</span>.m_u.SetZero();h<span class="pl-k">=</span>q<span class="pl-k">*</span><span class="pl-v">this</span>.m_u.<span class="pl-c1">y</span><span class="pl-k">-</span>n<span class="pl-k">*</span><span class="pl-v">this</span>.m_u.<span class="pl-c1">x</span>;<span class="pl-k">var</span> g<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.m_u.<span class="pl-c1">y</span><span class="pl-k">-</span>c<span class="pl-k">*</span><span class="pl-v">this</span>.m_u.<span class="pl-c1">x</span>;</td>
      </tr>
      <tr>
        <td id="L305" class="blob-num js-line-number" data-line-number="305"></td>
        <td id="LC305" class="blob-code blob-code-inner js-file-line">h<span class="pl-k">=</span>j.m_invMass<span class="pl-k">+</span>j.m_invI<span class="pl-k">*</span>h<span class="pl-k">*</span>h<span class="pl-k">+</span>o.m_invMass<span class="pl-k">+</span>o.m_invI<span class="pl-k">*</span>g<span class="pl-k">*</span>g;<span class="pl-v">this</span>.m_mass<span class="pl-k">=</span>h<span class="pl-k">!=</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span>h<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_frequencyHz<span class="pl-k">&gt;</span><span class="pl-c1">0</span>){l<span class="pl-k">=</span>l<span class="pl-k">-</span><span class="pl-v">this</span>.m_length;g<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_frequencyHz;<span class="pl-k">var</span> b<span class="pl-k">=</span><span class="pl-v">this</span>.m_mass<span class="pl-k">*</span>g<span class="pl-k">*</span>g;<span class="pl-v">this</span>.m_gamma<span class="pl-k">=</span>d.dt<span class="pl-k">*</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_mass<span class="pl-k">*</span><span class="pl-v">this</span>.m_dampingRatio<span class="pl-k">*</span>g<span class="pl-k">+</span>d.dt<span class="pl-k">*</span>b);<span class="pl-v">this</span>.m_gamma<span class="pl-k">=</span><span class="pl-v">this</span>.m_gamma<span class="pl-k">!=</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>.m_gamma<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_bias<span class="pl-k">=</span>l<span class="pl-k">*</span>d.dt<span class="pl-k">*</span>b<span class="pl-k">*</span><span class="pl-v">this</span>.m_gamma;<span class="pl-v">this</span>.m_mass<span class="pl-k">=</span>h<span class="pl-k">+</span><span class="pl-v">this</span>.m_gamma;<span class="pl-v">this</span>.m_mass<span class="pl-k">=</span><span class="pl-v">this</span>.m_mass<span class="pl-k">!=</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>.m_mass<span class="pl-k">:</span><span class="pl-c1">0</span>}<span class="pl-k">if</span>(d.warmStarting){<span class="pl-v">this</span>.m_impulse<span class="pl-k">*=</span>d.dtRatio;d<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">*</span><span class="pl-v">this</span>.m_u.<span class="pl-c1">x</span>;h<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">*</span><span class="pl-v">this</span>.m_u.<span class="pl-c1">y</span>;j.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">-=</span></td>
      </tr>
      <tr>
        <td id="L306" class="blob-num js-line-number" data-line-number="306"></td>
        <td id="LC306" class="blob-code blob-code-inner js-file-line">j.m_invMass<span class="pl-k">*</span>d;j.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">-=</span>j.m_invMass<span class="pl-k">*</span>h;j.m_angularVelocity<span class="pl-k">-=</span>j.m_invI<span class="pl-k">*</span>(q<span class="pl-k">*</span>h<span class="pl-k">-</span>n<span class="pl-k">*</span>d);o.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span>o.m_invMass<span class="pl-k">*</span>d;o.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>o.m_invMass<span class="pl-k">*</span>h;o.m_angularVelocity<span class="pl-k">+=</span>o.m_invI<span class="pl-k">*</span>(a<span class="pl-k">*</span>h<span class="pl-k">-</span>c<span class="pl-k">*</span>d)}<span class="pl-k">else</span> <span class="pl-v">this</span>.m_impulse<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d,h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,l<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB;d<span class="pl-k">=</span>h.m_xf.R;<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">x</span>,o<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">y</span>,q<span class="pl-k">=</span>d.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>j<span class="pl-k">+</span>d.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>o;o<span class="pl-k">=</span>d.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>j<span class="pl-k">+</span>d.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>o;j<span class="pl-k">=</span>q;d<span class="pl-k">=</span>l.m_xf.R;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L307" class="blob-num js-line-number" data-line-number="307"></td>
        <td id="LC307" class="blob-code blob-code-inner js-file-line">l.m_sweep.localCenter.<span class="pl-c1">x</span>,a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span>l.m_sweep.localCenter.<span class="pl-c1">y</span>;q<span class="pl-k">=</span>d.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span>d.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span>d.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span>d.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>q;q<span class="pl-k">=-</span><span class="pl-v">this</span>.m_mass<span class="pl-k">*</span>(<span class="pl-v">this</span>.m_u.<span class="pl-c1">x</span><span class="pl-k">*</span>(l.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+-</span>l.m_angularVelocity<span class="pl-k">*</span>a<span class="pl-k">-</span>(h.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+-</span>h.m_angularVelocity<span class="pl-k">*</span>o))<span class="pl-k">+</span><span class="pl-v">this</span>.m_u.<span class="pl-c1">y</span><span class="pl-k">*</span>(l.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+</span>l.m_angularVelocity<span class="pl-k">*</span>n<span class="pl-k">-</span>(h.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+</span>h.m_angularVelocity<span class="pl-k">*</span>j))<span class="pl-k">+</span><span class="pl-v">this</span>.m_bias<span class="pl-k">+</span><span class="pl-v">this</span>.m_gamma<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse);<span class="pl-v">this</span>.m_impulse<span class="pl-k">+=</span>q;d<span class="pl-k">=</span>q<span class="pl-k">*</span><span class="pl-v">this</span>.m_u.<span class="pl-c1">x</span>;q<span class="pl-k">=</span>q<span class="pl-k">*</span><span class="pl-v">this</span>.m_u.<span class="pl-c1">y</span>;h.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">-=</span>h.m_invMass<span class="pl-k">*</span>d;h.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">-=</span>h.m_invMass<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L308" class="blob-num js-line-number" data-line-number="308"></td>
        <td id="LC308" class="blob-code blob-code-inner js-file-line">q;h.m_angularVelocity<span class="pl-k">-=</span>h.m_invI<span class="pl-k">*</span>(j<span class="pl-k">*</span>q<span class="pl-k">-</span>o<span class="pl-k">*</span>d);l.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span>l.m_invMass<span class="pl-k">*</span>d;l.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>l.m_invMass<span class="pl-k">*</span>q;l.m_angularVelocity<span class="pl-k">+=</span>l.m_invI<span class="pl-k">*</span>(n<span class="pl-k">*</span>q<span class="pl-k">-</span>a<span class="pl-k">*</span>d)};<span class="pl-c1">U</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_frequencyHz<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-k">return</span> <span class="pl-c1">true</span>;<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,l<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB;d<span class="pl-k">=</span>h.m_xf.R;<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">x</span>,o<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">y</span>,q<span class="pl-k">=</span>d.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>j<span class="pl-k">+</span>d.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>o;o<span class="pl-k">=</span>d.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>j<span class="pl-k">+</span>d.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>o;j<span class="pl-k">=</span>q;d<span class="pl-k">=</span>l.m_xf.R;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span>l.m_sweep.localCenter.<span class="pl-c1">x</span>,</td>
      </tr>
      <tr>
        <td id="L309" class="blob-num js-line-number" data-line-number="309"></td>
        <td id="LC309" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span>l.m_sweep.localCenter.<span class="pl-c1">y</span>;q<span class="pl-k">=</span>d.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span>d.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span>d.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span>d.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>q;q<span class="pl-k">=</span>l.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span>n<span class="pl-k">-</span>h.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">-</span>j;<span class="pl-k">var</span> c<span class="pl-k">=</span>l.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>a<span class="pl-k">-</span>h.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">-</span>o;d<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(q<span class="pl-k">*</span>q<span class="pl-k">+</span>c<span class="pl-k">*</span>c);q<span class="pl-k">/=</span>d;c<span class="pl-k">/=</span>d;d<span class="pl-k">=</span>d<span class="pl-k">-</span><span class="pl-v">this</span>.m_length;d<span class="pl-k">=</span>y.Clamp(d,<span class="pl-k">-</span>F.b2_maxLinearCorrection,F.b2_maxLinearCorrection);<span class="pl-k">var</span> g<span class="pl-k">=-</span><span class="pl-v">this</span>.m_mass<span class="pl-k">*</span>d;<span class="pl-v">this</span>.m_u.Set(q,c);q<span class="pl-k">=</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_u.<span class="pl-c1">x</span>;c<span class="pl-k">=</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_u.<span class="pl-c1">y</span>;h.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">-=</span>h.m_invMass<span class="pl-k">*</span>q;h.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">-=</span>h.m_invMass<span class="pl-k">*</span>c;h.m_sweep.a<span class="pl-k">-=</span>h.m_invI<span class="pl-k">*</span>(j<span class="pl-k">*</span>c<span class="pl-k">-</span>o<span class="pl-k">*</span>q);l.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+=</span>l.m_invMass<span class="pl-k">*</span>q;l.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+=</span>l.m_invMass<span class="pl-k">*</span>c;</td>
      </tr>
      <tr>
        <td id="L310" class="blob-num js-line-number" data-line-number="310"></td>
        <td id="LC310" class="blob-code blob-code-inner js-file-line">l.m_sweep.a<span class="pl-k">+=</span>l.m_invI<span class="pl-k">*</span>(n<span class="pl-k">*</span>c<span class="pl-k">-</span>a<span class="pl-k">*</span>q);h.SynchronizeTransform();l.SynchronizeTransform();<span class="pl-k">return</span> y.Abs(d)<span class="pl-k">&lt;</span>F.b2_linearSlop};Box2D.inherit(p,Box2D.Dynamics.Joints.b2JointDef);<span class="pl-c1">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2JointDef.<span class="pl-c1">prototype</span>;<span class="pl-c1">p</span>.<span class="pl-en">b2DistanceJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.localAnchorA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.localAnchorB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2DistanceJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.__super.b2JointDef.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span>I.e_distanceJoint;<span class="pl-v">this</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.dampingRatio<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L311" class="blob-num js-line-number" data-line-number="311"></td>
        <td id="LC311" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.frequencyHz<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">p</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>,<span class="pl-smi">j</span>){<span class="pl-v">this</span>.bodyA<span class="pl-k">=</span>d;<span class="pl-v">this</span>.bodyB<span class="pl-k">=</span>h;<span class="pl-v">this</span>.localAnchorA.SetV(<span class="pl-v">this</span>.bodyA.GetLocalPoint(l));<span class="pl-v">this</span>.localAnchorB.SetV(<span class="pl-v">this</span>.bodyB.GetLocalPoint(j));d<span class="pl-k">=</span>j.<span class="pl-c1">x</span><span class="pl-k">-</span>l.<span class="pl-c1">x</span>;l<span class="pl-k">=</span>j.<span class="pl-c1">y</span><span class="pl-k">-</span>l.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.<span class="pl-c1">length</span><span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(d<span class="pl-k">*</span>d<span class="pl-k">+</span>l<span class="pl-k">*</span>l);<span class="pl-v">this</span>.dampingRatio<span class="pl-k">=</span><span class="pl-v">this</span>.frequencyHz<span class="pl-k">=</span><span class="pl-c1">0</span>};Box2D.inherit(B,Box2D.Dynamics.Joints.b2Joint);<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2Joint.<span class="pl-c1">prototype</span>;<span class="pl-c1">B</span>.<span class="pl-en">b2FrictionJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2Joint.b2Joint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.m_localAnchorA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;</td>
      </tr>
      <tr>
        <td id="L312" class="blob-num js-line-number" data-line-number="312"></td>
        <td id="LC312" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_localAnchorB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_linearMass<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-v">this</span>.m_linearImpulse<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyA.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchorA)};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyB.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchorB)};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span><span class="pl-v">this</span>.m_linearImpulse.<span class="pl-c1">x</span>,d<span class="pl-k">*</span><span class="pl-v">this</span>.m_linearImpulse.<span class="pl-c1">y</span>)};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> d<span class="pl-k">*</span><span class="pl-v">this</span>.m_angularImpulse};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMaxForce</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L313" class="blob-num js-line-number" data-line-number="313"></td>
        <td id="LC313" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_maxForce<span class="pl-k">=</span>d};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMaxForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_maxForce};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMaxTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_maxTorque<span class="pl-k">=</span>d};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMaxTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_maxTorque};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2FrictionJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-v">this</span>.__super.b2Joint.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,d);<span class="pl-v">this</span>.m_localAnchorA.SetV(d.localAnchorA);<span class="pl-v">this</span>.m_localAnchorB.SetV(d.localAnchorB);<span class="pl-v">this</span>.m_linearMass.SetZero();<span class="pl-v">this</span>.m_angularMass<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_linearImpulse.SetZero();<span class="pl-v">this</span>.m_angularImpulse<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L314" class="blob-num js-line-number" data-line-number="314"></td>
        <td id="LC314" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_maxForce<span class="pl-k">=</span>d.maxForce;<span class="pl-v">this</span>.m_maxTorque<span class="pl-k">=</span>d.maxTorque};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h,l<span class="pl-k">=</span><span class="pl-c1">0</span>,j<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,o<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB;h<span class="pl-k">=</span>j.m_xf.R;<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorA.<span class="pl-c1">x</span><span class="pl-k">-</span>j.m_sweep.localCenter.<span class="pl-c1">x</span>,n<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorA.<span class="pl-c1">y</span><span class="pl-k">-</span>j.m_sweep.localCenter.<span class="pl-c1">y</span>;l<span class="pl-k">=</span>h.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">+</span>h.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>n;n<span class="pl-k">=</span>h.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>q<span class="pl-k">+</span>h.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>n;q<span class="pl-k">=</span>l;h<span class="pl-k">=</span>o.m_xf.R;<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorB.<span class="pl-c1">x</span><span class="pl-k">-</span>o.m_sweep.localCenter.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorB.<span class="pl-c1">y</span><span class="pl-k">-</span>o.m_sweep.localCenter.<span class="pl-c1">y</span>;l<span class="pl-k">=</span>h.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span>h.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span>h.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span>h.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>l;h<span class="pl-k">=</span>j.m_invMass;l<span class="pl-k">=</span>o.m_invMass;</td>
      </tr>
      <tr>
        <td id="L315" class="blob-num js-line-number" data-line-number="315"></td>
        <td id="LC315" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> g<span class="pl-k">=</span>j.m_invI,b<span class="pl-k">=</span>o.m_invI,e<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;e.col1.<span class="pl-c1">x</span><span class="pl-k">=</span>h<span class="pl-k">+</span>l;e.col2.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;e.col1.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;e.col2.<span class="pl-c1">y</span><span class="pl-k">=</span>h<span class="pl-k">+</span>l;e.col1.<span class="pl-c1">x</span><span class="pl-k">+=</span>g<span class="pl-k">*</span>n<span class="pl-k">*</span>n;e.col2.<span class="pl-c1">x</span><span class="pl-k">+=-</span>g<span class="pl-k">*</span>q<span class="pl-k">*</span>n;e.col1.<span class="pl-c1">y</span><span class="pl-k">+=-</span>g<span class="pl-k">*</span>q<span class="pl-k">*</span>n;e.col2.<span class="pl-c1">y</span><span class="pl-k">+=</span>g<span class="pl-k">*</span>q<span class="pl-k">*</span>q;e.col1.<span class="pl-c1">x</span><span class="pl-k">+=</span>b<span class="pl-k">*</span>c<span class="pl-k">*</span>c;e.col2.<span class="pl-c1">x</span><span class="pl-k">+=-</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>c;e.col1.<span class="pl-c1">y</span><span class="pl-k">+=-</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>c;e.col2.<span class="pl-c1">y</span><span class="pl-k">+=</span>b<span class="pl-k">*</span>a<span class="pl-k">*</span>a;e.GetInverse(<span class="pl-v">this</span>.m_linearMass);<span class="pl-v">this</span>.m_angularMass<span class="pl-k">=</span>g<span class="pl-k">+</span>b;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_angularMass<span class="pl-k">&gt;</span><span class="pl-c1">0</span>)<span class="pl-v">this</span>.m_angularMass<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>.m_angularMass;<span class="pl-k">if</span>(d.warmStarting){<span class="pl-v">this</span>.m_linearImpulse.<span class="pl-c1">x</span><span class="pl-k">*=</span>d.dtRatio;<span class="pl-v">this</span>.m_linearImpulse.<span class="pl-c1">y</span><span class="pl-k">*=</span>d.dtRatio;<span class="pl-v">this</span>.m_angularImpulse<span class="pl-k">*=</span>d.dtRatio;d<span class="pl-k">=</span><span class="pl-v">this</span>.m_linearImpulse;j.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">-=</span>h<span class="pl-k">*</span>d.<span class="pl-c1">x</span>;</td>
      </tr>
      <tr>
        <td id="L316" class="blob-num js-line-number" data-line-number="316"></td>
        <td id="LC316" class="blob-code blob-code-inner js-file-line">j.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">-=</span>h<span class="pl-k">*</span>d.<span class="pl-c1">y</span>;j.m_angularVelocity<span class="pl-k">-=</span>g<span class="pl-k">*</span>(q<span class="pl-k">*</span>d.<span class="pl-c1">y</span><span class="pl-k">-</span>n<span class="pl-k">*</span>d.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_angularImpulse);o.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span>l<span class="pl-k">*</span>d.<span class="pl-c1">x</span>;o.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>l<span class="pl-k">*</span>d.<span class="pl-c1">y</span>;o.m_angularVelocity<span class="pl-k">+=</span>b<span class="pl-k">*</span>(a<span class="pl-k">*</span>d.<span class="pl-c1">y</span><span class="pl-k">-</span>c<span class="pl-k">*</span>d.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_angularImpulse)}<span class="pl-k">else</span>{<span class="pl-v">this</span>.m_linearImpulse.SetZero();<span class="pl-v">this</span>.m_angularImpulse<span class="pl-k">=</span><span class="pl-c1">0</span>}};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h,l<span class="pl-k">=</span><span class="pl-c1">0</span>,j<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,o<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,q<span class="pl-k">=</span>j.m_linearVelocity,n<span class="pl-k">=</span>j.m_angularVelocity,a<span class="pl-k">=</span>o.m_linearVelocity,c<span class="pl-k">=</span>o.m_angularVelocity,g<span class="pl-k">=</span>j.m_invMass,b<span class="pl-k">=</span>o.m_invMass,e<span class="pl-k">=</span>j.m_invI,f<span class="pl-k">=</span>o.m_invI;h<span class="pl-k">=</span>j.m_xf.R;<span class="pl-k">var</span> m<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L317" class="blob-num js-line-number" data-line-number="317"></td>
        <td id="LC317" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_localAnchorA.<span class="pl-c1">x</span><span class="pl-k">-</span>j.m_sweep.localCenter.<span class="pl-c1">x</span>,r<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorA.<span class="pl-c1">y</span><span class="pl-k">-</span>j.m_sweep.localCenter.<span class="pl-c1">y</span>;l<span class="pl-k">=</span>h.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>m<span class="pl-k">+</span>h.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>r;r<span class="pl-k">=</span>h.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>m<span class="pl-k">+</span>h.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>r;m<span class="pl-k">=</span>l;h<span class="pl-k">=</span>o.m_xf.R;<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorB.<span class="pl-c1">x</span><span class="pl-k">-</span>o.m_sweep.localCenter.<span class="pl-c1">x</span>,v<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorB.<span class="pl-c1">y</span><span class="pl-k">-</span>o.m_sweep.localCenter.<span class="pl-c1">y</span>;l<span class="pl-k">=</span>h.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>s<span class="pl-k">+</span>h.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>v;v<span class="pl-k">=</span>h.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>s<span class="pl-k">+</span>h.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>v;s<span class="pl-k">=</span>l;h<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">=-</span><span class="pl-v">this</span>.m_angularMass<span class="pl-k">*</span>(c<span class="pl-k">-</span>n);<span class="pl-k">var</span> t<span class="pl-k">=</span><span class="pl-v">this</span>.m_angularImpulse;h<span class="pl-k">=</span>d.dt<span class="pl-k">*</span><span class="pl-v">this</span>.m_maxTorque;<span class="pl-v">this</span>.m_angularImpulse<span class="pl-k">=</span>y.Clamp(<span class="pl-v">this</span>.m_angularImpulse<span class="pl-k">+</span>l,<span class="pl-k">-</span>h,h);l<span class="pl-k">=</span><span class="pl-v">this</span>.m_angularImpulse<span class="pl-k">-</span>t;n<span class="pl-k">-=</span>e<span class="pl-k">*</span>l;c<span class="pl-k">+=</span>f<span class="pl-k">*</span>l;h<span class="pl-k">=</span>y.MulMV(<span class="pl-v">this</span>.m_linearMass,</td>
      </tr>
      <tr>
        <td id="L318" class="blob-num js-line-number" data-line-number="318"></td>
        <td id="LC318" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">w</span>(<span class="pl-k">-</span>(a.<span class="pl-c1">x</span><span class="pl-k">-</span>c<span class="pl-k">*</span>v<span class="pl-k">-</span>q.<span class="pl-c1">x</span><span class="pl-k">+</span>n<span class="pl-k">*</span>r),<span class="pl-k">-</span>(a.<span class="pl-c1">y</span><span class="pl-k">+</span>c<span class="pl-k">*</span>s<span class="pl-k">-</span>q.<span class="pl-c1">y</span><span class="pl-k">-</span>n<span class="pl-k">*</span>m)));l<span class="pl-k">=</span><span class="pl-v">this</span>.m_linearImpulse.Copy();<span class="pl-v">this</span>.m_linearImpulse.Add(h);h<span class="pl-k">=</span>d.dt<span class="pl-k">*</span><span class="pl-v">this</span>.m_maxForce;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_linearImpulse.LengthSquared()<span class="pl-k">&gt;</span>h<span class="pl-k">*</span>h){<span class="pl-v">this</span>.m_linearImpulse.Normalize();<span class="pl-v">this</span>.m_linearImpulse.Multiply(h)}h<span class="pl-k">=</span>y.SubtractVV(<span class="pl-v">this</span>.m_linearImpulse,l);q.<span class="pl-c1">x</span><span class="pl-k">-=</span>g<span class="pl-k">*</span>h.<span class="pl-c1">x</span>;q.<span class="pl-c1">y</span><span class="pl-k">-=</span>g<span class="pl-k">*</span>h.<span class="pl-c1">y</span>;n<span class="pl-k">-=</span>e<span class="pl-k">*</span>(m<span class="pl-k">*</span>h.<span class="pl-c1">y</span><span class="pl-k">-</span>r<span class="pl-k">*</span>h.<span class="pl-c1">x</span>);a.<span class="pl-c1">x</span><span class="pl-k">+=</span>b<span class="pl-k">*</span>h.<span class="pl-c1">x</span>;a.<span class="pl-c1">y</span><span class="pl-k">+=</span>b<span class="pl-k">*</span>h.<span class="pl-c1">y</span>;c<span class="pl-k">+=</span>f<span class="pl-k">*</span>(s<span class="pl-k">*</span>h.<span class="pl-c1">y</span><span class="pl-k">-</span>v<span class="pl-k">*</span>h.<span class="pl-c1">x</span>);j.m_angularVelocity<span class="pl-k">=</span>n;o.m_angularVelocity<span class="pl-k">=</span>c};<span class="pl-c1">B</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">true</span>};Box2D.inherit(Q,Box2D.Dynamics.Joints.b2JointDef);</td>
      </tr>
      <tr>
        <td id="L319" class="blob-num js-line-number" data-line-number="319"></td>
        <td id="LC319" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2JointDef.<span class="pl-c1">prototype</span>;<span class="pl-c1">Q</span>.<span class="pl-en">b2FrictionJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.localAnchorA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.localAnchorB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2FrictionJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.__super.b2JointDef.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span>I.e_frictionJoint;<span class="pl-v">this</span>.maxTorque<span class="pl-k">=</span><span class="pl-v">this</span>.maxForce<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">Q</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>){<span class="pl-v">this</span>.bodyA<span class="pl-k">=</span>d;<span class="pl-v">this</span>.bodyB<span class="pl-k">=</span>h;<span class="pl-v">this</span>.localAnchorA.SetV(<span class="pl-v">this</span>.bodyA.GetLocalPoint(l));<span class="pl-v">this</span>.localAnchorB.SetV(<span class="pl-v">this</span>.bodyB.GetLocalPoint(l))};</td>
      </tr>
      <tr>
        <td id="L320" class="blob-num js-line-number" data-line-number="320"></td>
        <td id="LC320" class="blob-code blob-code-inner js-file-line">Box2D.inherit(V,Box2D.Dynamics.Joints.b2Joint);<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2Joint.<span class="pl-c1">prototype</span>;<span class="pl-c1">V</span>.<span class="pl-en">b2GearJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2Joint.b2Joint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.m_groundAnchor1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_groundAnchor2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_localAnchor1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_localAnchor2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_J<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">L</span>};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyA.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor1)};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyB.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor2)};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionForce</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L321" class="blob-num js-line-number" data-line-number="321"></td>
        <td id="LC321" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.linearB.<span class="pl-c1">x</span>,d<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.linearB.<span class="pl-c1">y</span>)};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB.m_xf.R,l<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_bodyB.m_sweep.localCenter.<span class="pl-c1">x</span>,j<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_bodyB.m_sweep.localCenter.<span class="pl-c1">y</span>,o<span class="pl-k">=</span>h.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>l<span class="pl-k">+</span>h.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>j;j<span class="pl-k">=</span>h.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>l<span class="pl-k">+</span>h.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>j;l<span class="pl-k">=</span>o;<span class="pl-k">return</span> d<span class="pl-k">*</span>(<span class="pl-v">this</span>.m_impulse<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.angularB<span class="pl-k">-</span>l<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.linearB.<span class="pl-c1">y</span><span class="pl-k">+</span>j<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.linearB.<span class="pl-c1">x</span>)};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetRatio</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L322" class="blob-num js-line-number" data-line-number="322"></td>
        <td id="LC322" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_ratio};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetRatio</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_ratio<span class="pl-k">=</span>d};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2GearJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-v">this</span>.__super.b2Joint.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,d);<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(d.joint1.m_type),l<span class="pl-k">=</span><span class="pl-c1">parseInt</span>(d.joint2.m_type);<span class="pl-v">this</span>.m_prismatic2<span class="pl-k">=</span><span class="pl-v">this</span>.m_revolute2<span class="pl-k">=</span><span class="pl-v">this</span>.m_prismatic1<span class="pl-k">=</span><span class="pl-v">this</span>.m_revolute1<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-c1">0</span>,o<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_ground1<span class="pl-k">=</span>d.joint1.GetBodyA();<span class="pl-v">this</span>.m_bodyA<span class="pl-k">=</span>d.joint1.GetBodyB();<span class="pl-k">if</span>(h<span class="pl-k">==</span>I.e_revoluteJoint){<span class="pl-v">this</span>.m_revolute1<span class="pl-k">=</span>d.joint1 <span class="pl-k">instanceof</span> N<span class="pl-k">?</span>d.joint1<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_groundAnchor1.SetV(<span class="pl-v">this</span>.m_revolute1.m_localAnchor1);</td>
      </tr>
      <tr>
        <td id="L323" class="blob-num js-line-number" data-line-number="323"></td>
        <td id="LC323" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_localAnchor1.SetV(<span class="pl-v">this</span>.m_revolute1.m_localAnchor2);j<span class="pl-k">=</span><span class="pl-v">this</span>.m_revolute1.GetJointAngle()}<span class="pl-k">else</span>{<span class="pl-v">this</span>.m_prismatic1<span class="pl-k">=</span>d.joint1 <span class="pl-k">instanceof</span> H<span class="pl-k">?</span>d.joint1<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_groundAnchor1.SetV(<span class="pl-v">this</span>.m_prismatic1.m_localAnchor1);<span class="pl-v">this</span>.m_localAnchor1.SetV(<span class="pl-v">this</span>.m_prismatic1.m_localAnchor2);j<span class="pl-k">=</span><span class="pl-v">this</span>.m_prismatic1.GetJointTranslation()}<span class="pl-v">this</span>.m_ground2<span class="pl-k">=</span>d.joint2.GetBodyA();<span class="pl-v">this</span>.m_bodyB<span class="pl-k">=</span>d.joint2.GetBodyB();<span class="pl-k">if</span>(l<span class="pl-k">==</span>I.e_revoluteJoint){<span class="pl-v">this</span>.m_revolute2<span class="pl-k">=</span>d.joint2 <span class="pl-k">instanceof</span> N<span class="pl-k">?</span>d.joint2<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_groundAnchor2.SetV(<span class="pl-v">this</span>.m_revolute2.m_localAnchor1);</td>
      </tr>
      <tr>
        <td id="L324" class="blob-num js-line-number" data-line-number="324"></td>
        <td id="LC324" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_localAnchor2.SetV(<span class="pl-v">this</span>.m_revolute2.m_localAnchor2);o<span class="pl-k">=</span><span class="pl-v">this</span>.m_revolute2.GetJointAngle()}<span class="pl-k">else</span>{<span class="pl-v">this</span>.m_prismatic2<span class="pl-k">=</span>d.joint2 <span class="pl-k">instanceof</span> H<span class="pl-k">?</span>d.joint2<span class="pl-k">:</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_groundAnchor2.SetV(<span class="pl-v">this</span>.m_prismatic2.m_localAnchor1);<span class="pl-v">this</span>.m_localAnchor2.SetV(<span class="pl-v">this</span>.m_prismatic2.m_localAnchor2);o<span class="pl-k">=</span><span class="pl-v">this</span>.m_prismatic2.GetJointTranslation()}<span class="pl-v">this</span>.m_ratio<span class="pl-k">=</span>d.ratio;<span class="pl-v">this</span>.m_constant<span class="pl-k">=</span>j<span class="pl-k">+</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span>o;<span class="pl-v">this</span>.m_impulse<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-v">this</span>.m_ground1,l<span class="pl-k">=</span><span class="pl-v">this</span>.m_ground2,j<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,o<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,</td>
      </tr>
      <tr>
        <td id="L325" class="blob-num js-line-number" data-line-number="325"></td>
        <td id="LC325" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>,a<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span>a<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_J.SetZero();<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_revolute1){<span class="pl-v">this</span>.m_J.angularA<span class="pl-k">=-</span><span class="pl-c1">1</span>;b<span class="pl-k">+=</span>j.m_invI}<span class="pl-k">else</span>{h<span class="pl-k">=</span>h.m_xf.R;n<span class="pl-k">=</span><span class="pl-v">this</span>.m_prismatic1.m_localXAxis1;q<span class="pl-k">=</span>h.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>h.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>;n<span class="pl-k">=</span>h.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>h.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>;h<span class="pl-k">=</span>j.m_xf.R;a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span>j.m_sweep.localCenter.<span class="pl-c1">x</span>;c<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span>j.m_sweep.localCenter.<span class="pl-c1">y</span>;g<span class="pl-k">=</span>h.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span>h.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span>h.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span>h.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>g;a<span class="pl-k">=</span>a<span class="pl-k">*</span>n<span class="pl-k">-</span>c<span class="pl-k">*</span>q;<span class="pl-v">this</span>.m_J.linearA.Set(<span class="pl-k">-</span>q,<span class="pl-k">-</span>n);<span class="pl-v">this</span>.m_J.angularA<span class="pl-k">=-</span>a;b<span class="pl-k">+=</span>j.m_invMass<span class="pl-k">+</span>j.m_invI<span class="pl-k">*</span>a<span class="pl-k">*</span>a}<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_revolute2){<span class="pl-v">this</span>.m_J.angularB<span class="pl-k">=-</span><span class="pl-v">this</span>.m_ratio;</td>
      </tr>
      <tr>
        <td id="L326" class="blob-num js-line-number" data-line-number="326"></td>
        <td id="LC326" class="blob-code blob-code-inner js-file-line">b<span class="pl-k">+=</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span>o.m_invI}<span class="pl-k">else</span>{h<span class="pl-k">=</span>l.m_xf.R;n<span class="pl-k">=</span><span class="pl-v">this</span>.m_prismatic2.m_localXAxis1;q<span class="pl-k">=</span>h.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>h.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>;n<span class="pl-k">=</span>h.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">x</span><span class="pl-k">+</span>h.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>n.<span class="pl-c1">y</span>;h<span class="pl-k">=</span>o.m_xf.R;a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span>o.m_sweep.localCenter.<span class="pl-c1">x</span>;c<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span>o.m_sweep.localCenter.<span class="pl-c1">y</span>;g<span class="pl-k">=</span>h.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span>h.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span>h.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span>h.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>g;a<span class="pl-k">=</span>a<span class="pl-k">*</span>n<span class="pl-k">-</span>c<span class="pl-k">*</span>q;<span class="pl-v">this</span>.m_J.linearB.Set(<span class="pl-k">-</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span>q,<span class="pl-k">-</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span>n);<span class="pl-v">this</span>.m_J.angularB<span class="pl-k">=-</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span>a;b<span class="pl-k">+=</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span>(o.m_invMass<span class="pl-k">+</span>o.m_invI<span class="pl-k">*</span>a<span class="pl-k">*</span>a)}<span class="pl-v">this</span>.m_mass<span class="pl-k">=</span>b<span class="pl-k">&gt;</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span>b<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(d.warmStarting){j.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span></td>
      </tr>
      <tr>
        <td id="L327" class="blob-num js-line-number" data-line-number="327"></td>
        <td id="LC327" class="blob-code blob-code-inner js-file-line">j.m_invMass<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.linearA.<span class="pl-c1">x</span>;j.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>j.m_invMass<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.linearA.<span class="pl-c1">y</span>;j.m_angularVelocity<span class="pl-k">+=</span>j.m_invI<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.angularA;o.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span>o.m_invMass<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.linearB.<span class="pl-c1">x</span>;o.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>o.m_invMass<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.linearB.<span class="pl-c1">y</span>;o.m_angularVelocity<span class="pl-k">+=</span>o.m_invI<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.angularB}<span class="pl-k">else</span> <span class="pl-v">this</span>.m_impulse<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,l<span class="pl-k">=-</span><span class="pl-v">this</span>.m_mass<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.Compute(d.m_linearVelocity,</td>
      </tr>
      <tr>
        <td id="L328" class="blob-num js-line-number" data-line-number="328"></td>
        <td id="LC328" class="blob-code blob-code-inner js-file-line">d.m_angularVelocity,h.m_linearVelocity,h.m_angularVelocity);<span class="pl-v">this</span>.m_impulse<span class="pl-k">+=</span>l;d.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span>d.m_invMass<span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.linearA.<span class="pl-c1">x</span>;d.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>d.m_invMass<span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.linearA.<span class="pl-c1">y</span>;d.m_angularVelocity<span class="pl-k">+=</span>d.m_invI<span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.angularA;h.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span>h.m_invMass<span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.linearB.<span class="pl-c1">x</span>;h.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>h.m_invMass<span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.linearB.<span class="pl-c1">y</span>;h.m_angularVelocity<span class="pl-k">+=</span>h.m_invI<span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.angularB};<span class="pl-c1">V</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,l<span class="pl-k">=</span><span class="pl-c1">0</span>,j<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">=</span><span class="pl-v">this</span>.m_revolute1<span class="pl-k">?</span></td>
      </tr>
      <tr>
        <td id="L329" class="blob-num js-line-number" data-line-number="329"></td>
        <td id="LC329" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_revolute1.GetJointAngle()<span class="pl-k">:</span><span class="pl-v">this</span>.m_prismatic1.GetJointTranslation();j<span class="pl-k">=</span><span class="pl-v">this</span>.m_revolute2<span class="pl-k">?</span><span class="pl-v">this</span>.m_revolute2.GetJointAngle()<span class="pl-k">:</span><span class="pl-v">this</span>.m_prismatic2.GetJointTranslation();l<span class="pl-k">=-</span><span class="pl-v">this</span>.m_mass<span class="pl-k">*</span>(<span class="pl-v">this</span>.m_constant<span class="pl-k">-</span>(l<span class="pl-k">+</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span>j));d.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+=</span>d.m_invMass<span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.linearA.<span class="pl-c1">x</span>;d.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+=</span>d.m_invMass<span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.linearA.<span class="pl-c1">y</span>;d.m_sweep.a<span class="pl-k">+=</span>d.m_invI<span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.angularA;h.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+=</span>h.m_invMass<span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.linearB.<span class="pl-c1">x</span>;h.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+=</span>h.m_invMass<span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.linearB.<span class="pl-c1">y</span>;h.m_sweep.a<span class="pl-k">+=</span>h.m_invI<span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-v">this</span>.m_J.angularB;d.SynchronizeTransform();</td>
      </tr>
      <tr>
        <td id="L330" class="blob-num js-line-number" data-line-number="330"></td>
        <td id="LC330" class="blob-code blob-code-inner js-file-line">h.SynchronizeTransform();<span class="pl-k">return</span> <span class="pl-c1">0</span><span class="pl-k">&lt;</span>F.b2_linearSlop};Box2D.inherit(M,Box2D.Dynamics.Joints.b2JointDef);<span class="pl-c1">M</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2JointDef.<span class="pl-c1">prototype</span>;<span class="pl-c1">M</span>.<span class="pl-en">b2GearJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments)};<span class="pl-c1">M</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2GearJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.__super.b2JointDef.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span>I.e_gearJoint;<span class="pl-v">this</span>.joint2<span class="pl-k">=</span><span class="pl-v">this</span>.joint1<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.ratio<span class="pl-k">=</span><span class="pl-c1">1</span>};<span class="pl-c1">L</span>.<span class="pl-en">b2Jacobian</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.linearA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.linearB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetZero</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.linearA.SetZero();</td>
      </tr>
      <tr>
        <td id="L331" class="blob-num js-line-number" data-line-number="331"></td>
        <td id="LC331" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.angularA<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.linearB.SetZero();<span class="pl-v">this</span>.angularB<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Set</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>,<span class="pl-smi">j</span>){<span class="pl-k">if</span>(h<span class="pl-k">===</span><span class="pl-c1">undefined</span>)h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(j<span class="pl-k">===</span><span class="pl-c1">undefined</span>)j<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.linearA.SetV(d);<span class="pl-v">this</span>.angularA<span class="pl-k">=</span>h;<span class="pl-v">this</span>.linearB.SetV(l);<span class="pl-v">this</span>.angularB<span class="pl-k">=</span>j};<span class="pl-c1">L</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Compute</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>,<span class="pl-smi">j</span>){<span class="pl-k">if</span>(h<span class="pl-k">===</span><span class="pl-c1">undefined</span>)h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(j<span class="pl-k">===</span><span class="pl-c1">undefined</span>)j<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-v">this</span>.linearA.<span class="pl-c1">x</span><span class="pl-k">*</span>d.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.linearA.<span class="pl-c1">y</span><span class="pl-k">*</span>d.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.angularA<span class="pl-k">*</span>h<span class="pl-k">+</span>(<span class="pl-v">this</span>.linearB.<span class="pl-c1">x</span><span class="pl-k">*</span>l.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.linearB.<span class="pl-c1">y</span><span class="pl-k">*</span>l.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-v">this</span>.angularB<span class="pl-k">*</span>j};<span class="pl-c1">I</span>.<span class="pl-en">b2Joint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_edgeA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Y</span>;<span class="pl-v">this</span>.m_edgeB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">Y</span>;<span class="pl-v">this</span>.m_localCenterA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_localCenterB<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L332" class="blob-num js-line-number" data-line-number="332"></td>
        <td id="LC332" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetType</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_type};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">null</span>};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">null</span>};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">null</span>};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">0</span>};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetBodyA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyA};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetBodyB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyB};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetNext</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_next};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetUserData</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_userData};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetUserData</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-v">this</span>.m_userData<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L333" class="blob-num js-line-number" data-line-number="333"></td>
        <td id="LC333" class="blob-code blob-code-inner js-file-line">d};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsActive</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyA.IsActive()<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.m_bodyB.IsActive()};<span class="pl-c1">I</span>.<span class="pl-en">Create</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-k">switch</span>(d.<span class="pl-c1">type</span>){<span class="pl-k">case</span> I.e_distanceJoint<span class="pl-k">:</span>h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">U</span>(d <span class="pl-k">instanceof</span> p<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> I.e_mouseJoint<span class="pl-k">:</span>h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">u</span>(d <span class="pl-k">instanceof</span> D<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> I.e_prismaticJoint<span class="pl-k">:</span>h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">H</span>(d <span class="pl-k">instanceof</span> O<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> I.e_revoluteJoint<span class="pl-k">:</span>h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">N</span>(d <span class="pl-k">instanceof</span> S<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> I.e_pulleyJoint<span class="pl-k">:</span>h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">E</span>(d <span class="pl-k">instanceof</span> R<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> I.e_gearJoint<span class="pl-k">:</span>h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">V</span>(d <span class="pl-k">instanceof</span> M<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> I.e_lineJoint<span class="pl-k">:</span>h<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L334" class="blob-num js-line-number" data-line-number="334"></td>
        <td id="LC334" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">k</span>(d <span class="pl-k">instanceof</span> z<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> I.e_weldJoint<span class="pl-k">:</span>h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">aa</span>(d <span class="pl-k">instanceof</span> Z<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>);<span class="pl-k">break</span>;<span class="pl-k">case</span> I.e_frictionJoint<span class="pl-k">:</span>h<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">B</span>(d <span class="pl-k">instanceof</span> Q<span class="pl-k">?</span>d<span class="pl-k">:</span><span class="pl-c1">null</span>)}<span class="pl-k">return</span> h};<span class="pl-c1">I</span>.<span class="pl-en">Destroy</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2Joint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){F.b2Assert(d.bodyA<span class="pl-k">!=</span>d.bodyB);<span class="pl-v">this</span>.m_type<span class="pl-k">=</span>d.<span class="pl-c1">type</span>;<span class="pl-v">this</span>.m_next<span class="pl-k">=</span><span class="pl-v">this</span>.m_prev<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.m_bodyA<span class="pl-k">=</span>d.bodyA;<span class="pl-v">this</span>.m_bodyB<span class="pl-k">=</span>d.bodyB;<span class="pl-v">this</span>.m_collideConnected<span class="pl-k">=</span>d.collideConnected;<span class="pl-v">this</span>.m_islandFlag<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-v">this</span>.m_userData<span class="pl-k">=</span>d.userData};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L335" class="blob-num js-line-number" data-line-number="335"></td>
        <td id="LC335" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">FinalizeVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">I</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">false</span>};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2Joint.e_unknownJoint<span class="pl-k">=</span><span class="pl-c1">0</span>;Box2D.Dynamics.Joints.b2Joint.e_revoluteJoint<span class="pl-k">=</span><span class="pl-c1">1</span>;Box2D.Dynamics.Joints.b2Joint.e_prismaticJoint<span class="pl-k">=</span><span class="pl-c1">2</span>;Box2D.Dynamics.Joints.b2Joint.e_distanceJoint<span class="pl-k">=</span><span class="pl-c1">3</span>;Box2D.Dynamics.Joints.b2Joint.e_pulleyJoint<span class="pl-k">=</span><span class="pl-c1">4</span>;Box2D.Dynamics.Joints.b2Joint.e_mouseJoint<span class="pl-k">=</span><span class="pl-c1">5</span>;Box2D.Dynamics.Joints.b2Joint.e_gearJoint<span class="pl-k">=</span><span class="pl-c1">6</span>;Box2D.Dynamics.Joints.b2Joint.e_lineJoint<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L336" class="blob-num js-line-number" data-line-number="336"></td>
        <td id="LC336" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">7</span>;Box2D.Dynamics.Joints.b2Joint.e_weldJoint<span class="pl-k">=</span><span class="pl-c1">8</span>;Box2D.Dynamics.Joints.b2Joint.e_frictionJoint<span class="pl-k">=</span><span class="pl-c1">9</span>;Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit<span class="pl-k">=</span><span class="pl-c1">0</span>;Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit<span class="pl-k">=</span><span class="pl-c1">1</span>;Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit<span class="pl-k">=</span><span class="pl-c1">2</span>;Box2D.Dynamics.Joints.b2Joint.e_equalLimits<span class="pl-k">=</span><span class="pl-c1">3</span>});<span class="pl-c1">W</span>.<span class="pl-en">b2JointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};<span class="pl-c1">W</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2JointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span>I.e_unknownJoint;<span class="pl-v">this</span>.bodyB<span class="pl-k">=</span><span class="pl-v">this</span>.bodyA<span class="pl-k">=</span><span class="pl-v">this</span>.userData<span class="pl-k">=</span><span class="pl-c1">null</span>;<span class="pl-v">this</span>.collideConnected<span class="pl-k">=</span><span class="pl-c1">false</span>};<span class="pl-c1">Y</span>.<span class="pl-en">b2JointEdge</span><span class="pl-k">=</span><span class="pl-k">function</span>(){};Box2D.inherit(k,Box2D.Dynamics.Joints.b2Joint);</td>
      </tr>
      <tr>
        <td id="L337" class="blob-num js-line-number" data-line-number="337"></td>
        <td id="LC337" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2Joint.<span class="pl-c1">prototype</span>;<span class="pl-c1">k</span>.<span class="pl-en">b2LineJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2Joint.b2Joint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.m_localAnchor1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_localAnchor2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_localXAxis1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_localYAxis1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_axis<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_perp<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_K<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-v">this</span>.m_impulse<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyA.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor1)};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyB.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor2)};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionForce</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L338" class="blob-num js-line-number" data-line-number="338"></td>
        <td id="LC338" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span>(<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">+</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>),d<span class="pl-k">*</span>(<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">+</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span>))};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> d<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointTranslation</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,l<span class="pl-k">=</span>d.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor1),j<span class="pl-k">=</span>h.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor2);h<span class="pl-k">=</span>j.<span class="pl-c1">x</span><span class="pl-k">-</span>l.<span class="pl-c1">x</span>;l<span class="pl-k">=</span>j.<span class="pl-c1">y</span><span class="pl-k">-</span>l.<span class="pl-c1">y</span>;d<span class="pl-k">=</span>d.GetWorldVector(<span class="pl-v">this</span>.m_localXAxis1);</td>
      </tr>
      <tr>
        <td id="L339" class="blob-num js-line-number" data-line-number="339"></td>
        <td id="LC339" class="blob-code blob-code-inner js-file-line"><span class="pl-k">return</span> d.<span class="pl-c1">x</span><span class="pl-k">*</span>h<span class="pl-k">+</span>d.<span class="pl-c1">y</span><span class="pl-k">*</span>l};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,l;l<span class="pl-k">=</span>d.m_xf.R;<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span>d.m_sweep.localCenter.<span class="pl-c1">x</span>,o<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span>d.m_sweep.localCenter.<span class="pl-c1">y</span>,q<span class="pl-k">=</span>l.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>j<span class="pl-k">+</span>l.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>o;o<span class="pl-k">=</span>l.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>j<span class="pl-k">+</span>l.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>o;j<span class="pl-k">=</span>q;l<span class="pl-k">=</span>h.m_xf.R;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">x</span>,a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">y</span>;q<span class="pl-k">=</span>l.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span>l.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span>l.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span>l.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>q;l<span class="pl-k">=</span>h.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span>n<span class="pl-k">-</span>(d.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span>j);q<span class="pl-k">=</span>h.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>a<span class="pl-k">-</span>(d.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>o);<span class="pl-k">var</span> c<span class="pl-k">=</span>d.GetWorldVector(<span class="pl-v">this</span>.m_localXAxis1),</td>
      </tr>
      <tr>
        <td id="L340" class="blob-num js-line-number" data-line-number="340"></td>
        <td id="LC340" class="blob-code blob-code-inner js-file-line">g<span class="pl-k">=</span>d.m_linearVelocity,b<span class="pl-k">=</span>h.m_linearVelocity;d<span class="pl-k">=</span>d.m_angularVelocity;h<span class="pl-k">=</span>h.m_angularVelocity;<span class="pl-k">return</span> l<span class="pl-k">*-</span>d<span class="pl-k">*</span>c.<span class="pl-c1">y</span><span class="pl-k">+</span>q<span class="pl-k">*</span>d<span class="pl-k">*</span>c.<span class="pl-c1">x</span><span class="pl-k">+</span>(c.<span class="pl-c1">x</span><span class="pl-k">*</span>(b.<span class="pl-c1">x</span><span class="pl-k">+-</span>h<span class="pl-k">*</span>a<span class="pl-k">-</span>g.<span class="pl-c1">x</span><span class="pl-k">-</span> <span class="pl-k">-</span>d<span class="pl-k">*</span>o)<span class="pl-k">+</span>c.<span class="pl-c1">y</span><span class="pl-k">*</span>(b.<span class="pl-c1">y</span><span class="pl-k">+</span>h<span class="pl-k">*</span>n<span class="pl-k">-</span>g.<span class="pl-c1">y</span><span class="pl-k">-</span>d<span class="pl-k">*</span>j))};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsLimitEnabled</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_enableLimit};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">EnableLimit</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-v">this</span>.m_bodyA.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_bodyB.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_enableLimit<span class="pl-k">=</span>d};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLowerLimit</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_lowerTranslation};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetUpperLimit</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_upperTranslation};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLimits</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,</td>
      </tr>
      <tr>
        <td id="L341" class="blob-num js-line-number" data-line-number="341"></td>
        <td id="LC341" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">h</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(h<span class="pl-k">===</span><span class="pl-c1">undefined</span>)h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_bodyA.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_bodyB.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_lowerTranslation<span class="pl-k">=</span>d;<span class="pl-v">this</span>.m_upperTranslation<span class="pl-k">=</span>h};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsMotorEnabled</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_enableMotor};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">EnableMotor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-v">this</span>.m_bodyA.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_bodyB.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_enableMotor<span class="pl-k">=</span>d};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMotorSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_bodyA.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_bodyB.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_motorSpeed<span class="pl-k">=</span>d};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMotorSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_motorSpeed};</td>
      </tr>
      <tr>
        <td id="L342" class="blob-num js-line-number" data-line-number="342"></td>
        <td id="LC342" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMaxMotorForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_bodyA.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_bodyB.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_maxMotorForce<span class="pl-k">=</span>d};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMaxMotorForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_maxMotorForce};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMotorForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_motorImpulse};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2LineJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-v">this</span>.__super.b2Joint.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,d);<span class="pl-v">this</span>.m_localAnchor1.SetV(d.localAnchorA);<span class="pl-v">this</span>.m_localAnchor2.SetV(d.localAnchorB);<span class="pl-v">this</span>.m_localXAxis1.SetV(d.localAxisA);<span class="pl-v">this</span>.m_localYAxis1.<span class="pl-c1">x</span><span class="pl-k">=-</span><span class="pl-v">this</span>.m_localXAxis1.<span class="pl-c1">y</span>;</td>
      </tr>
      <tr>
        <td id="L343" class="blob-num js-line-number" data-line-number="343"></td>
        <td id="LC343" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_localYAxis1.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_localXAxis1.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_impulse.SetZero();<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">=</span><span class="pl-v">this</span>.m_motorMass<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_lowerTranslation<span class="pl-k">=</span>d.lowerTranslation;<span class="pl-v">this</span>.m_upperTranslation<span class="pl-k">=</span>d.upperTranslation;<span class="pl-v">this</span>.m_maxMotorForce<span class="pl-k">=</span>d.maxMotorForce;<span class="pl-v">this</span>.m_motorSpeed<span class="pl-k">=</span>d.motorSpeed;<span class="pl-v">this</span>.m_enableLimit<span class="pl-k">=</span>d.enableLimit;<span class="pl-v">this</span>.m_enableMotor<span class="pl-k">=</span>d.enableMotor;<span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span>I.e_inactiveLimit;<span class="pl-v">this</span>.m_axis.SetZero();<span class="pl-v">this</span>.m_perp.SetZero()};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,l<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,j,o<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_localCenterA.SetV(h.GetLocalCenter());</td>
      </tr>
      <tr>
        <td id="L344" class="blob-num js-line-number" data-line-number="344"></td>
        <td id="LC344" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_localCenterB.SetV(l.GetLocalCenter());<span class="pl-k">var</span> q<span class="pl-k">=</span>h.GetTransform();l.GetTransform();j<span class="pl-k">=</span>h.m_xf.R;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_localCenterA.<span class="pl-c1">x</span>,a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_localCenterA.<span class="pl-c1">y</span>;o<span class="pl-k">=</span>j.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span>j.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span>j.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span>j.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>o;j<span class="pl-k">=</span>l.m_xf.R;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_localCenterB.<span class="pl-c1">x</span>,g<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_localCenterB.<span class="pl-c1">y</span>;o<span class="pl-k">=</span>j.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>c<span class="pl-k">+</span>j.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>g;g<span class="pl-k">=</span>j.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>c<span class="pl-k">+</span>j.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>g;c<span class="pl-k">=</span>o;j<span class="pl-k">=</span>l.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span>c<span class="pl-k">-</span>h.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">-</span>n;o<span class="pl-k">=</span>l.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>g<span class="pl-k">-</span>h.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">-</span>a;<span class="pl-v">this</span>.m_invMassA<span class="pl-k">=</span>h.m_invMass;<span class="pl-v">this</span>.m_invMassB<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L345" class="blob-num js-line-number" data-line-number="345"></td>
        <td id="LC345" class="blob-code blob-code-inner js-file-line">l.m_invMass;<span class="pl-v">this</span>.m_invIA<span class="pl-k">=</span>h.m_invI;<span class="pl-v">this</span>.m_invIB<span class="pl-k">=</span>l.m_invI;<span class="pl-v">this</span>.m_axis.SetV(y.MulMV(q.R,<span class="pl-v">this</span>.m_localXAxis1));<span class="pl-v">this</span>.m_a1<span class="pl-k">=</span>(j<span class="pl-k">+</span>n)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span><span class="pl-k">-</span>(o<span class="pl-k">+</span>a)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_a2<span class="pl-k">=</span>c<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span><span class="pl-k">-</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_motorMass<span class="pl-k">=</span><span class="pl-v">this</span>.m_invMassA<span class="pl-k">+</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">+</span><span class="pl-v">this</span>.m_invIA<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">+</span><span class="pl-v">this</span>.m_invIB<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;<span class="pl-v">this</span>.m_motorMass<span class="pl-k">=</span><span class="pl-v">this</span>.m_motorMass<span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>.m_motorMass<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_perp.SetV(y.MulMV(q.R,<span class="pl-v">this</span>.m_localYAxis1));<span class="pl-v">this</span>.m_s1<span class="pl-k">=</span>(j<span class="pl-k">+</span>n)<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">-</span>(o<span class="pl-k">+</span>a)<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_s2<span class="pl-k">=</span>c<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L346" class="blob-num js-line-number" data-line-number="346"></td>
        <td id="LC346" class="blob-code blob-code-inner js-file-line">g<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span>;q<span class="pl-k">=</span><span class="pl-v">this</span>.m_invMassA;n<span class="pl-k">=</span><span class="pl-v">this</span>.m_invMassB;a<span class="pl-k">=</span><span class="pl-v">this</span>.m_invIA;c<span class="pl-k">=</span><span class="pl-v">this</span>.m_invIB;<span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">x</span><span class="pl-k">=</span>q<span class="pl-k">+</span>n<span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2;<span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">y</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;<span class="pl-v">this</span>.m_K.col2.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_K.col2.<span class="pl-c1">y</span><span class="pl-k">=</span>q<span class="pl-k">+</span>n<span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_enableLimit){j<span class="pl-k">=</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span><span class="pl-k">*</span>o;<span class="pl-k">if</span>(y.Abs(<span class="pl-v">this</span>.m_upperTranslation<span class="pl-k">-</span><span class="pl-v">this</span>.m_lowerTranslation)<span class="pl-k">&lt;</span><span class="pl-c1">2</span><span class="pl-k">*</span>F.b2_linearSlop)<span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span>I.e_equalLimits;<span class="pl-k">else</span> <span class="pl-k">if</span>(j<span class="pl-k">&lt;=</span><span class="pl-v">this</span>.m_lowerTranslation){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState<span class="pl-k">!=</span></td>
      </tr>
      <tr>
        <td id="L347" class="blob-num js-line-number" data-line-number="347"></td>
        <td id="LC347" class="blob-code blob-code-inner js-file-line">I.e_atLowerLimit){<span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span>I.e_atLowerLimit;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span> <span class="pl-k">if</span>(j<span class="pl-k">&gt;=</span><span class="pl-v">this</span>.m_upperTranslation){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState<span class="pl-k">!=</span>I.e_atUpperLimit){<span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span>I.e_atUpperLimit;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span>{<span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span>I.e_inactiveLimit;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span> <span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span>I.e_inactiveLimit;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_enableMotor<span class="pl-k">==</span><span class="pl-c1">false</span>)<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(d.warmStarting){<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">*=</span>d.dtRatio;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">*=</span>d.dtRatio;<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">*=</span>d.dtRatio;d<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L348" class="blob-num js-line-number" data-line-number="348"></td>
        <td id="LC348" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>;j<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">+</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span>;o<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">+</span>(<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">+</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1;q<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_s2<span class="pl-k">+</span>(<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">+</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;h.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-v">this</span>.m_invMassA<span class="pl-k">*</span>d;h.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-v">this</span>.m_invMassA<span class="pl-k">*</span>j;h.m_angularVelocity<span class="pl-k">-=</span><span class="pl-v">this</span>.m_invIA<span class="pl-k">*</span>o;l.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">*</span>d;l.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">*</span>j;l.m_angularVelocity<span class="pl-k">+=</span><span class="pl-v">this</span>.m_invIB<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L349" class="blob-num js-line-number" data-line-number="349"></td>
        <td id="LC349" class="blob-code blob-code-inner js-file-line">q}<span class="pl-k">else</span>{<span class="pl-v">this</span>.m_impulse.SetZero();<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">=</span><span class="pl-c1">0</span>}};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,l<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,j<span class="pl-k">=</span>h.m_linearVelocity,o<span class="pl-k">=</span>h.m_angularVelocity,q<span class="pl-k">=</span>l.m_linearVelocity,n<span class="pl-k">=</span>l.m_angularVelocity,a<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_enableMotor<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.m_limitState<span class="pl-k">!=</span>I.e_equalLimits){b<span class="pl-k">=</span><span class="pl-v">this</span>.m_motorMass<span class="pl-k">*</span>(<span class="pl-v">this</span>.m_motorSpeed<span class="pl-k">-</span>(<span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span><span class="pl-k">*</span>(q.<span class="pl-c1">x</span><span class="pl-k">-</span>j.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span><span class="pl-k">*</span>(q.<span class="pl-c1">y</span><span class="pl-k">-</span>j.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-v">this</span>.m_a2<span class="pl-k">*</span>n<span class="pl-k">-</span><span class="pl-v">this</span>.m_a1<span class="pl-k">*</span>o));a<span class="pl-k">=</span><span class="pl-v">this</span>.m_motorImpulse;c<span class="pl-k">=</span>d.dt<span class="pl-k">*</span><span class="pl-v">this</span>.m_maxMotorForce;<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">=</span>y.Clamp(<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L350" class="blob-num js-line-number" data-line-number="350"></td>
        <td id="LC350" class="blob-code blob-code-inner js-file-line">b,<span class="pl-k">-</span>c,c);b<span class="pl-k">=</span><span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">-</span>a;a<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>;c<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span>;g<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1;b<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;j.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-v">this</span>.m_invMassA<span class="pl-k">*</span>a;j.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-v">this</span>.m_invMassA<span class="pl-k">*</span>c;o<span class="pl-k">-=</span><span class="pl-v">this</span>.m_invIA<span class="pl-k">*</span>g;q.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">*</span>a;q.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">*</span>c;n<span class="pl-k">+=</span><span class="pl-v">this</span>.m_invIB<span class="pl-k">*</span>b}c<span class="pl-k">=</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span><span class="pl-k">*</span>(q.<span class="pl-c1">x</span><span class="pl-k">-</span>j.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">*</span>(q.<span class="pl-c1">y</span><span class="pl-k">-</span>j.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-v">this</span>.m_s2<span class="pl-k">*</span>n<span class="pl-k">-</span><span class="pl-v">this</span>.m_s1<span class="pl-k">*</span>o;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_enableLimit<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.m_limitState<span class="pl-k">!=</span>I.e_inactiveLimit){g<span class="pl-k">=</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span><span class="pl-k">*</span>(q.<span class="pl-c1">x</span><span class="pl-k">-</span>j.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span><span class="pl-k">*</span>(q.<span class="pl-c1">y</span><span class="pl-k">-</span>j.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-v">this</span>.m_a2<span class="pl-k">*</span>n<span class="pl-k">-</span><span class="pl-v">this</span>.m_a1<span class="pl-k">*</span>o;a<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.Copy();d<span class="pl-k">=</span><span class="pl-v">this</span>.m_K.Solve(<span class="pl-k">new</span> <span class="pl-en">w</span>,<span class="pl-k">-</span>c,<span class="pl-k">-</span>g);<span class="pl-v">this</span>.m_impulse.Add(d);</td>
      </tr>
      <tr>
        <td id="L351" class="blob-num js-line-number" data-line-number="351"></td>
        <td id="LC351" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState<span class="pl-k">==</span>I.e_atLowerLimit)<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">=</span>y.Max(<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>,<span class="pl-c1">0</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState<span class="pl-k">==</span>I.e_atUpperLimit)<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">=</span>y.Min(<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>,<span class="pl-c1">0</span>);c<span class="pl-k">=-</span>c<span class="pl-k">-</span>(<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">-</span>a.<span class="pl-c1">y</span>)<span class="pl-k">*</span><span class="pl-v">this</span>.m_K.col2.<span class="pl-c1">x</span>;g<span class="pl-k">=</span><span class="pl-c1">0</span>;g<span class="pl-k">=</span><span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">x</span><span class="pl-k">!=</span><span class="pl-c1">0</span><span class="pl-k">?</span>c<span class="pl-k">/</span><span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">x</span><span class="pl-k">+</span>a.<span class="pl-c1">x</span><span class="pl-k">:</span>a.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">=</span>g;d.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">-</span>a.<span class="pl-c1">x</span>;d.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">-</span>a.<span class="pl-c1">y</span>;a<span class="pl-k">=</span>d.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span><span class="pl-k">+</span>d.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>;c<span class="pl-k">=</span>d.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">+</span>d.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span>;g<span class="pl-k">=</span>d.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">+</span>d.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_a1;b<span class="pl-k">=</span>d.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_s2<span class="pl-k">+</span>d.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_a2}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-c1">0</span>;d<span class="pl-k">=</span><span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">x</span><span class="pl-k">!=</span><span class="pl-c1">0</span><span class="pl-k">?-</span>c<span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L352" class="blob-num js-line-number" data-line-number="352"></td>
        <td id="LC352" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">x</span><span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">+=</span>d;a<span class="pl-k">=</span>d<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span>;c<span class="pl-k">=</span>d<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span>;g<span class="pl-k">=</span>d<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1;b<span class="pl-k">=</span>d<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2}j.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-v">this</span>.m_invMassA<span class="pl-k">*</span>a;j.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-v">this</span>.m_invMassA<span class="pl-k">*</span>c;o<span class="pl-k">-=</span><span class="pl-v">this</span>.m_invIA<span class="pl-k">*</span>g;q.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">*</span>a;q.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">*</span>c;n<span class="pl-k">+=</span><span class="pl-v">this</span>.m_invIB<span class="pl-k">*</span>b;h.m_linearVelocity.SetV(j);h.m_angularVelocity<span class="pl-k">=</span>o;l.m_linearVelocity.SetV(q);l.m_angularVelocity<span class="pl-k">=</span>n};<span class="pl-c1">k</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,l<span class="pl-k">=</span>d.m_sweep.c,j<span class="pl-k">=</span>d.m_sweep.a,o<span class="pl-k">=</span>h.m_sweep.c,q<span class="pl-k">=</span>h.m_sweep.a,n,a<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span>n<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L353" class="blob-num js-line-number" data-line-number="353"></td>
        <td id="LC353" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> m<span class="pl-k">=</span><span class="pl-c1">0</span>,r<span class="pl-k">=</span>G.FromAngle(j);g<span class="pl-k">=</span>G.FromAngle(q);n<span class="pl-k">=</span>r;f<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_localCenterA.<span class="pl-c1">x</span>;<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_localCenterA.<span class="pl-c1">y</span>;a<span class="pl-k">=</span>n.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>f<span class="pl-k">+</span>n.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>s;s<span class="pl-k">=</span>n.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>f<span class="pl-k">+</span>n.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>s;f<span class="pl-k">=</span>a;n<span class="pl-k">=</span>g;g<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_localCenterB.<span class="pl-c1">x</span>;b<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_localCenterB.<span class="pl-c1">y</span>;a<span class="pl-k">=</span>n.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>g<span class="pl-k">+</span>n.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>b;b<span class="pl-k">=</span>n.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>g<span class="pl-k">+</span>n.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>b;g<span class="pl-k">=</span>a;n<span class="pl-k">=</span>o.<span class="pl-c1">x</span><span class="pl-k">+</span>g<span class="pl-k">-</span>l.<span class="pl-c1">x</span><span class="pl-k">-</span>f;a<span class="pl-k">=</span>o.<span class="pl-c1">y</span><span class="pl-k">+</span>b<span class="pl-k">-</span>l.<span class="pl-c1">y</span><span class="pl-k">-</span>s;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_enableLimit){<span class="pl-v">this</span>.m_axis<span class="pl-k">=</span>y.MulMV(r,<span class="pl-v">this</span>.m_localXAxis1);<span class="pl-v">this</span>.m_a1<span class="pl-k">=</span>(n<span class="pl-k">+</span>f)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span><span class="pl-k">-</span>(a<span class="pl-k">+</span>s)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_a2<span class="pl-k">=</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L354" class="blob-num js-line-number" data-line-number="354"></td>
        <td id="LC354" class="blob-code blob-code-inner js-file-line">b<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>;<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span><span class="pl-k">*</span>a;<span class="pl-k">if</span>(y.Abs(<span class="pl-v">this</span>.m_upperTranslation<span class="pl-k">-</span><span class="pl-v">this</span>.m_lowerTranslation)<span class="pl-k">&lt;</span><span class="pl-c1">2</span><span class="pl-k">*</span>F.b2_linearSlop){m<span class="pl-k">=</span>y.Clamp(v,<span class="pl-k">-</span>F.b2_maxLinearCorrection,F.b2_maxLinearCorrection);e<span class="pl-k">=</span>y.Abs(v);c<span class="pl-k">=</span><span class="pl-c1">true</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(v<span class="pl-k">&lt;=</span><span class="pl-v">this</span>.m_lowerTranslation){m<span class="pl-k">=</span>y.Clamp(v<span class="pl-k">-</span><span class="pl-v">this</span>.m_lowerTranslation<span class="pl-k">+</span>F.b2_linearSlop,<span class="pl-k">-</span>F.b2_maxLinearCorrection,<span class="pl-c1">0</span>);e<span class="pl-k">=</span><span class="pl-v">this</span>.m_lowerTranslation<span class="pl-k">-</span>v;c<span class="pl-k">=</span><span class="pl-c1">true</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(v<span class="pl-k">&gt;=</span><span class="pl-v">this</span>.m_upperTranslation){m<span class="pl-k">=</span>y.Clamp(v<span class="pl-k">-</span><span class="pl-v">this</span>.m_upperTranslation<span class="pl-k">+</span>F.b2_linearSlop,<span class="pl-c1">0</span>,F.b2_maxLinearCorrection);e<span class="pl-k">=</span>v<span class="pl-k">-</span><span class="pl-v">this</span>.m_upperTranslation;</td>
      </tr>
      <tr>
        <td id="L355" class="blob-num js-line-number" data-line-number="355"></td>
        <td id="LC355" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">=</span><span class="pl-c1">true</span>}}<span class="pl-v">this</span>.m_perp<span class="pl-k">=</span>y.MulMV(r,<span class="pl-v">this</span>.m_localYAxis1);<span class="pl-v">this</span>.m_s1<span class="pl-k">=</span>(n<span class="pl-k">+</span>f)<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">-</span>(a<span class="pl-k">+</span>s)<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_s2<span class="pl-k">=</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">-</span>b<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span>;r<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;s<span class="pl-k">=</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">*</span>a;e<span class="pl-k">=</span>y.Max(e,y.Abs(s));f<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(c){c<span class="pl-k">=</span><span class="pl-v">this</span>.m_invMassA;g<span class="pl-k">=</span><span class="pl-v">this</span>.m_invMassB;b<span class="pl-k">=</span><span class="pl-v">this</span>.m_invIA;n<span class="pl-k">=</span><span class="pl-v">this</span>.m_invIB;<span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">x</span><span class="pl-k">=</span>c<span class="pl-k">+</span>g<span class="pl-k">+</span>b<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2;<span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">y</span><span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;<span class="pl-v">this</span>.m_K.col2.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_K.col2.<span class="pl-c1">y</span><span class="pl-k">=</span>c<span class="pl-k">+</span>g<span class="pl-k">+</span>b<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;<span class="pl-v">this</span>.m_K.Solve(r,</td>
      </tr>
      <tr>
        <td id="L356" class="blob-num js-line-number" data-line-number="356"></td>
        <td id="LC356" class="blob-code blob-code-inner js-file-line"><span class="pl-k">-</span>s,<span class="pl-k">-</span>m)}<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-v">this</span>.m_invMassA;g<span class="pl-k">=</span><span class="pl-v">this</span>.m_invMassB;b<span class="pl-k">=</span><span class="pl-v">this</span>.m_invIA;n<span class="pl-k">=</span><span class="pl-v">this</span>.m_invIB;m<span class="pl-k">=</span>c<span class="pl-k">+</span>g<span class="pl-k">+</span>b<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2;c<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span>m<span class="pl-k">!=</span><span class="pl-c1">0</span><span class="pl-k">?-</span>s<span class="pl-k">/</span>m<span class="pl-k">:</span><span class="pl-c1">0</span>;r.<span class="pl-c1">x</span><span class="pl-k">=</span>c;r.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>}m<span class="pl-k">=</span>r.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span><span class="pl-k">+</span>r.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>;c<span class="pl-k">=</span>r.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">+</span>r.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span>;s<span class="pl-k">=</span>r.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">+</span>r.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_a1;r<span class="pl-k">=</span>r.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_s2<span class="pl-k">+</span>r.<span class="pl-c1">y</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;l.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-v">this</span>.m_invMassA<span class="pl-k">*</span>m;l.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-v">this</span>.m_invMassA<span class="pl-k">*</span>c;j<span class="pl-k">-=</span><span class="pl-v">this</span>.m_invIA<span class="pl-k">*</span>s;o.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">*</span>m;o.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">*</span>c;q<span class="pl-k">+=</span><span class="pl-v">this</span>.m_invIB<span class="pl-k">*</span>r;d.m_sweep.a<span class="pl-k">=</span>j;h.m_sweep.a<span class="pl-k">=</span>q;d.SynchronizeTransform();h.SynchronizeTransform();<span class="pl-k">return</span> e<span class="pl-k">&lt;=</span></td>
      </tr>
      <tr>
        <td id="L357" class="blob-num js-line-number" data-line-number="357"></td>
        <td id="LC357" class="blob-code blob-code-inner js-file-line">F.b2_linearSlop<span class="pl-k">&amp;&amp;</span>f<span class="pl-k">&lt;=</span>F.b2_angularSlop};Box2D.inherit(z,Box2D.Dynamics.Joints.b2JointDef);<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2JointDef.<span class="pl-c1">prototype</span>;<span class="pl-c1">z</span>.<span class="pl-en">b2LineJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.localAnchorA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.localAnchorB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.localAxisA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2LineJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.__super.b2JointDef.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span>I.e_lineJoint;<span class="pl-v">this</span>.localAxisA.Set(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.enableLimit<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-v">this</span>.upperTranslation<span class="pl-k">=</span><span class="pl-v">this</span>.lowerTranslation<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L358" class="blob-num js-line-number" data-line-number="358"></td>
        <td id="LC358" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>;<span class="pl-v">this</span>.enableMotor<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-v">this</span>.motorSpeed<span class="pl-k">=</span><span class="pl-v">this</span>.maxMotorForce<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>,<span class="pl-smi">j</span>){<span class="pl-v">this</span>.bodyA<span class="pl-k">=</span>d;<span class="pl-v">this</span>.bodyB<span class="pl-k">=</span>h;<span class="pl-v">this</span>.localAnchorA<span class="pl-k">=</span><span class="pl-v">this</span>.bodyA.GetLocalPoint(l);<span class="pl-v">this</span>.localAnchorB<span class="pl-k">=</span><span class="pl-v">this</span>.bodyB.GetLocalPoint(l);<span class="pl-v">this</span>.localAxisA<span class="pl-k">=</span><span class="pl-v">this</span>.bodyA.GetLocalVector(j)};Box2D.inherit(u,Box2D.Dynamics.Joints.b2Joint);<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2Joint.<span class="pl-c1">prototype</span>;<span class="pl-c1">u</span>.<span class="pl-en">b2MouseJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2Joint.b2Joint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.K<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-v">this</span>.K1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-v">this</span>.K2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;</td>
      </tr>
      <tr>
        <td id="L359" class="blob-num js-line-number" data-line-number="359"></td>
        <td id="LC359" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_localAnchor<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_target<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_impulse<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_mass<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-v">this</span>.m_C<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_target};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyB.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor)};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span>,d<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>)};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">0</span>};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetTarget</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_target};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetTarget</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-v">this</span>.m_bodyB.IsAwake()<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L360" class="blob-num js-line-number" data-line-number="360"></td>
        <td id="LC360" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">false</span><span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.m_bodyB.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_target<span class="pl-k">=</span>d};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMaxForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_maxForce};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMaxForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_maxForce<span class="pl-k">=</span>d};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFrequency</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_frequencyHz};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetFrequency</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_frequencyHz<span class="pl-k">=</span>d};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetDampingRatio</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_dampingRatio};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetDampingRatio</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_dampingRatio<span class="pl-k">=</span>d};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2MouseJoint</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L361" class="blob-num js-line-number" data-line-number="361"></td>
        <td id="LC361" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-v">this</span>.__super.b2Joint.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,d);<span class="pl-v">this</span>.m_target.SetV(d.<span class="pl-c1">target</span>);<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-v">this</span>.m_target.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_bodyB.m_xf.position.<span class="pl-c1">x</span>,l<span class="pl-k">=</span><span class="pl-v">this</span>.m_target.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_bodyB.m_xf.position.<span class="pl-c1">y</span>,j<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB.m_xf.R;<span class="pl-v">this</span>.m_localAnchor.<span class="pl-c1">x</span><span class="pl-k">=</span>h<span class="pl-k">*</span>j.col1.<span class="pl-c1">x</span><span class="pl-k">+</span>l<span class="pl-k">*</span>j.col1.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_localAnchor.<span class="pl-c1">y</span><span class="pl-k">=</span>h<span class="pl-k">*</span>j.col2.<span class="pl-c1">x</span><span class="pl-k">+</span>l<span class="pl-k">*</span>j.col2.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_maxForce<span class="pl-k">=</span>d.maxForce;<span class="pl-v">this</span>.m_impulse.SetZero();<span class="pl-v">this</span>.m_frequencyHz<span class="pl-k">=</span>d.frequencyHz;<span class="pl-v">this</span>.m_dampingRatio<span class="pl-k">=</span>d.dampingRatio;<span class="pl-v">this</span>.m_gamma<span class="pl-k">=</span><span class="pl-v">this</span>.m_beta<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,l<span class="pl-k">=</span>h.GetMass(),</td>
      </tr>
      <tr>
        <td id="L362" class="blob-num js-line-number" data-line-number="362"></td>
        <td id="LC362" class="blob-code blob-code-inner js-file-line">j<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_frequencyHz,o<span class="pl-k">=</span>l<span class="pl-k">*</span>j<span class="pl-k">*</span>j;<span class="pl-v">this</span>.m_gamma<span class="pl-k">=</span>d.dt<span class="pl-k">*</span>(<span class="pl-c1">2</span><span class="pl-k">*</span>l<span class="pl-k">*</span><span class="pl-v">this</span>.m_dampingRatio<span class="pl-k">*</span>j<span class="pl-k">+</span>d.dt<span class="pl-k">*</span>o);<span class="pl-v">this</span>.m_gamma<span class="pl-k">=</span><span class="pl-v">this</span>.m_gamma<span class="pl-k">!=</span><span class="pl-c1">0</span><span class="pl-k">?</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>.m_gamma<span class="pl-k">:</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_beta<span class="pl-k">=</span>d.dt<span class="pl-k">*</span>o<span class="pl-k">*</span><span class="pl-v">this</span>.m_gamma;o<span class="pl-k">=</span>h.m_xf.R;l<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor.<span class="pl-c1">x</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">x</span>;j<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor.<span class="pl-c1">y</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">y</span>;<span class="pl-k">var</span> q<span class="pl-k">=</span>o.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>l<span class="pl-k">+</span>o.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>j;j<span class="pl-k">=</span>o.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>l<span class="pl-k">+</span>o.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>j;l<span class="pl-k">=</span>q;o<span class="pl-k">=</span>h.m_invMass;q<span class="pl-k">=</span>h.m_invI;<span class="pl-v">this</span>.K1.col1.<span class="pl-c1">x</span><span class="pl-k">=</span>o;<span class="pl-v">this</span>.K1.col2.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.K1.col1.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.K1.col2.<span class="pl-c1">y</span><span class="pl-k">=</span>o;<span class="pl-v">this</span>.K2.col1.<span class="pl-c1">x</span><span class="pl-k">=</span>q<span class="pl-k">*</span>j<span class="pl-k">*</span>j;<span class="pl-v">this</span>.K2.col2.<span class="pl-c1">x</span><span class="pl-k">=-</span>q<span class="pl-k">*</span>l<span class="pl-k">*</span>j;<span class="pl-v">this</span>.K2.col1.<span class="pl-c1">y</span><span class="pl-k">=-</span>q<span class="pl-k">*</span>l<span class="pl-k">*</span>j;<span class="pl-v">this</span>.K2.col2.<span class="pl-c1">y</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L363" class="blob-num js-line-number" data-line-number="363"></td>
        <td id="LC363" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">*</span>l<span class="pl-k">*</span>l;<span class="pl-v">this</span>.K.SetM(<span class="pl-v">this</span>.K1);<span class="pl-v">this</span>.K.AddM(<span class="pl-v">this</span>.K2);<span class="pl-v">this</span>.K.col1.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_gamma;<span class="pl-v">this</span>.K.col2.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_gamma;<span class="pl-v">this</span>.K.GetInverse(<span class="pl-v">this</span>.m_mass);<span class="pl-v">this</span>.m_C.<span class="pl-c1">x</span><span class="pl-k">=</span>h.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span>l<span class="pl-k">-</span><span class="pl-v">this</span>.m_target.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_C.<span class="pl-c1">y</span><span class="pl-k">=</span>h.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>j<span class="pl-k">-</span><span class="pl-v">this</span>.m_target.<span class="pl-c1">y</span>;h.m_angularVelocity<span class="pl-k">*=</span><span class="pl-c1">0.98</span>;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">*=</span>d.dtRatio;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">*=</span>d.dtRatio;h.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span>o<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span>;h.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>o<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>;h.m_angularVelocity<span class="pl-k">+=</span>q<span class="pl-k">*</span>(l<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">-</span>j<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span>)};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L364" class="blob-num js-line-number" data-line-number="364"></td>
        <td id="LC364" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_bodyB,l,j<span class="pl-k">=</span><span class="pl-c1">0</span>,o<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">=</span>h.m_xf.R;<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor.<span class="pl-c1">x</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">x</span>,n<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor.<span class="pl-c1">y</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">y</span>;j<span class="pl-k">=</span>l.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">+</span>l.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>n;n<span class="pl-k">=</span>l.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>q<span class="pl-k">+</span>l.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>n;q<span class="pl-k">=</span>j;j<span class="pl-k">=</span>h.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+-</span>h.m_angularVelocity<span class="pl-k">*</span>n;<span class="pl-k">var</span> a<span class="pl-k">=</span>h.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+</span>h.m_angularVelocity<span class="pl-k">*</span>q;l<span class="pl-k">=</span><span class="pl-v">this</span>.m_mass;j<span class="pl-k">=</span>j<span class="pl-k">+</span><span class="pl-v">this</span>.m_beta<span class="pl-k">*</span><span class="pl-v">this</span>.m_C.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_gamma<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span>;o<span class="pl-k">=</span>a<span class="pl-k">+</span><span class="pl-v">this</span>.m_beta<span class="pl-k">*</span><span class="pl-v">this</span>.m_C.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_gamma<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>;a<span class="pl-k">=-</span>(l.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>j<span class="pl-k">+</span>l.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>o);o<span class="pl-k">=-</span>(l.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>j<span class="pl-k">+</span>l.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>o);l<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span>;j<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">+=</span></td>
      </tr>
      <tr>
        <td id="L365" class="blob-num js-line-number" data-line-number="365"></td>
        <td id="LC365" class="blob-code blob-code-inner js-file-line">a;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">+=</span>o;d<span class="pl-k">=</span>d.dt<span class="pl-k">*</span><span class="pl-v">this</span>.m_maxForce;<span class="pl-v">this</span>.m_impulse.LengthSquared()<span class="pl-k">&gt;</span>d<span class="pl-k">*</span>d<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.m_impulse.Multiply(d<span class="pl-k">/</span><span class="pl-v">this</span>.m_impulse.Length());a<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">-</span>l;o<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">-</span>j;h.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span>h.m_invMass<span class="pl-k">*</span>a;h.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>h.m_invMass<span class="pl-k">*</span>o;h.m_angularVelocity<span class="pl-k">+=</span>h.m_invI<span class="pl-k">*</span>(q<span class="pl-k">*</span>o<span class="pl-k">-</span>n<span class="pl-k">*</span>a)};<span class="pl-c1">u</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">true</span>};Box2D.inherit(D,Box2D.Dynamics.Joints.b2JointDef);<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2JointDef.<span class="pl-c1">prototype</span>;<span class="pl-c1">D</span>.<span class="pl-en">b2MouseJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,</td>
      </tr>
      <tr>
        <td id="L366" class="blob-num js-line-number" data-line-number="366"></td>
        <td id="LC366" class="blob-code blob-code-inner js-file-line">arguments);<span class="pl-v">this</span>.<span class="pl-c1">target</span><span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">D</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2MouseJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.__super.b2JointDef.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span>I.e_mouseJoint;<span class="pl-v">this</span>.maxForce<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.frequencyHz<span class="pl-k">=</span><span class="pl-c1">5</span>;<span class="pl-v">this</span>.dampingRatio<span class="pl-k">=</span><span class="pl-c1">0.7</span>};Box2D.inherit(H,Box2D.Dynamics.Joints.b2Joint);<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2Joint.<span class="pl-c1">prototype</span>;<span class="pl-c1">H</span>.<span class="pl-en">b2PrismaticJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2Joint.b2Joint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.m_localAnchor1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_localAnchor2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_localXAxis1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_localYAxis1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_axis<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;</td>
      </tr>
      <tr>
        <td id="L367" class="blob-num js-line-number" data-line-number="367"></td>
        <td id="LC367" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_perp<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_K<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>;<span class="pl-v">this</span>.m_impulse<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyA.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor1)};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyB.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor2)};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span>(<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">+</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span>)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>),d<span class="pl-k">*</span>(<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">+</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span>)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span>))};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L368" class="blob-num js-line-number" data-line-number="368"></td>
        <td id="LC368" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> d<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointTranslation</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,l<span class="pl-k">=</span>d.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor1),j<span class="pl-k">=</span>h.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor2);h<span class="pl-k">=</span>j.<span class="pl-c1">x</span><span class="pl-k">-</span>l.<span class="pl-c1">x</span>;l<span class="pl-k">=</span>j.<span class="pl-c1">y</span><span class="pl-k">-</span>l.<span class="pl-c1">y</span>;d<span class="pl-k">=</span>d.GetWorldVector(<span class="pl-v">this</span>.m_localXAxis1);<span class="pl-k">return</span> d.<span class="pl-c1">x</span><span class="pl-k">*</span>h<span class="pl-k">+</span>d.<span class="pl-c1">y</span><span class="pl-k">*</span>l};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,l;l<span class="pl-k">=</span>d.m_xf.R;<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span>d.m_sweep.localCenter.<span class="pl-c1">x</span>,o<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span>d.m_sweep.localCenter.<span class="pl-c1">y</span>,q<span class="pl-k">=</span>l.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>j<span class="pl-k">+</span>l.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>o;</td>
      </tr>
      <tr>
        <td id="L369" class="blob-num js-line-number" data-line-number="369"></td>
        <td id="LC369" class="blob-code blob-code-inner js-file-line">o<span class="pl-k">=</span>l.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>j<span class="pl-k">+</span>l.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>o;j<span class="pl-k">=</span>q;l<span class="pl-k">=</span>h.m_xf.R;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">x</span>,a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">y</span>;q<span class="pl-k">=</span>l.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span>l.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span>l.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span>l.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>q;l<span class="pl-k">=</span>h.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span>n<span class="pl-k">-</span>(d.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span>j);q<span class="pl-k">=</span>h.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>a<span class="pl-k">-</span>(d.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>o);<span class="pl-k">var</span> c<span class="pl-k">=</span>d.GetWorldVector(<span class="pl-v">this</span>.m_localXAxis1),g<span class="pl-k">=</span>d.m_linearVelocity,b<span class="pl-k">=</span>h.m_linearVelocity;d<span class="pl-k">=</span>d.m_angularVelocity;h<span class="pl-k">=</span>h.m_angularVelocity;<span class="pl-k">return</span> l<span class="pl-k">*-</span>d<span class="pl-k">*</span>c.<span class="pl-c1">y</span><span class="pl-k">+</span>q<span class="pl-k">*</span>d<span class="pl-k">*</span>c.<span class="pl-c1">x</span><span class="pl-k">+</span>(c.<span class="pl-c1">x</span><span class="pl-k">*</span>(b.<span class="pl-c1">x</span><span class="pl-k">+-</span>h<span class="pl-k">*</span>a<span class="pl-k">-</span>g.<span class="pl-c1">x</span><span class="pl-k">-</span> <span class="pl-k">-</span>d<span class="pl-k">*</span>o)<span class="pl-k">+</span>c.<span class="pl-c1">y</span><span class="pl-k">*</span>(b.<span class="pl-c1">y</span><span class="pl-k">+</span>h<span class="pl-k">*</span>n<span class="pl-k">-</span>g.<span class="pl-c1">y</span><span class="pl-k">-</span>d<span class="pl-k">*</span>j))};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsLimitEnabled</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_enableLimit};</td>
      </tr>
      <tr>
        <td id="L370" class="blob-num js-line-number" data-line-number="370"></td>
        <td id="LC370" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">EnableLimit</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-v">this</span>.m_bodyA.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_bodyB.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_enableLimit<span class="pl-k">=</span>d};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLowerLimit</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_lowerTranslation};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetUpperLimit</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_upperTranslation};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLimits</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(h<span class="pl-k">===</span><span class="pl-c1">undefined</span>)h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_bodyA.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_bodyB.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_lowerTranslation<span class="pl-k">=</span>d;<span class="pl-v">this</span>.m_upperTranslation<span class="pl-k">=</span>h};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsMotorEnabled</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_enableMotor};</td>
      </tr>
      <tr>
        <td id="L371" class="blob-num js-line-number" data-line-number="371"></td>
        <td id="LC371" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">EnableMotor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-v">this</span>.m_bodyA.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_bodyB.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_enableMotor<span class="pl-k">=</span>d};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMotorSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_bodyA.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_bodyB.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_motorSpeed<span class="pl-k">=</span>d};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMotorSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_motorSpeed};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMaxMotorForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_bodyA.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_bodyB.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_maxMotorForce<span class="pl-k">=</span>d};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMotorForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_motorImpulse};</td>
      </tr>
      <tr>
        <td id="L372" class="blob-num js-line-number" data-line-number="372"></td>
        <td id="LC372" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2PrismaticJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-v">this</span>.__super.b2Joint.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,d);<span class="pl-v">this</span>.m_localAnchor1.SetV(d.localAnchorA);<span class="pl-v">this</span>.m_localAnchor2.SetV(d.localAnchorB);<span class="pl-v">this</span>.m_localXAxis1.SetV(d.localAxisA);<span class="pl-v">this</span>.m_localYAxis1.<span class="pl-c1">x</span><span class="pl-k">=-</span><span class="pl-v">this</span>.m_localXAxis1.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_localYAxis1.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_localXAxis1.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_refAngle<span class="pl-k">=</span>d.referenceAngle;<span class="pl-v">this</span>.m_impulse.SetZero();<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">=</span><span class="pl-v">this</span>.m_motorMass<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_lowerTranslation<span class="pl-k">=</span>d.lowerTranslation;<span class="pl-v">this</span>.m_upperTranslation<span class="pl-k">=</span>d.upperTranslation;<span class="pl-v">this</span>.m_maxMotorForce<span class="pl-k">=</span>d.maxMotorForce;<span class="pl-v">this</span>.m_motorSpeed<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L373" class="blob-num js-line-number" data-line-number="373"></td>
        <td id="LC373" class="blob-code blob-code-inner js-file-line">d.motorSpeed;<span class="pl-v">this</span>.m_enableLimit<span class="pl-k">=</span>d.enableLimit;<span class="pl-v">this</span>.m_enableMotor<span class="pl-k">=</span>d.enableMotor;<span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span>I.e_inactiveLimit;<span class="pl-v">this</span>.m_axis.SetZero();<span class="pl-v">this</span>.m_perp.SetZero()};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,l<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,j,o<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_localCenterA.SetV(h.GetLocalCenter());<span class="pl-v">this</span>.m_localCenterB.SetV(l.GetLocalCenter());<span class="pl-k">var</span> q<span class="pl-k">=</span>h.GetTransform();l.GetTransform();j<span class="pl-k">=</span>h.m_xf.R;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_localCenterA.<span class="pl-c1">x</span>,a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_localCenterA.<span class="pl-c1">y</span>;o<span class="pl-k">=</span>j.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span>j.col2.<span class="pl-c1">x</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L374" class="blob-num js-line-number" data-line-number="374"></td>
        <td id="LC374" class="blob-code blob-code-inner js-file-line">a;a<span class="pl-k">=</span>j.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span>j.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>o;j<span class="pl-k">=</span>l.m_xf.R;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_localCenterB.<span class="pl-c1">x</span>,g<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_localCenterB.<span class="pl-c1">y</span>;o<span class="pl-k">=</span>j.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>c<span class="pl-k">+</span>j.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>g;g<span class="pl-k">=</span>j.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>c<span class="pl-k">+</span>j.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>g;c<span class="pl-k">=</span>o;j<span class="pl-k">=</span>l.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span>c<span class="pl-k">-</span>h.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">-</span>n;o<span class="pl-k">=</span>l.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>g<span class="pl-k">-</span>h.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">-</span>a;<span class="pl-v">this</span>.m_invMassA<span class="pl-k">=</span>h.m_invMass;<span class="pl-v">this</span>.m_invMassB<span class="pl-k">=</span>l.m_invMass;<span class="pl-v">this</span>.m_invIA<span class="pl-k">=</span>h.m_invI;<span class="pl-v">this</span>.m_invIB<span class="pl-k">=</span>l.m_invI;<span class="pl-v">this</span>.m_axis.SetV(y.MulMV(q.R,<span class="pl-v">this</span>.m_localXAxis1));<span class="pl-v">this</span>.m_a1<span class="pl-k">=</span>(j<span class="pl-k">+</span>n)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span><span class="pl-k">-</span>(o<span class="pl-k">+</span>a)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_a2<span class="pl-k">=</span>c<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span><span class="pl-k">-</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_motorMass<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L375" class="blob-num js-line-number" data-line-number="375"></td>
        <td id="LC375" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_invMassA<span class="pl-k">+</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">+</span><span class="pl-v">this</span>.m_invIA<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">+</span><span class="pl-v">this</span>.m_invIB<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_motorMass<span class="pl-k">&gt;</span><span class="pl-c1">Number</span>.<span class="pl-c1">MIN_VALUE</span>)<span class="pl-v">this</span>.m_motorMass<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>.m_motorMass;<span class="pl-v">this</span>.m_perp.SetV(y.MulMV(q.R,<span class="pl-v">this</span>.m_localYAxis1));<span class="pl-v">this</span>.m_s1<span class="pl-k">=</span>(j<span class="pl-k">+</span>n)<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">-</span>(o<span class="pl-k">+</span>a)<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_s2<span class="pl-k">=</span>c<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">-</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span>;q<span class="pl-k">=</span><span class="pl-v">this</span>.m_invMassA;n<span class="pl-k">=</span><span class="pl-v">this</span>.m_invMassB;a<span class="pl-k">=</span><span class="pl-v">this</span>.m_invIA;c<span class="pl-k">=</span><span class="pl-v">this</span>.m_invIB;<span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">x</span><span class="pl-k">=</span>q<span class="pl-k">+</span>n<span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2;<span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">y</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2;<span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">z</span><span class="pl-k">=</span>a<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L376" class="blob-num js-line-number" data-line-number="376"></td>
        <td id="LC376" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_s1<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;<span class="pl-v">this</span>.m_K.col2.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_K.col2.<span class="pl-c1">y</span><span class="pl-k">=</span>a<span class="pl-k">+</span>c;<span class="pl-v">this</span>.m_K.col2.<span class="pl-c1">z</span><span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;<span class="pl-v">this</span>.m_K.col3.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.m_K.col3.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_K.col2.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.m_K.col3.<span class="pl-c1">z</span><span class="pl-k">=</span>q<span class="pl-k">+</span>n<span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">+</span>c<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_enableLimit){j<span class="pl-k">=</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span><span class="pl-k">*</span>j<span class="pl-k">+</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span><span class="pl-k">*</span>o;<span class="pl-k">if</span>(y.Abs(<span class="pl-v">this</span>.m_upperTranslation<span class="pl-k">-</span><span class="pl-v">this</span>.m_lowerTranslation)<span class="pl-k">&lt;</span><span class="pl-c1">2</span><span class="pl-k">*</span>F.b2_linearSlop)<span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span>I.e_equalLimits;<span class="pl-k">else</span> <span class="pl-k">if</span>(j<span class="pl-k">&lt;=</span><span class="pl-v">this</span>.m_lowerTranslation){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState<span class="pl-k">!=</span>I.e_atLowerLimit){<span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L377" class="blob-num js-line-number" data-line-number="377"></td>
        <td id="LC377" class="blob-code blob-code-inner js-file-line">I.e_atLowerLimit;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span> <span class="pl-k">if</span>(j<span class="pl-k">&gt;=</span><span class="pl-v">this</span>.m_upperTranslation){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState<span class="pl-k">!=</span>I.e_atUpperLimit){<span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span>I.e_atUpperLimit;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span>{<span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span>I.e_inactiveLimit;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span> <span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span>I.e_inactiveLimit;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_enableMotor<span class="pl-k">==</span><span class="pl-c1">false</span>)<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(d.warmStarting){<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">*=</span>d.dtRatio;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">*=</span>d.dtRatio;<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">*=</span>d.dtRatio;d<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span><span class="pl-k">+</span>(<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">+</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span>)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>;</td>
      </tr>
      <tr>
        <td id="L378" class="blob-num js-line-number" data-line-number="378"></td>
        <td id="LC378" class="blob-code blob-code-inner js-file-line">j<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">+</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span>)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span>;o<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">+</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">+</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span>)<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1;q<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_s2<span class="pl-k">+</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">+</span>(<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">+</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span>)<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;h.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-v">this</span>.m_invMassA<span class="pl-k">*</span>d;h.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-v">this</span>.m_invMassA<span class="pl-k">*</span>j;h.m_angularVelocity<span class="pl-k">-=</span><span class="pl-v">this</span>.m_invIA<span class="pl-k">*</span>o;l.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">*</span>d;l.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">*</span>j;l.m_angularVelocity<span class="pl-k">+=</span><span class="pl-v">this</span>.m_invIB<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L379" class="blob-num js-line-number" data-line-number="379"></td>
        <td id="LC379" class="blob-code blob-code-inner js-file-line">q}<span class="pl-k">else</span>{<span class="pl-v">this</span>.m_impulse.SetZero();<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">=</span><span class="pl-c1">0</span>}};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,l<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,j<span class="pl-k">=</span>h.m_linearVelocity,o<span class="pl-k">=</span>h.m_angularVelocity,q<span class="pl-k">=</span>l.m_linearVelocity,n<span class="pl-k">=</span>l.m_angularVelocity,a<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_enableMotor<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.m_limitState<span class="pl-k">!=</span>I.e_equalLimits){b<span class="pl-k">=</span><span class="pl-v">this</span>.m_motorMass<span class="pl-k">*</span>(<span class="pl-v">this</span>.m_motorSpeed<span class="pl-k">-</span>(<span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span><span class="pl-k">*</span>(q.<span class="pl-c1">x</span><span class="pl-k">-</span>j.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span><span class="pl-k">*</span>(q.<span class="pl-c1">y</span><span class="pl-k">-</span>j.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-v">this</span>.m_a2<span class="pl-k">*</span>n<span class="pl-k">-</span><span class="pl-v">this</span>.m_a1<span class="pl-k">*</span>o));a<span class="pl-k">=</span><span class="pl-v">this</span>.m_motorImpulse;d<span class="pl-k">=</span>d.dt<span class="pl-k">*</span><span class="pl-v">this</span>.m_maxMotorForce;<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">=</span>y.Clamp(<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L380" class="blob-num js-line-number" data-line-number="380"></td>
        <td id="LC380" class="blob-code blob-code-inner js-file-line">b,<span class="pl-k">-</span>d,d);b<span class="pl-k">=</span><span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">-</span>a;a<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>;c<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span>;g<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1;b<span class="pl-k">=</span>b<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;j.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-v">this</span>.m_invMassA<span class="pl-k">*</span>a;j.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-v">this</span>.m_invMassA<span class="pl-k">*</span>c;o<span class="pl-k">-=</span><span class="pl-v">this</span>.m_invIA<span class="pl-k">*</span>g;q.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">*</span>a;q.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">*</span>c;n<span class="pl-k">+=</span><span class="pl-v">this</span>.m_invIB<span class="pl-k">*</span>b}g<span class="pl-k">=</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span><span class="pl-k">*</span>(q.<span class="pl-c1">x</span><span class="pl-k">-</span>j.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">*</span>(q.<span class="pl-c1">y</span><span class="pl-k">-</span>j.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-v">this</span>.m_s2<span class="pl-k">*</span>n<span class="pl-k">-</span><span class="pl-v">this</span>.m_s1<span class="pl-k">*</span>o;c<span class="pl-k">=</span>n<span class="pl-k">-</span>o;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_enableLimit<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.m_limitState<span class="pl-k">!=</span>I.e_inactiveLimit){d<span class="pl-k">=</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span><span class="pl-k">*</span>(q.<span class="pl-c1">x</span><span class="pl-k">-</span>j.<span class="pl-c1">x</span>)<span class="pl-k">+</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span><span class="pl-k">*</span>(q.<span class="pl-c1">y</span><span class="pl-k">-</span>j.<span class="pl-c1">y</span>)<span class="pl-k">+</span><span class="pl-v">this</span>.m_a2<span class="pl-k">*</span>n<span class="pl-k">-</span><span class="pl-v">this</span>.m_a1<span class="pl-k">*</span>o;a<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.Copy();d<span class="pl-k">=</span><span class="pl-v">this</span>.m_K.Solve33(<span class="pl-k">new</span> <span class="pl-en">A</span>,<span class="pl-k">-</span>g,<span class="pl-k">-</span>c,<span class="pl-k">-</span>d);<span class="pl-v">this</span>.m_impulse.Add(d);</td>
      </tr>
      <tr>
        <td id="L381" class="blob-num js-line-number" data-line-number="381"></td>
        <td id="LC381" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState<span class="pl-k">==</span>I.e_atLowerLimit)<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span><span class="pl-k">=</span>y.Max(<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span>,<span class="pl-c1">0</span>);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState<span class="pl-k">==</span>I.e_atUpperLimit)<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span><span class="pl-k">=</span>y.Min(<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span>,<span class="pl-c1">0</span>);g<span class="pl-k">=-</span>g<span class="pl-k">-</span>(<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span><span class="pl-k">-</span>a.<span class="pl-c1">z</span>)<span class="pl-k">*</span><span class="pl-v">this</span>.m_K.col3.<span class="pl-c1">x</span>;c<span class="pl-k">=-</span>c<span class="pl-k">-</span>(<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span><span class="pl-k">-</span>a.<span class="pl-c1">z</span>)<span class="pl-k">*</span><span class="pl-v">this</span>.m_K.col3.<span class="pl-c1">y</span>;c<span class="pl-k">=</span><span class="pl-v">this</span>.m_K.Solve22(<span class="pl-k">new</span> <span class="pl-en">w</span>,g,c);c.<span class="pl-c1">x</span><span class="pl-k">+=</span>a.<span class="pl-c1">x</span>;c.<span class="pl-c1">y</span><span class="pl-k">+=</span>a.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">=</span>c.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">=</span>c.<span class="pl-c1">y</span>;d.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">-</span>a.<span class="pl-c1">x</span>;d.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">-</span>a.<span class="pl-c1">y</span>;d.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span><span class="pl-k">-</span>a.<span class="pl-c1">z</span>;a<span class="pl-k">=</span>d.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span><span class="pl-k">+</span>d.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>;c<span class="pl-k">=</span>d.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">+</span>d.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span>;g<span class="pl-k">=</span>d.<span class="pl-c1">x</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L382" class="blob-num js-line-number" data-line-number="382"></td>
        <td id="LC382" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_s1<span class="pl-k">+</span>d.<span class="pl-c1">y</span><span class="pl-k">+</span>d.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_a1;b<span class="pl-k">=</span>d.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_s2<span class="pl-k">+</span>d.<span class="pl-c1">y</span><span class="pl-k">+</span>d.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_a2}<span class="pl-k">else</span>{d<span class="pl-k">=</span><span class="pl-v">this</span>.m_K.Solve22(<span class="pl-k">new</span> <span class="pl-en">w</span>,<span class="pl-k">-</span>g,<span class="pl-k">-</span>c);<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">+=</span>d.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">+=</span>d.<span class="pl-c1">y</span>;a<span class="pl-k">=</span>d.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span>;c<span class="pl-k">=</span>d.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span>;g<span class="pl-k">=</span>d.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">+</span>d.<span class="pl-c1">y</span>;b<span class="pl-k">=</span>d.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_s2<span class="pl-k">+</span>d.<span class="pl-c1">y</span>}j.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-v">this</span>.m_invMassA<span class="pl-k">*</span>a;j.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-v">this</span>.m_invMassA<span class="pl-k">*</span>c;o<span class="pl-k">-=</span><span class="pl-v">this</span>.m_invIA<span class="pl-k">*</span>g;q.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">*</span>a;q.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">*</span>c;n<span class="pl-k">+=</span><span class="pl-v">this</span>.m_invIB<span class="pl-k">*</span>b;h.m_linearVelocity.SetV(j);h.m_angularVelocity<span class="pl-k">=</span>o;l.m_linearVelocity.SetV(q);l.m_angularVelocity<span class="pl-k">=</span>n};<span class="pl-c1">H</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L383" class="blob-num js-line-number" data-line-number="383"></td>
        <td id="LC383" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_bodyA,h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,l<span class="pl-k">=</span>d.m_sweep.c,j<span class="pl-k">=</span>d.m_sweep.a,o<span class="pl-k">=</span>h.m_sweep.c,q<span class="pl-k">=</span>h.m_sweep.a,n,a<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span>a<span class="pl-k">=</span>n<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span><span class="pl-c1">0</span>;c<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span>G.FromAngle(j),r<span class="pl-k">=</span>G.FromAngle(q);n<span class="pl-k">=</span>m;e<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_localCenterA.<span class="pl-c1">x</span>;<span class="pl-k">var</span> s<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_localCenterA.<span class="pl-c1">y</span>;a<span class="pl-k">=</span>n.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>e<span class="pl-k">+</span>n.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>s;s<span class="pl-k">=</span>n.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>e<span class="pl-k">+</span>n.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>s;e<span class="pl-k">=</span>a;n<span class="pl-k">=</span>r;r<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_localCenterB.<span class="pl-c1">x</span>;g<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_localCenterB.<span class="pl-c1">y</span>;a<span class="pl-k">=</span>n.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>r<span class="pl-k">+</span>n.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>g;g<span class="pl-k">=</span>n.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>r<span class="pl-k">+</span>n.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>g;r<span class="pl-k">=</span>a;n<span class="pl-k">=</span>o.<span class="pl-c1">x</span><span class="pl-k">+</span>r<span class="pl-k">-</span>l.<span class="pl-c1">x</span><span class="pl-k">-</span>e;a<span class="pl-k">=</span>o.<span class="pl-c1">y</span><span class="pl-k">+</span>g<span class="pl-k">-</span>l.<span class="pl-c1">y</span><span class="pl-k">-</span>s;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_enableLimit){<span class="pl-v">this</span>.m_axis<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L384" class="blob-num js-line-number" data-line-number="384"></td>
        <td id="LC384" class="blob-code blob-code-inner js-file-line">y.MulMV(m,<span class="pl-v">this</span>.m_localXAxis1);<span class="pl-v">this</span>.m_a1<span class="pl-k">=</span>(n<span class="pl-k">+</span>e)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span><span class="pl-k">-</span>(a<span class="pl-k">+</span>s)<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_a2<span class="pl-k">=</span>r<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span><span class="pl-k">-</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>;<span class="pl-k">var</span> v<span class="pl-k">=</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span><span class="pl-k">*</span>a;<span class="pl-k">if</span>(y.Abs(<span class="pl-v">this</span>.m_upperTranslation<span class="pl-k">-</span><span class="pl-v">this</span>.m_lowerTranslation)<span class="pl-k">&lt;</span><span class="pl-c1">2</span><span class="pl-k">*</span>F.b2_linearSlop){f<span class="pl-k">=</span>y.Clamp(v,<span class="pl-k">-</span>F.b2_maxLinearCorrection,F.b2_maxLinearCorrection);b<span class="pl-k">=</span>y.Abs(v);c<span class="pl-k">=</span><span class="pl-c1">true</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(v<span class="pl-k">&lt;=</span><span class="pl-v">this</span>.m_lowerTranslation){f<span class="pl-k">=</span>y.Clamp(v<span class="pl-k">-</span><span class="pl-v">this</span>.m_lowerTranslation<span class="pl-k">+</span>F.b2_linearSlop,<span class="pl-k">-</span>F.b2_maxLinearCorrection,<span class="pl-c1">0</span>);b<span class="pl-k">=</span><span class="pl-v">this</span>.m_lowerTranslation<span class="pl-k">-</span>v;c<span class="pl-k">=</span><span class="pl-c1">true</span>}<span class="pl-k">else</span> <span class="pl-k">if</span>(v<span class="pl-k">&gt;=</span><span class="pl-v">this</span>.m_upperTranslation){f<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L385" class="blob-num js-line-number" data-line-number="385"></td>
        <td id="LC385" class="blob-code blob-code-inner js-file-line">y.Clamp(v<span class="pl-k">-</span><span class="pl-v">this</span>.m_upperTranslation<span class="pl-k">+</span>F.b2_linearSlop,<span class="pl-c1">0</span>,F.b2_maxLinearCorrection);b<span class="pl-k">=</span>v<span class="pl-k">-</span><span class="pl-v">this</span>.m_upperTranslation;c<span class="pl-k">=</span><span class="pl-c1">true</span>}}<span class="pl-v">this</span>.m_perp<span class="pl-k">=</span>y.MulMV(m,<span class="pl-v">this</span>.m_localYAxis1);<span class="pl-v">this</span>.m_s1<span class="pl-k">=</span>(n<span class="pl-k">+</span>e)<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">-</span>(a<span class="pl-k">+</span>s)<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_s2<span class="pl-k">=</span>r<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">-</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span>;m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;s<span class="pl-k">=</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">*</span>a;r<span class="pl-k">=</span>q<span class="pl-k">-</span>j<span class="pl-k">-</span><span class="pl-v">this</span>.m_refAngle;b<span class="pl-k">=</span>y.Max(b,y.Abs(s));e<span class="pl-k">=</span>y.Abs(r);<span class="pl-k">if</span>(c){c<span class="pl-k">=</span><span class="pl-v">this</span>.m_invMassA;g<span class="pl-k">=</span><span class="pl-v">this</span>.m_invMassB;n<span class="pl-k">=</span><span class="pl-v">this</span>.m_invIA;a<span class="pl-k">=</span><span class="pl-v">this</span>.m_invIB;<span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">x</span><span class="pl-k">=</span>c<span class="pl-k">+</span>g<span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2;<span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">y</span><span class="pl-k">=</span>n<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L386" class="blob-num js-line-number" data-line-number="386"></td>
        <td id="LC386" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2;<span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">z</span><span class="pl-k">=</span>n<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;<span class="pl-v">this</span>.m_K.col2.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_K.col2.<span class="pl-c1">y</span><span class="pl-k">=</span>n<span class="pl-k">+</span>a;<span class="pl-v">this</span>.m_K.col2.<span class="pl-c1">z</span><span class="pl-k">=</span>n<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;<span class="pl-v">this</span>.m_K.col3.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_K.col1.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.m_K.col3.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_K.col2.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.m_K.col3.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">+</span>g<span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">*</span><span class="pl-v">this</span>.m_a1<span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2<span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;<span class="pl-v">this</span>.m_K.Solve33(m,<span class="pl-k">-</span>s,<span class="pl-k">-</span>r,<span class="pl-k">-</span>f)}<span class="pl-k">else</span>{c<span class="pl-k">=</span><span class="pl-v">this</span>.m_invMassA;g<span class="pl-k">=</span><span class="pl-v">this</span>.m_invMassB;n<span class="pl-k">=</span><span class="pl-v">this</span>.m_invIA;a<span class="pl-k">=</span><span class="pl-v">this</span>.m_invIB;f<span class="pl-k">=</span>n<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2;v<span class="pl-k">=</span>n<span class="pl-k">+</span>a;<span class="pl-v">this</span>.m_K.col1.Set(c<span class="pl-k">+</span>g<span class="pl-k">+</span>n<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">+</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2<span class="pl-k">*</span><span class="pl-v">this</span>.m_s2,f,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.m_K.col2.Set(f,</td>
      </tr>
      <tr>
        <td id="L387" class="blob-num js-line-number" data-line-number="387"></td>
        <td id="LC387" class="blob-code blob-code-inner js-file-line">v,<span class="pl-c1">0</span>);f<span class="pl-k">=</span><span class="pl-v">this</span>.m_K.Solve22(<span class="pl-k">new</span> <span class="pl-en">w</span>,<span class="pl-k">-</span>s,<span class="pl-k">-</span>r);m.<span class="pl-c1">x</span><span class="pl-k">=</span>f.<span class="pl-c1">x</span>;m.<span class="pl-c1">y</span><span class="pl-k">=</span>f.<span class="pl-c1">y</span>;m.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>}f<span class="pl-k">=</span>m.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">x</span><span class="pl-k">+</span>m.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">x</span>;c<span class="pl-k">=</span>m.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_perp.<span class="pl-c1">y</span><span class="pl-k">+</span>m.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_axis.<span class="pl-c1">y</span>;s<span class="pl-k">=</span>m.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_s1<span class="pl-k">+</span>m.<span class="pl-c1">y</span><span class="pl-k">+</span>m.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_a1;m<span class="pl-k">=</span>m.<span class="pl-c1">x</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_s2<span class="pl-k">+</span>m.<span class="pl-c1">y</span><span class="pl-k">+</span>m.<span class="pl-c1">z</span><span class="pl-k">*</span><span class="pl-v">this</span>.m_a2;l.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-v">this</span>.m_invMassA<span class="pl-k">*</span>f;l.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-v">this</span>.m_invMassA<span class="pl-k">*</span>c;j<span class="pl-k">-=</span><span class="pl-v">this</span>.m_invIA<span class="pl-k">*</span>s;o.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">*</span>f;o.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.m_invMassB<span class="pl-k">*</span>c;q<span class="pl-k">+=</span><span class="pl-v">this</span>.m_invIB<span class="pl-k">*</span>m;d.m_sweep.a<span class="pl-k">=</span>j;h.m_sweep.a<span class="pl-k">=</span>q;d.SynchronizeTransform();h.SynchronizeTransform();<span class="pl-k">return</span> b<span class="pl-k">&lt;=</span>F.b2_linearSlop<span class="pl-k">&amp;&amp;</span>e<span class="pl-k">&lt;=</span>F.b2_angularSlop};Box2D.inherit(O,Box2D.Dynamics.Joints.b2JointDef);</td>
      </tr>
      <tr>
        <td id="L388" class="blob-num js-line-number" data-line-number="388"></td>
        <td id="LC388" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">O</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2JointDef.<span class="pl-c1">prototype</span>;<span class="pl-c1">O</span>.<span class="pl-en">b2PrismaticJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.localAnchorA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.localAnchorB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.localAxisA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">O</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2PrismaticJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.__super.b2JointDef.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span>I.e_prismaticJoint;<span class="pl-v">this</span>.localAxisA.Set(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.referenceAngle<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.enableLimit<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-v">this</span>.upperTranslation<span class="pl-k">=</span><span class="pl-v">this</span>.lowerTranslation<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.enableMotor<span class="pl-k">=</span><span class="pl-c1">false</span>;<span class="pl-v">this</span>.motorSpeed<span class="pl-k">=</span><span class="pl-v">this</span>.maxMotorForce<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L389" class="blob-num js-line-number" data-line-number="389"></td>
        <td id="LC389" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>};<span class="pl-c1">O</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>,<span class="pl-smi">j</span>){<span class="pl-v">this</span>.bodyA<span class="pl-k">=</span>d;<span class="pl-v">this</span>.bodyB<span class="pl-k">=</span>h;<span class="pl-v">this</span>.localAnchorA<span class="pl-k">=</span><span class="pl-v">this</span>.bodyA.GetLocalPoint(l);<span class="pl-v">this</span>.localAnchorB<span class="pl-k">=</span><span class="pl-v">this</span>.bodyB.GetLocalPoint(l);<span class="pl-v">this</span>.localAxisA<span class="pl-k">=</span><span class="pl-v">this</span>.bodyA.GetLocalVector(j);<span class="pl-v">this</span>.referenceAngle<span class="pl-k">=</span><span class="pl-v">this</span>.bodyB.GetAngle()<span class="pl-k">-</span><span class="pl-v">this</span>.bodyA.GetAngle()};Box2D.inherit(E,Box2D.Dynamics.Joints.b2Joint);<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2Joint.<span class="pl-c1">prototype</span>;<span class="pl-c1">E</span>.<span class="pl-en">b2PulleyJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2Joint.b2Joint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.m_groundAnchor1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_groundAnchor2<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L390" class="blob-num js-line-number" data-line-number="390"></td>
        <td id="LC390" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_localAnchor1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_localAnchor2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_u1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_u2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyA.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor1)};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyB.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor2)};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">*</span><span class="pl-v">this</span>.m_u2.<span class="pl-c1">x</span>,d<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">*</span><span class="pl-v">this</span>.m_u2.<span class="pl-c1">y</span>)};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-c1">0</span>};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetGroundAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L391" class="blob-num js-line-number" data-line-number="391"></td>
        <td id="LC391" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_ground.m_xf.position.Copy();d.Add(<span class="pl-v">this</span>.m_groundAnchor1);<span class="pl-k">return</span> d};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetGroundAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.m_ground.m_xf.position.Copy();d.Add(<span class="pl-v">this</span>.m_groundAnchor2);<span class="pl-k">return</span> d};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLength1</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor1),h<span class="pl-k">=</span>d.<span class="pl-c1">x</span><span class="pl-k">-</span>(<span class="pl-v">this</span>.m_ground.m_xf.position.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_groundAnchor1.<span class="pl-c1">x</span>);d<span class="pl-k">=</span>d.<span class="pl-c1">y</span><span class="pl-k">-</span>(<span class="pl-v">this</span>.m_ground.m_xf.position.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_groundAnchor1.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(h<span class="pl-k">*</span>h<span class="pl-k">+</span>d<span class="pl-k">*</span>d)};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLength2</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor2),</td>
      </tr>
      <tr>
        <td id="L392" class="blob-num js-line-number" data-line-number="392"></td>
        <td id="LC392" class="blob-code blob-code-inner js-file-line">h<span class="pl-k">=</span>d.<span class="pl-c1">x</span><span class="pl-k">-</span>(<span class="pl-v">this</span>.m_ground.m_xf.position.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_groundAnchor2.<span class="pl-c1">x</span>);d<span class="pl-k">=</span>d.<span class="pl-c1">y</span><span class="pl-k">-</span>(<span class="pl-v">this</span>.m_ground.m_xf.position.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_groundAnchor2.<span class="pl-c1">y</span>);<span class="pl-k">return</span> <span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(h<span class="pl-k">*</span>h<span class="pl-k">+</span>d<span class="pl-k">*</span>d)};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetRatio</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_ratio};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2PulleyJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-v">this</span>.__super.b2Joint.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,d);<span class="pl-v">this</span>.m_ground<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA.m_world.m_groundBody;<span class="pl-v">this</span>.m_groundAnchor1.<span class="pl-c1">x</span><span class="pl-k">=</span>d.groundAnchorA.<span class="pl-c1">x</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_ground.m_xf.position.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_groundAnchor1.<span class="pl-c1">y</span><span class="pl-k">=</span>d.groundAnchorA.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_ground.m_xf.position.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_groundAnchor2.<span class="pl-c1">x</span><span class="pl-k">=</span>d.groundAnchorB.<span class="pl-c1">x</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L393" class="blob-num js-line-number" data-line-number="393"></td>
        <td id="LC393" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_ground.m_xf.position.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_groundAnchor2.<span class="pl-c1">y</span><span class="pl-k">=</span>d.groundAnchorB.<span class="pl-c1">y</span><span class="pl-k">-</span><span class="pl-v">this</span>.m_ground.m_xf.position.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_localAnchor1.SetV(d.localAnchorA);<span class="pl-v">this</span>.m_localAnchor2.SetV(d.localAnchorB);<span class="pl-v">this</span>.m_ratio<span class="pl-k">=</span>d.ratio;<span class="pl-v">this</span>.m_constant<span class="pl-k">=</span>d.lengthA<span class="pl-k">+</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span>d.lengthB;<span class="pl-v">this</span>.m_maxLength1<span class="pl-k">=</span>y.Min(d.maxLengthA,<span class="pl-v">this</span>.m_constant<span class="pl-k">-</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span>E.b2_minPulleyLength);<span class="pl-v">this</span>.m_maxLength2<span class="pl-k">=</span>y.Min(d.maxLengthB,(<span class="pl-v">this</span>.m_constant<span class="pl-k">-</span>E.b2_minPulleyLength)<span class="pl-k">/</span><span class="pl-v">this</span>.m_ratio);<span class="pl-v">this</span>.m_limitImpulse2<span class="pl-k">=</span><span class="pl-v">this</span>.m_limitImpulse1<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L394" class="blob-num js-line-number" data-line-number="394"></td>
        <td id="LC394" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,l<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,j;j<span class="pl-k">=</span>h.m_xf.R;<span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">x</span>,q<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">y</span>,n<span class="pl-k">=</span>j.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>o<span class="pl-k">+</span>j.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>q;q<span class="pl-k">=</span>j.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>o<span class="pl-k">+</span>j.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>q;o<span class="pl-k">=</span>n;j<span class="pl-k">=</span>l.m_xf.R;<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span>l.m_sweep.localCenter.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span>l.m_sweep.localCenter.<span class="pl-c1">y</span>;n<span class="pl-k">=</span>j.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span>j.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span>j.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span>j.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>n;j<span class="pl-k">=</span>l.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span>a;n<span class="pl-k">=</span>l.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>c;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-v">this</span>.m_ground.m_xf.position.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_groundAnchor2.<span class="pl-c1">x</span>,b<span class="pl-k">=</span><span class="pl-v">this</span>.m_ground.m_xf.position.<span class="pl-c1">y</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L395" class="blob-num js-line-number" data-line-number="395"></td>
        <td id="LC395" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_groundAnchor2.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_u1.Set(h.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span>o<span class="pl-k">-</span>(<span class="pl-v">this</span>.m_ground.m_xf.position.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_groundAnchor1.<span class="pl-c1">x</span>),h.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>q<span class="pl-k">-</span>(<span class="pl-v">this</span>.m_ground.m_xf.position.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_groundAnchor1.<span class="pl-c1">y</span>));<span class="pl-v">this</span>.m_u2.Set(j<span class="pl-k">-</span>g,n<span class="pl-k">-</span>b);j<span class="pl-k">=</span><span class="pl-v">this</span>.m_u1.Length();n<span class="pl-k">=</span><span class="pl-v">this</span>.m_u2.Length();j<span class="pl-k">&gt;</span>F.b2_linearSlop<span class="pl-k">?</span><span class="pl-v">this</span>.m_u1.Multiply(<span class="pl-c1">1</span><span class="pl-k">/</span>j)<span class="pl-k">:</span><span class="pl-v">this</span>.m_u1.SetZero();n<span class="pl-k">&gt;</span>F.b2_linearSlop<span class="pl-k">?</span><span class="pl-v">this</span>.m_u2.Multiply(<span class="pl-c1">1</span><span class="pl-k">/</span>n)<span class="pl-k">:</span><span class="pl-v">this</span>.m_u2.SetZero();<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_constant<span class="pl-k">-</span>j<span class="pl-k">-</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span>n<span class="pl-k">&gt;</span><span class="pl-c1">0</span>){<span class="pl-v">this</span>.m_state<span class="pl-k">=</span>I.e_inactiveLimit;<span class="pl-v">this</span>.m_impulse<span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">else</span> <span class="pl-v">this</span>.m_state<span class="pl-k">=</span>I.e_atUpperLimit;<span class="pl-k">if</span>(j<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_maxLength1){<span class="pl-v">this</span>.m_limitState1<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L396" class="blob-num js-line-number" data-line-number="396"></td>
        <td id="LC396" class="blob-code blob-code-inner js-file-line">I.e_inactiveLimit;<span class="pl-v">this</span>.m_limitImpulse1<span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">else</span> <span class="pl-v">this</span>.m_limitState1<span class="pl-k">=</span>I.e_atUpperLimit;<span class="pl-k">if</span>(n<span class="pl-k">&lt;</span><span class="pl-v">this</span>.m_maxLength2){<span class="pl-v">this</span>.m_limitState2<span class="pl-k">=</span>I.e_inactiveLimit;<span class="pl-v">this</span>.m_limitImpulse2<span class="pl-k">=</span><span class="pl-c1">0</span>}<span class="pl-k">else</span> <span class="pl-v">this</span>.m_limitState2<span class="pl-k">=</span>I.e_atUpperLimit;j<span class="pl-k">=</span>o<span class="pl-k">*</span><span class="pl-v">this</span>.m_u1.<span class="pl-c1">y</span><span class="pl-k">-</span>q<span class="pl-k">*</span><span class="pl-v">this</span>.m_u1.<span class="pl-c1">x</span>;n<span class="pl-k">=</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.m_u2.<span class="pl-c1">y</span><span class="pl-k">-</span>c<span class="pl-k">*</span><span class="pl-v">this</span>.m_u2.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_limitMass1<span class="pl-k">=</span>h.m_invMass<span class="pl-k">+</span>h.m_invI<span class="pl-k">*</span>j<span class="pl-k">*</span>j;<span class="pl-v">this</span>.m_limitMass2<span class="pl-k">=</span>l.m_invMass<span class="pl-k">+</span>l.m_invI<span class="pl-k">*</span>n<span class="pl-k">*</span>n;<span class="pl-v">this</span>.m_pulleyMass<span class="pl-k">=</span><span class="pl-v">this</span>.m_limitMass1<span class="pl-k">+</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span><span class="pl-v">this</span>.m_limitMass2;<span class="pl-v">this</span>.m_limitMass1<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>.m_limitMass1;<span class="pl-v">this</span>.m_limitMass2<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>.m_limitMass2;</td>
      </tr>
      <tr>
        <td id="L397" class="blob-num js-line-number" data-line-number="397"></td>
        <td id="LC397" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_pulleyMass<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-v">this</span>.m_pulleyMass;<span class="pl-k">if</span>(d.warmStarting){<span class="pl-v">this</span>.m_impulse<span class="pl-k">*=</span>d.dtRatio;<span class="pl-v">this</span>.m_limitImpulse1<span class="pl-k">*=</span>d.dtRatio;<span class="pl-v">this</span>.m_limitImpulse2<span class="pl-k">*=</span>d.dtRatio;d<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">-</span><span class="pl-v">this</span>.m_limitImpulse1)<span class="pl-k">*</span><span class="pl-v">this</span>.m_u1.<span class="pl-c1">x</span>;j<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">-</span><span class="pl-v">this</span>.m_limitImpulse1)<span class="pl-k">*</span><span class="pl-v">this</span>.m_u1.<span class="pl-c1">y</span>;n<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">-</span><span class="pl-v">this</span>.m_limitImpulse2)<span class="pl-k">*</span><span class="pl-v">this</span>.m_u2.<span class="pl-c1">x</span>;g<span class="pl-k">=</span>(<span class="pl-k">-</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">-</span><span class="pl-v">this</span>.m_limitImpulse2)<span class="pl-k">*</span><span class="pl-v">this</span>.m_u2.<span class="pl-c1">y</span>;h.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span>h.m_invMass<span class="pl-k">*</span>d;h.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>h.m_invMass<span class="pl-k">*</span>j;h.m_angularVelocity<span class="pl-k">+=</span>h.m_invI<span class="pl-k">*</span>(o<span class="pl-k">*</span>j<span class="pl-k">-</span>q<span class="pl-k">*</span>d);l.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span></td>
      </tr>
      <tr>
        <td id="L398" class="blob-num js-line-number" data-line-number="398"></td>
        <td id="LC398" class="blob-code blob-code-inner js-file-line">l.m_invMass<span class="pl-k">*</span>n;l.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>l.m_invMass<span class="pl-k">*</span>g;l.m_angularVelocity<span class="pl-k">+=</span>l.m_invI<span class="pl-k">*</span>(a<span class="pl-k">*</span>g<span class="pl-k">-</span>c<span class="pl-k">*</span>n)}<span class="pl-k">else</span> <span class="pl-v">this</span>.m_limitImpulse2<span class="pl-k">=</span><span class="pl-v">this</span>.m_limitImpulse1<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,l;l<span class="pl-k">=</span>d.m_xf.R;<span class="pl-k">var</span> j<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span>d.m_sweep.localCenter.<span class="pl-c1">x</span>,o<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span>d.m_sweep.localCenter.<span class="pl-c1">y</span>,q<span class="pl-k">=</span>l.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>j<span class="pl-k">+</span>l.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>o;o<span class="pl-k">=</span>l.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>j<span class="pl-k">+</span>l.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>o;j<span class="pl-k">=</span>q;l<span class="pl-k">=</span>h.m_xf.R;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">x</span>,a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">y</span>;</td>
      </tr>
      <tr>
        <td id="L399" class="blob-num js-line-number" data-line-number="399"></td>
        <td id="LC399" class="blob-code blob-code-inner js-file-line">q<span class="pl-k">=</span>l.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span>l.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span>l.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span>l.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>q;<span class="pl-k">var</span> c<span class="pl-k">=</span>q<span class="pl-k">=</span>l<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>;l<span class="pl-k">=</span>g<span class="pl-k">=</span>l<span class="pl-k">=</span>g<span class="pl-k">=</span>c<span class="pl-k">=</span>q<span class="pl-k">=</span>l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_state<span class="pl-k">==</span>I.e_atUpperLimit){l<span class="pl-k">=</span>d.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+-</span>d.m_angularVelocity<span class="pl-k">*</span>o;q<span class="pl-k">=</span>d.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+</span>d.m_angularVelocity<span class="pl-k">*</span>j;c<span class="pl-k">=</span>h.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+-</span>h.m_angularVelocity<span class="pl-k">*</span>a;g<span class="pl-k">=</span>h.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+</span>h.m_angularVelocity<span class="pl-k">*</span>n;l<span class="pl-k">=-</span>(<span class="pl-v">this</span>.m_u1.<span class="pl-c1">x</span><span class="pl-k">*</span>l<span class="pl-k">+</span><span class="pl-v">this</span>.m_u1.<span class="pl-c1">y</span><span class="pl-k">*</span>q)<span class="pl-k">-</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span>(<span class="pl-v">this</span>.m_u2.<span class="pl-c1">x</span><span class="pl-k">*</span>c<span class="pl-k">+</span><span class="pl-v">this</span>.m_u2.<span class="pl-c1">y</span><span class="pl-k">*</span>g);g<span class="pl-k">=</span><span class="pl-v">this</span>.m_pulleyMass<span class="pl-k">*-</span>l;l<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse;<span class="pl-v">this</span>.m_impulse<span class="pl-k">=</span>y.Max(<span class="pl-c1">0</span>,<span class="pl-v">this</span>.m_impulse<span class="pl-k">+</span>g);g<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse<span class="pl-k">-</span>l;l<span class="pl-k">=-</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_u1.<span class="pl-c1">x</span>;q<span class="pl-k">=-</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_u1.<span class="pl-c1">y</span>;</td>
      </tr>
      <tr>
        <td id="L400" class="blob-num js-line-number" data-line-number="400"></td>
        <td id="LC400" class="blob-code blob-code-inner js-file-line">c<span class="pl-k">=-</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_u2.<span class="pl-c1">x</span>;g<span class="pl-k">=-</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_u2.<span class="pl-c1">y</span>;d.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span>d.m_invMass<span class="pl-k">*</span>l;d.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>d.m_invMass<span class="pl-k">*</span>q;d.m_angularVelocity<span class="pl-k">+=</span>d.m_invI<span class="pl-k">*</span>(j<span class="pl-k">*</span>q<span class="pl-k">-</span>o<span class="pl-k">*</span>l);h.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span>h.m_invMass<span class="pl-k">*</span>c;h.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>h.m_invMass<span class="pl-k">*</span>g;h.m_angularVelocity<span class="pl-k">+=</span>h.m_invI<span class="pl-k">*</span>(n<span class="pl-k">*</span>g<span class="pl-k">-</span>a<span class="pl-k">*</span>c)}<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState1<span class="pl-k">==</span>I.e_atUpperLimit){l<span class="pl-k">=</span>d.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+-</span>d.m_angularVelocity<span class="pl-k">*</span>o;q<span class="pl-k">=</span>d.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+</span>d.m_angularVelocity<span class="pl-k">*</span>j;l<span class="pl-k">=-</span>(<span class="pl-v">this</span>.m_u1.<span class="pl-c1">x</span><span class="pl-k">*</span>l<span class="pl-k">+</span><span class="pl-v">this</span>.m_u1.<span class="pl-c1">y</span><span class="pl-k">*</span>q);g<span class="pl-k">=-</span><span class="pl-v">this</span>.m_limitMass1<span class="pl-k">*</span>l;l<span class="pl-k">=</span><span class="pl-v">this</span>.m_limitImpulse1;<span class="pl-v">this</span>.m_limitImpulse1<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L401" class="blob-num js-line-number" data-line-number="401"></td>
        <td id="LC401" class="blob-code blob-code-inner js-file-line">y.Max(<span class="pl-c1">0</span>,<span class="pl-v">this</span>.m_limitImpulse1<span class="pl-k">+</span>g);g<span class="pl-k">=</span><span class="pl-v">this</span>.m_limitImpulse1<span class="pl-k">-</span>l;l<span class="pl-k">=-</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_u1.<span class="pl-c1">x</span>;q<span class="pl-k">=-</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_u1.<span class="pl-c1">y</span>;d.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span>d.m_invMass<span class="pl-k">*</span>l;d.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>d.m_invMass<span class="pl-k">*</span>q;d.m_angularVelocity<span class="pl-k">+=</span>d.m_invI<span class="pl-k">*</span>(j<span class="pl-k">*</span>q<span class="pl-k">-</span>o<span class="pl-k">*</span>l)}<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState2<span class="pl-k">==</span>I.e_atUpperLimit){c<span class="pl-k">=</span>h.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+-</span>h.m_angularVelocity<span class="pl-k">*</span>a;g<span class="pl-k">=</span>h.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+</span>h.m_angularVelocity<span class="pl-k">*</span>n;l<span class="pl-k">=-</span>(<span class="pl-v">this</span>.m_u2.<span class="pl-c1">x</span><span class="pl-k">*</span>c<span class="pl-k">+</span><span class="pl-v">this</span>.m_u2.<span class="pl-c1">y</span><span class="pl-k">*</span>g);g<span class="pl-k">=-</span><span class="pl-v">this</span>.m_limitMass2<span class="pl-k">*</span>l;l<span class="pl-k">=</span><span class="pl-v">this</span>.m_limitImpulse2;<span class="pl-v">this</span>.m_limitImpulse2<span class="pl-k">=</span>y.Max(<span class="pl-c1">0</span>,<span class="pl-v">this</span>.m_limitImpulse2<span class="pl-k">+</span>g);g<span class="pl-k">=</span><span class="pl-v">this</span>.m_limitImpulse2<span class="pl-k">-</span>l;c<span class="pl-k">=-</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_u2.<span class="pl-c1">x</span>;</td>
      </tr>
      <tr>
        <td id="L402" class="blob-num js-line-number" data-line-number="402"></td>
        <td id="LC402" class="blob-code blob-code-inner js-file-line">g<span class="pl-k">=-</span>g<span class="pl-k">*</span><span class="pl-v">this</span>.m_u2.<span class="pl-c1">y</span>;h.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span>h.m_invMass<span class="pl-k">*</span>c;h.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>h.m_invMass<span class="pl-k">*</span>g;h.m_angularVelocity<span class="pl-k">+=</span>h.m_invI<span class="pl-k">*</span>(n<span class="pl-k">*</span>g<span class="pl-k">-</span>a<span class="pl-k">*</span>c)}};<span class="pl-c1">E</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,l,j<span class="pl-k">=</span><span class="pl-v">this</span>.m_ground.m_xf.position.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_groundAnchor1.<span class="pl-c1">x</span>,o<span class="pl-k">=</span><span class="pl-v">this</span>.m_ground.m_xf.position.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_groundAnchor1.<span class="pl-c1">y</span>,q<span class="pl-k">=</span><span class="pl-v">this</span>.m_ground.m_xf.position.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_groundAnchor2.<span class="pl-c1">x</span>,n<span class="pl-k">=</span><span class="pl-v">this</span>.m_ground.m_xf.position.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_groundAnchor2.<span class="pl-c1">y</span>,a<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span><span class="pl-c1">0</span>,g<span class="pl-k">=</span><span class="pl-c1">0</span>,b<span class="pl-k">=</span><span class="pl-c1">0</span>,e<span class="pl-k">=</span>l<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-c1">0</span>,m<span class="pl-k">=</span><span class="pl-c1">0</span>,r<span class="pl-k">=</span>e<span class="pl-k">=</span>m<span class="pl-k">=</span>l<span class="pl-k">=</span>e<span class="pl-k">=</span>l<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_state<span class="pl-k">==</span>I.e_atUpperLimit){l<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L403" class="blob-num js-line-number" data-line-number="403"></td>
        <td id="LC403" class="blob-code blob-code-inner js-file-line">d.m_xf.R;a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span>d.m_sweep.localCenter.<span class="pl-c1">x</span>;c<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span>d.m_sweep.localCenter.<span class="pl-c1">y</span>;e<span class="pl-k">=</span>l.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span>l.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span>l.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span>l.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>e;l<span class="pl-k">=</span>h.m_xf.R;g<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">x</span>;b<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">y</span>;e<span class="pl-k">=</span>l.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>g<span class="pl-k">+</span>l.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>b;b<span class="pl-k">=</span>l.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>g<span class="pl-k">+</span>l.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>b;g<span class="pl-k">=</span>e;l<span class="pl-k">=</span>d.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span>a;e<span class="pl-k">=</span>d.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>c;f<span class="pl-k">=</span>h.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span>g;m<span class="pl-k">=</span>h.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>b;<span class="pl-v">this</span>.m_u1.Set(l<span class="pl-k">-</span>j,e<span class="pl-k">-</span>o);<span class="pl-v">this</span>.m_u2.Set(f<span class="pl-k">-</span>q,m<span class="pl-k">-</span>n);l<span class="pl-k">=</span><span class="pl-v">this</span>.m_u1.Length();e<span class="pl-k">=</span><span class="pl-v">this</span>.m_u2.Length();l<span class="pl-k">&gt;</span>F.b2_linearSlop<span class="pl-k">?</span><span class="pl-v">this</span>.m_u1.Multiply(<span class="pl-c1">1</span><span class="pl-k">/</span></td>
      </tr>
      <tr>
        <td id="L404" class="blob-num js-line-number" data-line-number="404"></td>
        <td id="LC404" class="blob-code blob-code-inner js-file-line">l)<span class="pl-k">:</span><span class="pl-v">this</span>.m_u1.SetZero();e<span class="pl-k">&gt;</span>F.b2_linearSlop<span class="pl-k">?</span><span class="pl-v">this</span>.m_u2.Multiply(<span class="pl-c1">1</span><span class="pl-k">/</span>e)<span class="pl-k">:</span><span class="pl-v">this</span>.m_u2.SetZero();l<span class="pl-k">=</span><span class="pl-v">this</span>.m_constant<span class="pl-k">-</span>l<span class="pl-k">-</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span>e;r<span class="pl-k">=</span>y.Max(r,<span class="pl-k">-</span>l);l<span class="pl-k">=</span>y.Clamp(l<span class="pl-k">+</span>F.b2_linearSlop,<span class="pl-k">-</span>F.b2_maxLinearCorrection,<span class="pl-c1">0</span>);m<span class="pl-k">=-</span><span class="pl-v">this</span>.m_pulleyMass<span class="pl-k">*</span>l;l<span class="pl-k">=-</span>m<span class="pl-k">*</span><span class="pl-v">this</span>.m_u1.<span class="pl-c1">x</span>;e<span class="pl-k">=-</span>m<span class="pl-k">*</span><span class="pl-v">this</span>.m_u1.<span class="pl-c1">y</span>;f<span class="pl-k">=-</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span>m<span class="pl-k">*</span><span class="pl-v">this</span>.m_u2.<span class="pl-c1">x</span>;m<span class="pl-k">=-</span><span class="pl-v">this</span>.m_ratio<span class="pl-k">*</span>m<span class="pl-k">*</span><span class="pl-v">this</span>.m_u2.<span class="pl-c1">y</span>;d.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+=</span>d.m_invMass<span class="pl-k">*</span>l;d.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+=</span>d.m_invMass<span class="pl-k">*</span>e;d.m_sweep.a<span class="pl-k">+=</span>d.m_invI<span class="pl-k">*</span>(a<span class="pl-k">*</span>e<span class="pl-k">-</span>c<span class="pl-k">*</span>l);h.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+=</span>h.m_invMass<span class="pl-k">*</span>f;h.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+=</span>h.m_invMass<span class="pl-k">*</span>m;h.m_sweep.a<span class="pl-k">+=</span>h.m_invI<span class="pl-k">*</span>(g<span class="pl-k">*</span>m<span class="pl-k">-</span>b<span class="pl-k">*</span>f);d.SynchronizeTransform();</td>
      </tr>
      <tr>
        <td id="L405" class="blob-num js-line-number" data-line-number="405"></td>
        <td id="LC405" class="blob-code blob-code-inner js-file-line">h.SynchronizeTransform()}<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState1<span class="pl-k">==</span>I.e_atUpperLimit){l<span class="pl-k">=</span>d.m_xf.R;a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span>d.m_sweep.localCenter.<span class="pl-c1">x</span>;c<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span>d.m_sweep.localCenter.<span class="pl-c1">y</span>;e<span class="pl-k">=</span>l.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span>l.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span>l.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span>l.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>e;l<span class="pl-k">=</span>d.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span>a;e<span class="pl-k">=</span>d.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>c;<span class="pl-v">this</span>.m_u1.Set(l<span class="pl-k">-</span>j,e<span class="pl-k">-</span>o);l<span class="pl-k">=</span><span class="pl-v">this</span>.m_u1.Length();<span class="pl-k">if</span>(l<span class="pl-k">&gt;</span>F.b2_linearSlop){<span class="pl-v">this</span>.m_u1.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-c1">1</span><span class="pl-k">/</span>l;<span class="pl-v">this</span>.m_u1.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-c1">1</span><span class="pl-k">/</span>l}<span class="pl-k">else</span> <span class="pl-v">this</span>.m_u1.SetZero();l<span class="pl-k">=</span><span class="pl-v">this</span>.m_maxLength1<span class="pl-k">-</span>l;r<span class="pl-k">=</span>y.Max(r,<span class="pl-k">-</span>l);l<span class="pl-k">=</span>y.Clamp(l<span class="pl-k">+</span>F.b2_linearSlop,<span class="pl-k">-</span>F.b2_maxLinearCorrection,<span class="pl-c1">0</span>);m<span class="pl-k">=-</span><span class="pl-v">this</span>.m_limitMass1<span class="pl-k">*</span>l;</td>
      </tr>
      <tr>
        <td id="L406" class="blob-num js-line-number" data-line-number="406"></td>
        <td id="LC406" class="blob-code blob-code-inner js-file-line">l<span class="pl-k">=-</span>m<span class="pl-k">*</span><span class="pl-v">this</span>.m_u1.<span class="pl-c1">x</span>;e<span class="pl-k">=-</span>m<span class="pl-k">*</span><span class="pl-v">this</span>.m_u1.<span class="pl-c1">y</span>;d.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+=</span>d.m_invMass<span class="pl-k">*</span>l;d.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+=</span>d.m_invMass<span class="pl-k">*</span>e;d.m_sweep.a<span class="pl-k">+=</span>d.m_invI<span class="pl-k">*</span>(a<span class="pl-k">*</span>e<span class="pl-k">-</span>c<span class="pl-k">*</span>l);d.SynchronizeTransform()}<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState2<span class="pl-k">==</span>I.e_atUpperLimit){l<span class="pl-k">=</span>h.m_xf.R;g<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">x</span>;b<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">y</span>;e<span class="pl-k">=</span>l.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>g<span class="pl-k">+</span>l.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>b;b<span class="pl-k">=</span>l.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>g<span class="pl-k">+</span>l.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>b;g<span class="pl-k">=</span>e;f<span class="pl-k">=</span>h.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span>g;m<span class="pl-k">=</span>h.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>b;<span class="pl-v">this</span>.m_u2.Set(f<span class="pl-k">-</span>q,m<span class="pl-k">-</span>n);e<span class="pl-k">=</span><span class="pl-v">this</span>.m_u2.Length();<span class="pl-k">if</span>(e<span class="pl-k">&gt;</span>F.b2_linearSlop){<span class="pl-v">this</span>.m_u2.<span class="pl-c1">x</span><span class="pl-k">*=</span><span class="pl-c1">1</span><span class="pl-k">/</span>e;<span class="pl-v">this</span>.m_u2.<span class="pl-c1">y</span><span class="pl-k">*=</span><span class="pl-c1">1</span><span class="pl-k">/</span>e}<span class="pl-k">else</span> <span class="pl-v">this</span>.m_u2.SetZero();</td>
      </tr>
      <tr>
        <td id="L407" class="blob-num js-line-number" data-line-number="407"></td>
        <td id="LC407" class="blob-code blob-code-inner js-file-line">l<span class="pl-k">=</span><span class="pl-v">this</span>.m_maxLength2<span class="pl-k">-</span>e;r<span class="pl-k">=</span>y.Max(r,<span class="pl-k">-</span>l);l<span class="pl-k">=</span>y.Clamp(l<span class="pl-k">+</span>F.b2_linearSlop,<span class="pl-k">-</span>F.b2_maxLinearCorrection,<span class="pl-c1">0</span>);m<span class="pl-k">=-</span><span class="pl-v">this</span>.m_limitMass2<span class="pl-k">*</span>l;f<span class="pl-k">=-</span>m<span class="pl-k">*</span><span class="pl-v">this</span>.m_u2.<span class="pl-c1">x</span>;m<span class="pl-k">=-</span>m<span class="pl-k">*</span><span class="pl-v">this</span>.m_u2.<span class="pl-c1">y</span>;h.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+=</span>h.m_invMass<span class="pl-k">*</span>f;h.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+=</span>h.m_invMass<span class="pl-k">*</span>m;h.m_sweep.a<span class="pl-k">+=</span>h.m_invI<span class="pl-k">*</span>(g<span class="pl-k">*</span>m<span class="pl-k">-</span>b<span class="pl-k">*</span>f);h.SynchronizeTransform()}<span class="pl-k">return</span> r<span class="pl-k">&lt;</span>F.b2_linearSlop};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength<span class="pl-k">=</span><span class="pl-c1">2</span>});Box2D.inherit(R,Box2D.Dynamics.Joints.b2JointDef);<span class="pl-c1">R</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2JointDef.<span class="pl-c1">prototype</span>;R.b2PulleyJointDef<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L408" class="blob-num js-line-number" data-line-number="408"></td>
        <td id="LC408" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.groundAnchorA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.groundAnchorB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.localAnchorA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.localAnchorB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">R</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2PulleyJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.__super.b2JointDef.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span>I.e_pulleyJoint;<span class="pl-v">this</span>.groundAnchorA.Set(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-v">this</span>.groundAnchorB.Set(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>);<span class="pl-v">this</span>.localAnchorA.Set(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.localAnchorB.Set(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.maxLengthB<span class="pl-k">=</span><span class="pl-v">this</span>.lengthB<span class="pl-k">=</span><span class="pl-v">this</span>.maxLengthA<span class="pl-k">=</span><span class="pl-v">this</span>.lengthA<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.ratio<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-v">this</span>.collideConnected<span class="pl-k">=</span><span class="pl-c1">true</span>};<span class="pl-c1">R</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L409" class="blob-num js-line-number" data-line-number="409"></td>
        <td id="LC409" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>,<span class="pl-smi">j</span>,<span class="pl-smi">o</span>,<span class="pl-smi">q</span>,<span class="pl-smi">n</span>){<span class="pl-k">if</span>(n<span class="pl-k">===</span><span class="pl-c1">undefined</span>)n<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.bodyA<span class="pl-k">=</span>d;<span class="pl-v">this</span>.bodyB<span class="pl-k">=</span>h;<span class="pl-v">this</span>.groundAnchorA.SetV(l);<span class="pl-v">this</span>.groundAnchorB.SetV(j);<span class="pl-v">this</span>.localAnchorA<span class="pl-k">=</span><span class="pl-v">this</span>.bodyA.GetLocalPoint(o);<span class="pl-v">this</span>.localAnchorB<span class="pl-k">=</span><span class="pl-v">this</span>.bodyB.GetLocalPoint(q);d<span class="pl-k">=</span>o.<span class="pl-c1">x</span><span class="pl-k">-</span>l.<span class="pl-c1">x</span>;l<span class="pl-k">=</span>o.<span class="pl-c1">y</span><span class="pl-k">-</span>l.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.lengthA<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(d<span class="pl-k">*</span>d<span class="pl-k">+</span>l<span class="pl-k">*</span>l);l<span class="pl-k">=</span>q.<span class="pl-c1">x</span><span class="pl-k">-</span>j.<span class="pl-c1">x</span>;j<span class="pl-k">=</span>q.<span class="pl-c1">y</span><span class="pl-k">-</span>j.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.lengthB<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(l<span class="pl-k">*</span>l<span class="pl-k">+</span>j<span class="pl-k">*</span>j);<span class="pl-v">this</span>.ratio<span class="pl-k">=</span>n;n<span class="pl-k">=</span><span class="pl-v">this</span>.lengthA<span class="pl-k">+</span><span class="pl-v">this</span>.ratio<span class="pl-k">*</span><span class="pl-v">this</span>.lengthB;<span class="pl-v">this</span>.maxLengthA<span class="pl-k">=</span>n<span class="pl-k">-</span><span class="pl-v">this</span>.ratio<span class="pl-k">*</span>E.b2_minPulleyLength;<span class="pl-v">this</span>.maxLengthB<span class="pl-k">=</span>(n<span class="pl-k">-</span>E.b2_minPulleyLength)<span class="pl-k">/</span><span class="pl-v">this</span>.ratio};Box2D.inherit(N,Box2D.Dynamics.Joints.b2Joint);</td>
      </tr>
      <tr>
        <td id="L410" class="blob-num js-line-number" data-line-number="410"></td>
        <td id="LC410" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2Joint.<span class="pl-c1">prototype</span>;<span class="pl-c1">N</span>.<span class="pl-en">b2RevoluteJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2Joint.b2Joint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.K<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-v">this</span>.K1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-v">this</span>.K2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-v">this</span>.K3<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">G</span>;<span class="pl-v">this</span>.impulse3<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-v">this</span>.impulse2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.reduced<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_localAnchor1<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_localAnchor2<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_impulse<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-v">this</span>.m_mass<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyA.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor1)};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyB.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchor2)};</td>
      </tr>
      <tr>
        <td id="L411" class="blob-num js-line-number" data-line-number="411"></td>
        <td id="LC411" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionForce</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span>,d<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>)};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> d<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span>};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointAngle</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyB.m_sweep.a<span class="pl-k">-</span><span class="pl-v">this</span>.m_bodyA.m_sweep.a<span class="pl-k">-</span><span class="pl-v">this</span>.m_referenceAngle};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetJointSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyB.m_angularVelocity<span class="pl-k">-</span><span class="pl-v">this</span>.m_bodyA.m_angularVelocity};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsLimitEnabled</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_enableLimit};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">EnableLimit</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L412" class="blob-num js-line-number" data-line-number="412"></td>
        <td id="LC412" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-v">this</span>.m_enableLimit<span class="pl-k">=</span>d};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLowerLimit</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_lowerAngle};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetUpperLimit</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_upperAngle};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLimits</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(h<span class="pl-k">===</span><span class="pl-c1">undefined</span>)h<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_lowerAngle<span class="pl-k">=</span>d;<span class="pl-v">this</span>.m_upperAngle<span class="pl-k">=</span>h};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">IsMotorEnabled</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_bodyA.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_bodyB.SetAwake(<span class="pl-c1">true</span>);<span class="pl-k">return</span> <span class="pl-v">this</span>.m_enableMotor};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">EnableMotor</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-v">this</span>.m_enableMotor<span class="pl-k">=</span>d};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMotorSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L413" class="blob-num js-line-number" data-line-number="413"></td>
        <td id="LC413" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_bodyA.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_bodyB.SetAwake(<span class="pl-c1">true</span>);<span class="pl-v">this</span>.m_motorSpeed<span class="pl-k">=</span>d};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMotorSpeed</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_motorSpeed};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetMaxMotorTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_maxMotorTorque<span class="pl-k">=</span>d};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetMotorTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_maxMotorTorque};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2RevoluteJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-v">this</span>.__super.b2Joint.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,d);<span class="pl-v">this</span>.m_localAnchor1.SetV(d.localAnchorA);<span class="pl-v">this</span>.m_localAnchor2.SetV(d.localAnchorB);<span class="pl-v">this</span>.m_referenceAngle<span class="pl-k">=</span>d.referenceAngle;</td>
      </tr>
      <tr>
        <td id="L414" class="blob-num js-line-number" data-line-number="414"></td>
        <td id="LC414" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_impulse.SetZero();<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_lowerAngle<span class="pl-k">=</span>d.lowerAngle;<span class="pl-v">this</span>.m_upperAngle<span class="pl-k">=</span>d.upperAngle;<span class="pl-v">this</span>.m_maxMotorTorque<span class="pl-k">=</span>d.maxMotorTorque;<span class="pl-v">this</span>.m_motorSpeed<span class="pl-k">=</span>d.motorSpeed;<span class="pl-v">this</span>.m_enableLimit<span class="pl-k">=</span>d.enableLimit;<span class="pl-v">this</span>.m_enableMotor<span class="pl-k">=</span>d.enableMotor;<span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span>I.e_inactiveLimit};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,l<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,j,o<span class="pl-k">=</span><span class="pl-c1">0</span>;j<span class="pl-k">=</span>h.m_xf.R;<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">x</span>,n<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">y</span>;o<span class="pl-k">=</span>j.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">+</span>j.col2.<span class="pl-c1">x</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L415" class="blob-num js-line-number" data-line-number="415"></td>
        <td id="LC415" class="blob-code blob-code-inner js-file-line">n;n<span class="pl-k">=</span>j.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>q<span class="pl-k">+</span>j.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>n;q<span class="pl-k">=</span>o;j<span class="pl-k">=</span>l.m_xf.R;<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span>l.m_sweep.localCenter.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span>l.m_sweep.localCenter.<span class="pl-c1">y</span>;o<span class="pl-k">=</span>j.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span>j.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span>j.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span>j.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>o;j<span class="pl-k">=</span>h.m_invMass;o<span class="pl-k">=</span>l.m_invMass;<span class="pl-k">var</span> g<span class="pl-k">=</span>h.m_invI,b<span class="pl-k">=</span>l.m_invI;<span class="pl-v">this</span>.m_mass.col1.<span class="pl-c1">x</span><span class="pl-k">=</span>j<span class="pl-k">+</span>o<span class="pl-k">+</span>n<span class="pl-k">*</span>n<span class="pl-k">*</span>g<span class="pl-k">+</span>c<span class="pl-k">*</span>c<span class="pl-k">*</span>b;<span class="pl-v">this</span>.m_mass.col2.<span class="pl-c1">x</span><span class="pl-k">=-</span>n<span class="pl-k">*</span>q<span class="pl-k">*</span>g<span class="pl-k">-</span>c<span class="pl-k">*</span>a<span class="pl-k">*</span>b;<span class="pl-v">this</span>.m_mass.col3.<span class="pl-c1">x</span><span class="pl-k">=-</span>n<span class="pl-k">*</span>g<span class="pl-k">-</span>c<span class="pl-k">*</span>b;<span class="pl-v">this</span>.m_mass.col1.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_mass.col2.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_mass.col2.<span class="pl-c1">y</span><span class="pl-k">=</span>j<span class="pl-k">+</span>o<span class="pl-k">+</span>q<span class="pl-k">*</span>q<span class="pl-k">*</span>g<span class="pl-k">+</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>b;<span class="pl-v">this</span>.m_mass.col3.<span class="pl-c1">y</span><span class="pl-k">=</span>q<span class="pl-k">*</span>g<span class="pl-k">+</span>a<span class="pl-k">*</span>b;<span class="pl-v">this</span>.m_mass.col1.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_mass.col3.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_mass.col2.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_mass.col3.<span class="pl-c1">y</span>;</td>
      </tr>
      <tr>
        <td id="L416" class="blob-num js-line-number" data-line-number="416"></td>
        <td id="LC416" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_mass.col3.<span class="pl-c1">z</span><span class="pl-k">=</span>g<span class="pl-k">+</span>b;<span class="pl-v">this</span>.m_motorMass<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(g<span class="pl-k">+</span>b);<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_enableMotor<span class="pl-k">==</span><span class="pl-c1">false</span>)<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_enableLimit){<span class="pl-k">var</span> e<span class="pl-k">=</span>l.m_sweep.a<span class="pl-k">-</span>h.m_sweep.a<span class="pl-k">-</span><span class="pl-v">this</span>.m_referenceAngle;<span class="pl-k">if</span>(y.Abs(<span class="pl-v">this</span>.m_upperAngle<span class="pl-k">-</span><span class="pl-v">this</span>.m_lowerAngle)<span class="pl-k">&lt;</span><span class="pl-c1">2</span><span class="pl-k">*</span>F.b2_angularSlop)<span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span>I.e_equalLimits;<span class="pl-k">else</span> <span class="pl-k">if</span>(e<span class="pl-k">&lt;=</span><span class="pl-v">this</span>.m_lowerAngle){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState<span class="pl-k">!=</span>I.e_atLowerLimit)<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span>I.e_atLowerLimit}<span class="pl-k">else</span> <span class="pl-k">if</span>(e<span class="pl-k">&gt;=</span><span class="pl-v">this</span>.m_upperAngle){<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState<span class="pl-k">!=</span>I.e_atUpperLimit)<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L417" class="blob-num js-line-number" data-line-number="417"></td>
        <td id="LC417" class="blob-code blob-code-inner js-file-line">I.e_atUpperLimit}<span class="pl-k">else</span>{<span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span>I.e_inactiveLimit;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span> <span class="pl-v">this</span>.m_limitState<span class="pl-k">=</span>I.e_inactiveLimit;<span class="pl-k">if</span>(d.warmStarting){<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">*=</span>d.dtRatio;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">*=</span>d.dtRatio;<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">*=</span>d.dtRatio;d<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span>;e<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>;h.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">-=</span>j<span class="pl-k">*</span>d;h.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">-=</span>j<span class="pl-k">*</span>e;h.m_angularVelocity<span class="pl-k">-=</span>g<span class="pl-k">*</span>(q<span class="pl-k">*</span>e<span class="pl-k">-</span>n<span class="pl-k">*</span>d<span class="pl-k">+</span><span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">+</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span>);l.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span>o<span class="pl-k">*</span>d;l.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>o<span class="pl-k">*</span>e;l.m_angularVelocity<span class="pl-k">+=</span>b<span class="pl-k">*</span>(a<span class="pl-k">*</span>e<span class="pl-k">-</span>c<span class="pl-k">*</span>d<span class="pl-k">+</span><span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">+</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span>)}<span class="pl-k">else</span>{<span class="pl-v">this</span>.m_impulse.SetZero();</td>
      </tr>
      <tr>
        <td id="L418" class="blob-num js-line-number" data-line-number="418"></td>
        <td id="LC418" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">=</span><span class="pl-c1">0</span>}};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,l<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,j<span class="pl-k">=</span><span class="pl-c1">0</span>,o<span class="pl-k">=</span>j<span class="pl-k">=</span><span class="pl-c1">0</span>,q<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>,a<span class="pl-k">=</span><span class="pl-c1">0</span>,c<span class="pl-k">=</span>h.m_linearVelocity,g<span class="pl-k">=</span>h.m_angularVelocity,b<span class="pl-k">=</span>l.m_linearVelocity,e<span class="pl-k">=</span>l.m_angularVelocity,f<span class="pl-k">=</span>h.m_invMass,m<span class="pl-k">=</span>l.m_invMass,r<span class="pl-k">=</span>h.m_invI,s<span class="pl-k">=</span>l.m_invI;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_enableMotor<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.m_limitState<span class="pl-k">!=</span>I.e_equalLimits){o<span class="pl-k">=</span><span class="pl-v">this</span>.m_motorMass<span class="pl-k">*-</span>(e<span class="pl-k">-</span>g<span class="pl-k">-</span><span class="pl-v">this</span>.m_motorSpeed);q<span class="pl-k">=</span><span class="pl-v">this</span>.m_motorImpulse;n<span class="pl-k">=</span>d.dt<span class="pl-k">*</span><span class="pl-v">this</span>.m_maxMotorTorque;<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">=</span>y.Clamp(<span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">+</span>o,<span class="pl-k">-</span>n,n);o<span class="pl-k">=</span><span class="pl-v">this</span>.m_motorImpulse<span class="pl-k">-</span>q;g<span class="pl-k">-=</span></td>
      </tr>
      <tr>
        <td id="L419" class="blob-num js-line-number" data-line-number="419"></td>
        <td id="LC419" class="blob-code blob-code-inner js-file-line">r<span class="pl-k">*</span>o;e<span class="pl-k">+=</span>s<span class="pl-k">*</span>o}<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_enableLimit<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.m_limitState<span class="pl-k">!=</span>I.e_inactiveLimit){d<span class="pl-k">=</span>h.m_xf.R;o<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">x</span>;q<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">y</span>;j<span class="pl-k">=</span>d.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>o<span class="pl-k">+</span>d.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>q;q<span class="pl-k">=</span>d.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>o<span class="pl-k">+</span>d.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>q;o<span class="pl-k">=</span>j;d<span class="pl-k">=</span>l.m_xf.R;n<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span>l.m_sweep.localCenter.<span class="pl-c1">x</span>;a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span>l.m_sweep.localCenter.<span class="pl-c1">y</span>;j<span class="pl-k">=</span>d.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span>d.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span>d.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span>d.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>j;d<span class="pl-k">=</span>b.<span class="pl-c1">x</span><span class="pl-k">+-</span>e<span class="pl-k">*</span>a<span class="pl-k">-</span>c.<span class="pl-c1">x</span><span class="pl-k">-</span> <span class="pl-k">-</span>g<span class="pl-k">*</span>q;<span class="pl-k">var</span> v<span class="pl-k">=</span>b.<span class="pl-c1">y</span><span class="pl-k">+</span>e<span class="pl-k">*</span>n<span class="pl-k">-</span>c.<span class="pl-c1">y</span><span class="pl-k">-</span>g<span class="pl-k">*</span>o;<span class="pl-v">this</span>.m_mass.Solve33(<span class="pl-v">this</span>.impulse3,<span class="pl-k">-</span>d,<span class="pl-k">-</span>v,<span class="pl-k">-</span>(e<span class="pl-k">-</span>g));<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L420" class="blob-num js-line-number" data-line-number="420"></td>
        <td id="LC420" class="blob-code blob-code-inner js-file-line">I.e_equalLimits)<span class="pl-v">this</span>.m_impulse.Add(<span class="pl-v">this</span>.impulse3);<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState<span class="pl-k">==</span>I.e_atLowerLimit){j<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-v">this</span>.impulse3.<span class="pl-c1">z</span>;<span class="pl-k">if</span>(j<span class="pl-k">&lt;</span><span class="pl-c1">0</span>){<span class="pl-v">this</span>.m_mass.Solve22(<span class="pl-v">this</span>.reduced,<span class="pl-k">-</span>d,<span class="pl-k">-</span>v);<span class="pl-v">this</span>.impulse3.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-v">this</span>.reduced.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.impulse3.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.reduced.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.impulse3.<span class="pl-c1">z</span><span class="pl-k">=-</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.reduced.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.reduced.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState<span class="pl-k">==</span>I.e_atUpperLimit){j<span class="pl-k">=</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span><span class="pl-k">+</span><span class="pl-v">this</span>.impulse3.<span class="pl-c1">z</span>;<span class="pl-k">if</span>(j<span class="pl-k">&gt;</span><span class="pl-c1">0</span>){<span class="pl-v">this</span>.m_mass.Solve22(<span class="pl-v">this</span>.reduced,<span class="pl-k">-</span>d,<span class="pl-k">-</span>v);<span class="pl-v">this</span>.impulse3.<span class="pl-c1">x</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L421" class="blob-num js-line-number" data-line-number="421"></td>
        <td id="LC421" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.reduced.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.impulse3.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.reduced.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.impulse3.<span class="pl-c1">z</span><span class="pl-k">=-</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span>;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.reduced.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.reduced.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-c1">0</span>}}c.<span class="pl-c1">x</span><span class="pl-k">-=</span>f<span class="pl-k">*</span><span class="pl-v">this</span>.impulse3.<span class="pl-c1">x</span>;c.<span class="pl-c1">y</span><span class="pl-k">-=</span>f<span class="pl-k">*</span><span class="pl-v">this</span>.impulse3.<span class="pl-c1">y</span>;g<span class="pl-k">-=</span>r<span class="pl-k">*</span>(o<span class="pl-k">*</span><span class="pl-v">this</span>.impulse3.<span class="pl-c1">y</span><span class="pl-k">-</span>q<span class="pl-k">*</span><span class="pl-v">this</span>.impulse3.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.impulse3.<span class="pl-c1">z</span>);b.<span class="pl-c1">x</span><span class="pl-k">+=</span>m<span class="pl-k">*</span><span class="pl-v">this</span>.impulse3.<span class="pl-c1">x</span>;b.<span class="pl-c1">y</span><span class="pl-k">+=</span>m<span class="pl-k">*</span><span class="pl-v">this</span>.impulse3.<span class="pl-c1">y</span>;e<span class="pl-k">+=</span>s<span class="pl-k">*</span>(n<span class="pl-k">*</span><span class="pl-v">this</span>.impulse3.<span class="pl-c1">y</span><span class="pl-k">-</span>a<span class="pl-k">*</span><span class="pl-v">this</span>.impulse3.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.impulse3.<span class="pl-c1">z</span>)}<span class="pl-k">else</span>{d<span class="pl-k">=</span>h.m_xf.R;o<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">x</span>;q<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span>h.m_sweep.localCenter.<span class="pl-c1">y</span>;j<span class="pl-k">=</span>d.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>o<span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L422" class="blob-num js-line-number" data-line-number="422"></td>
        <td id="LC422" class="blob-code blob-code-inner js-file-line">d.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>q;q<span class="pl-k">=</span>d.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>o<span class="pl-k">+</span>d.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>q;o<span class="pl-k">=</span>j;d<span class="pl-k">=</span>l.m_xf.R;n<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span>l.m_sweep.localCenter.<span class="pl-c1">x</span>;a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span>l.m_sweep.localCenter.<span class="pl-c1">y</span>;j<span class="pl-k">=</span>d.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span>d.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span>d.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span>d.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>j;<span class="pl-v">this</span>.m_mass.Solve22(<span class="pl-v">this</span>.impulse2,<span class="pl-k">-</span>(b.<span class="pl-c1">x</span><span class="pl-k">+-</span>e<span class="pl-k">*</span>a<span class="pl-k">-</span>c.<span class="pl-c1">x</span><span class="pl-k">-</span> <span class="pl-k">-</span>g<span class="pl-k">*</span>q),<span class="pl-k">-</span>(b.<span class="pl-c1">y</span><span class="pl-k">+</span>e<span class="pl-k">*</span>n<span class="pl-k">-</span>c.<span class="pl-c1">y</span><span class="pl-k">-</span>g<span class="pl-k">*</span>o));<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-v">this</span>.impulse2.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-v">this</span>.impulse2.<span class="pl-c1">y</span>;c.<span class="pl-c1">x</span><span class="pl-k">-=</span>f<span class="pl-k">*</span><span class="pl-v">this</span>.impulse2.<span class="pl-c1">x</span>;c.<span class="pl-c1">y</span><span class="pl-k">-=</span>f<span class="pl-k">*</span><span class="pl-v">this</span>.impulse2.<span class="pl-c1">y</span>;g<span class="pl-k">-=</span>r<span class="pl-k">*</span>(o<span class="pl-k">*</span><span class="pl-v">this</span>.impulse2.<span class="pl-c1">y</span><span class="pl-k">-</span>q<span class="pl-k">*</span><span class="pl-v">this</span>.impulse2.<span class="pl-c1">x</span>);b.<span class="pl-c1">x</span><span class="pl-k">+=</span>m<span class="pl-k">*</span><span class="pl-v">this</span>.impulse2.<span class="pl-c1">x</span>;b.<span class="pl-c1">y</span><span class="pl-k">+=</span>m<span class="pl-k">*</span><span class="pl-v">this</span>.impulse2.<span class="pl-c1">y</span>;e<span class="pl-k">+=</span>s<span class="pl-k">*</span>(n<span class="pl-k">*</span><span class="pl-v">this</span>.impulse2.<span class="pl-c1">y</span><span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L423" class="blob-num js-line-number" data-line-number="423"></td>
        <td id="LC423" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">*</span><span class="pl-v">this</span>.impulse2.<span class="pl-c1">x</span>)}h.m_linearVelocity.SetV(c);h.m_angularVelocity<span class="pl-k">=</span>g;l.m_linearVelocity.SetV(b);l.m_angularVelocity<span class="pl-k">=</span>e};<span class="pl-c1">N</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d<span class="pl-k">=</span><span class="pl-c1">0</span>,h,l<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,j<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,o<span class="pl-k">=</span><span class="pl-c1">0</span>,q<span class="pl-k">=</span>h<span class="pl-k">=</span><span class="pl-c1">0</span>,n<span class="pl-k">=</span><span class="pl-c1">0</span>,a<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_enableLimit<span class="pl-k">&amp;&amp;</span><span class="pl-v">this</span>.m_limitState<span class="pl-k">!=</span>I.e_inactiveLimit){d<span class="pl-k">=</span>j.m_sweep.a<span class="pl-k">-</span>l.m_sweep.a<span class="pl-k">-</span><span class="pl-v">this</span>.m_referenceAngle;<span class="pl-k">var</span> c<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState<span class="pl-k">==</span>I.e_equalLimits){d<span class="pl-k">=</span>y.Clamp(d<span class="pl-k">-</span><span class="pl-v">this</span>.m_lowerAngle,<span class="pl-k">-</span>F.b2_maxAngularCorrection,F.b2_maxAngularCorrection);c<span class="pl-k">=-</span><span class="pl-v">this</span>.m_motorMass<span class="pl-k">*</span>d;o<span class="pl-k">=</span>y.Abs(d)}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState<span class="pl-k">==</span></td>
      </tr>
      <tr>
        <td id="L424" class="blob-num js-line-number" data-line-number="424"></td>
        <td id="LC424" class="blob-code blob-code-inner js-file-line">I.e_atLowerLimit){d<span class="pl-k">=</span>d<span class="pl-k">-</span><span class="pl-v">this</span>.m_lowerAngle;o<span class="pl-k">=-</span>d;d<span class="pl-k">=</span>y.Clamp(d<span class="pl-k">+</span>F.b2_angularSlop,<span class="pl-k">-</span>F.b2_maxAngularCorrection,<span class="pl-c1">0</span>);c<span class="pl-k">=-</span><span class="pl-v">this</span>.m_motorMass<span class="pl-k">*</span>d}<span class="pl-k">else</span> <span class="pl-k">if</span>(<span class="pl-v">this</span>.m_limitState<span class="pl-k">==</span>I.e_atUpperLimit){o<span class="pl-k">=</span>d<span class="pl-k">=</span>d<span class="pl-k">-</span><span class="pl-v">this</span>.m_upperAngle;d<span class="pl-k">=</span>y.Clamp(d<span class="pl-k">-</span>F.b2_angularSlop,<span class="pl-c1">0</span>,F.b2_maxAngularCorrection);c<span class="pl-k">=-</span><span class="pl-v">this</span>.m_motorMass<span class="pl-k">*</span>d}l.m_sweep.a<span class="pl-k">-=</span>l.m_invI<span class="pl-k">*</span>c;j.m_sweep.a<span class="pl-k">+=</span>j.m_invI<span class="pl-k">*</span>c;l.SynchronizeTransform();j.SynchronizeTransform()}h<span class="pl-k">=</span>l.m_xf.R;c<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">x</span><span class="pl-k">-</span>l.m_sweep.localCenter.<span class="pl-c1">x</span>;d<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor1.<span class="pl-c1">y</span><span class="pl-k">-</span>l.m_sweep.localCenter.<span class="pl-c1">y</span>;q<span class="pl-k">=</span>h.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>c<span class="pl-k">+</span>h.col2.<span class="pl-c1">x</span><span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L425" class="blob-num js-line-number" data-line-number="425"></td>
        <td id="LC425" class="blob-code blob-code-inner js-file-line">d;d<span class="pl-k">=</span>h.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>c<span class="pl-k">+</span>h.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>d;c<span class="pl-k">=</span>q;h<span class="pl-k">=</span>j.m_xf.R;<span class="pl-k">var</span> g<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">x</span><span class="pl-k">-</span>j.m_sweep.localCenter.<span class="pl-c1">x</span>,b<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchor2.<span class="pl-c1">y</span><span class="pl-k">-</span>j.m_sweep.localCenter.<span class="pl-c1">y</span>;q<span class="pl-k">=</span>h.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>g<span class="pl-k">+</span>h.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>b;b<span class="pl-k">=</span>h.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>g<span class="pl-k">+</span>h.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>b;g<span class="pl-k">=</span>q;n<span class="pl-k">=</span>j.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span>g<span class="pl-k">-</span>l.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">-</span>c;a<span class="pl-k">=</span>j.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>b<span class="pl-k">-</span>l.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">-</span>d;<span class="pl-k">var</span> e<span class="pl-k">=</span>n<span class="pl-k">*</span>n<span class="pl-k">+</span>a<span class="pl-k">*</span>a;h<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(e);q<span class="pl-k">=</span>l.m_invMass;<span class="pl-k">var</span> f<span class="pl-k">=</span>j.m_invMass,m<span class="pl-k">=</span>l.m_invI,r<span class="pl-k">=</span>j.m_invI,s<span class="pl-k">=</span><span class="pl-c1">10</span><span class="pl-k">*</span>F.b2_linearSlop;<span class="pl-k">if</span>(e<span class="pl-k">&gt;</span>s<span class="pl-k">*</span>s){e<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span>(q<span class="pl-k">+</span>f);n<span class="pl-k">=</span>e<span class="pl-k">*-</span>n;a<span class="pl-k">=</span>e<span class="pl-k">*-</span>a;l.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">-=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>q<span class="pl-k">*</span>n;l.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">-=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>q<span class="pl-k">*</span>a;j.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>f<span class="pl-k">*</span>n;j.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+=</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>f<span class="pl-k">*</span>a;n<span class="pl-k">=</span>j.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span></td>
      </tr>
      <tr>
        <td id="L426" class="blob-num js-line-number" data-line-number="426"></td>
        <td id="LC426" class="blob-code blob-code-inner js-file-line">g<span class="pl-k">-</span>l.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">-</span>c;a<span class="pl-k">=</span>j.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>b<span class="pl-k">-</span>l.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">-</span>d}<span class="pl-v">this</span>.K1.col1.<span class="pl-c1">x</span><span class="pl-k">=</span>q<span class="pl-k">+</span>f;<span class="pl-v">this</span>.K1.col2.<span class="pl-c1">x</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.K1.col1.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.K1.col2.<span class="pl-c1">y</span><span class="pl-k">=</span>q<span class="pl-k">+</span>f;<span class="pl-v">this</span>.K2.col1.<span class="pl-c1">x</span><span class="pl-k">=</span>m<span class="pl-k">*</span>d<span class="pl-k">*</span>d;<span class="pl-v">this</span>.K2.col2.<span class="pl-c1">x</span><span class="pl-k">=-</span>m<span class="pl-k">*</span>c<span class="pl-k">*</span>d;<span class="pl-v">this</span>.K2.col1.<span class="pl-c1">y</span><span class="pl-k">=-</span>m<span class="pl-k">*</span>c<span class="pl-k">*</span>d;<span class="pl-v">this</span>.K2.col2.<span class="pl-c1">y</span><span class="pl-k">=</span>m<span class="pl-k">*</span>c<span class="pl-k">*</span>c;<span class="pl-v">this</span>.K3.col1.<span class="pl-c1">x</span><span class="pl-k">=</span>r<span class="pl-k">*</span>b<span class="pl-k">*</span>b;<span class="pl-v">this</span>.K3.col2.<span class="pl-c1">x</span><span class="pl-k">=-</span>r<span class="pl-k">*</span>g<span class="pl-k">*</span>b;<span class="pl-v">this</span>.K3.col1.<span class="pl-c1">y</span><span class="pl-k">=-</span>r<span class="pl-k">*</span>g<span class="pl-k">*</span>b;<span class="pl-v">this</span>.K3.col2.<span class="pl-c1">y</span><span class="pl-k">=</span>r<span class="pl-k">*</span>g<span class="pl-k">*</span>g;<span class="pl-v">this</span>.K.SetM(<span class="pl-v">this</span>.K1);<span class="pl-v">this</span>.K.AddM(<span class="pl-v">this</span>.K2);<span class="pl-v">this</span>.K.AddM(<span class="pl-v">this</span>.K3);<span class="pl-v">this</span>.K.Solve(N.tImpulse,<span class="pl-k">-</span>n,<span class="pl-k">-</span>a);n<span class="pl-k">=</span>N.tImpulse.<span class="pl-c1">x</span>;a<span class="pl-k">=</span>N.tImpulse.<span class="pl-c1">y</span>;l.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">-=</span>l.m_invMass<span class="pl-k">*</span>n;l.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">-=</span>l.m_invMass<span class="pl-k">*</span>a;l.m_sweep.a<span class="pl-k">-=</span>l.m_invI<span class="pl-k">*</span>(c<span class="pl-k">*</span></td>
      </tr>
      <tr>
        <td id="L427" class="blob-num js-line-number" data-line-number="427"></td>
        <td id="LC427" class="blob-code blob-code-inner js-file-line">a<span class="pl-k">-</span>d<span class="pl-k">*</span>n);j.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+=</span>j.m_invMass<span class="pl-k">*</span>n;j.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+=</span>j.m_invMass<span class="pl-k">*</span>a;j.m_sweep.a<span class="pl-k">+=</span>j.m_invI<span class="pl-k">*</span>(g<span class="pl-k">*</span>a<span class="pl-k">-</span>b<span class="pl-k">*</span>n);l.SynchronizeTransform();j.SynchronizeTransform();<span class="pl-k">return</span> h<span class="pl-k">&lt;=</span>F.b2_linearSlop<span class="pl-k">&amp;&amp;</span>o<span class="pl-k">&lt;=</span>F.b2_angularSlop};Box2D.postDefs.<span class="pl-c1">push</span>(<span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>});Box2D.inherit(S,Box2D.Dynamics.Joints.b2JointDef);<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2JointDef.<span class="pl-c1">prototype</span>;<span class="pl-c1">S</span>.<span class="pl-en">b2RevoluteJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.localAnchorA<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L428" class="blob-num js-line-number" data-line-number="428"></td>
        <td id="LC428" class="blob-code blob-code-inner js-file-line"><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.localAnchorB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2RevoluteJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.__super.b2JointDef.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span>I.e_revoluteJoint;<span class="pl-v">this</span>.localAnchorA.Set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.localAnchorB.Set(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);<span class="pl-v">this</span>.motorSpeed<span class="pl-k">=</span><span class="pl-v">this</span>.maxMotorTorque<span class="pl-k">=</span><span class="pl-v">this</span>.upperAngle<span class="pl-k">=</span><span class="pl-v">this</span>.lowerAngle<span class="pl-k">=</span><span class="pl-v">this</span>.referenceAngle<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.enableMotor<span class="pl-k">=</span><span class="pl-v">this</span>.enableLimit<span class="pl-k">=</span><span class="pl-c1">false</span>};<span class="pl-c1">S</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>){<span class="pl-v">this</span>.bodyA<span class="pl-k">=</span>d;<span class="pl-v">this</span>.bodyB<span class="pl-k">=</span>h;<span class="pl-v">this</span>.localAnchorA<span class="pl-k">=</span><span class="pl-v">this</span>.bodyA.GetLocalPoint(l);<span class="pl-v">this</span>.localAnchorB<span class="pl-k">=</span><span class="pl-v">this</span>.bodyB.GetLocalPoint(l);<span class="pl-v">this</span>.referenceAngle<span class="pl-k">=</span><span class="pl-v">this</span>.bodyB.GetAngle()<span class="pl-k">-</span></td>
      </tr>
      <tr>
        <td id="L429" class="blob-num js-line-number" data-line-number="429"></td>
        <td id="LC429" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.bodyA.GetAngle()};Box2D.inherit(aa,Box2D.Dynamics.Joints.b2Joint);<span class="pl-c1">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2Joint.<span class="pl-c1">prototype</span>;<span class="pl-c1">aa</span>.<span class="pl-en">b2WeldJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2Joint.b2Joint.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.m_localAnchorA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_localAnchorB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.m_impulse<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-v">this</span>.m_mass<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>};<span class="pl-c1">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorA</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyA.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchorA)};<span class="pl-c1">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAnchorB</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_bodyB.GetWorldPoint(<span class="pl-v">this</span>.m_localAnchorB)};<span class="pl-c1">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionForce</span><span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L430" class="blob-num js-line-number" data-line-number="430"></td>
        <td id="LC430" class="blob-code blob-code-inner js-file-line"><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-en">w</span>(d<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span>,d<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>)};<span class="pl-c1">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetReactionTorque</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">if</span>(d<span class="pl-k">===</span><span class="pl-c1">undefined</span>)d<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-k">return</span> d<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span>};<span class="pl-c1">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2WeldJoint</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-v">this</span>.__super.b2Joint.<span class="pl-c1">call</span>(<span class="pl-v">this</span>,d);<span class="pl-v">this</span>.m_localAnchorA.SetV(d.localAnchorA);<span class="pl-v">this</span>.m_localAnchorB.SetV(d.localAnchorB);<span class="pl-v">this</span>.m_referenceAngle<span class="pl-k">=</span>d.referenceAngle;<span class="pl-v">this</span>.m_impulse.SetZero();<span class="pl-v">this</span>.m_mass<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">K</span>};<span class="pl-c1">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">InitVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>){<span class="pl-k">var</span> h,l<span class="pl-k">=</span><span class="pl-c1">0</span>,j<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,o<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB;</td>
      </tr>
      <tr>
        <td id="L431" class="blob-num js-line-number" data-line-number="431"></td>
        <td id="LC431" class="blob-code blob-code-inner js-file-line">h<span class="pl-k">=</span>j.m_xf.R;<span class="pl-k">var</span> q<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorA.<span class="pl-c1">x</span><span class="pl-k">-</span>j.m_sweep.localCenter.<span class="pl-c1">x</span>,n<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorA.<span class="pl-c1">y</span><span class="pl-k">-</span>j.m_sweep.localCenter.<span class="pl-c1">y</span>;l<span class="pl-k">=</span>h.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>q<span class="pl-k">+</span>h.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>n;n<span class="pl-k">=</span>h.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>q<span class="pl-k">+</span>h.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>n;q<span class="pl-k">=</span>l;h<span class="pl-k">=</span>o.m_xf.R;<span class="pl-k">var</span> a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorB.<span class="pl-c1">x</span><span class="pl-k">-</span>o.m_sweep.localCenter.<span class="pl-c1">x</span>,c<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorB.<span class="pl-c1">y</span><span class="pl-k">-</span>o.m_sweep.localCenter.<span class="pl-c1">y</span>;l<span class="pl-k">=</span>h.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>a<span class="pl-k">+</span>h.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>c;c<span class="pl-k">=</span>h.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>a<span class="pl-k">+</span>h.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>c;a<span class="pl-k">=</span>l;h<span class="pl-k">=</span>j.m_invMass;l<span class="pl-k">=</span>o.m_invMass;<span class="pl-k">var</span> g<span class="pl-k">=</span>j.m_invI,b<span class="pl-k">=</span>o.m_invI;<span class="pl-v">this</span>.m_mass.col1.<span class="pl-c1">x</span><span class="pl-k">=</span>h<span class="pl-k">+</span>l<span class="pl-k">+</span>n<span class="pl-k">*</span>n<span class="pl-k">*</span>g<span class="pl-k">+</span>c<span class="pl-k">*</span>c<span class="pl-k">*</span>b;<span class="pl-v">this</span>.m_mass.col2.<span class="pl-c1">x</span><span class="pl-k">=-</span>n<span class="pl-k">*</span>q<span class="pl-k">*</span>g<span class="pl-k">-</span>c<span class="pl-k">*</span>a<span class="pl-k">*</span>b;<span class="pl-v">this</span>.m_mass.col3.<span class="pl-c1">x</span><span class="pl-k">=-</span>n<span class="pl-k">*</span>g<span class="pl-k">-</span>c<span class="pl-k">*</span>b;<span class="pl-v">this</span>.m_mass.col1.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_mass.col2.<span class="pl-c1">x</span>;</td>
      </tr>
      <tr>
        <td id="L432" class="blob-num js-line-number" data-line-number="432"></td>
        <td id="LC432" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>.m_mass.col2.<span class="pl-c1">y</span><span class="pl-k">=</span>h<span class="pl-k">+</span>l<span class="pl-k">+</span>q<span class="pl-k">*</span>q<span class="pl-k">*</span>g<span class="pl-k">+</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>b;<span class="pl-v">this</span>.m_mass.col3.<span class="pl-c1">y</span><span class="pl-k">=</span>q<span class="pl-k">*</span>g<span class="pl-k">+</span>a<span class="pl-k">*</span>b;<span class="pl-v">this</span>.m_mass.col1.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_mass.col3.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_mass.col2.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_mass.col3.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_mass.col3.<span class="pl-c1">z</span><span class="pl-k">=</span>g<span class="pl-k">+</span>b;<span class="pl-k">if</span>(d.warmStarting){<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">*=</span>d.dtRatio;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">*=</span>d.dtRatio;<span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span><span class="pl-k">*=</span>d.dtRatio;j.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">-=</span>h<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span>;j.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">-=</span>h<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>;j.m_angularVelocity<span class="pl-k">-=</span>g<span class="pl-k">*</span>(q<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">-</span>n<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span>);o.m_linearVelocity.<span class="pl-c1">x</span><span class="pl-k">+=</span>l<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span>;o.m_linearVelocity.<span class="pl-c1">y</span><span class="pl-k">+=</span>l<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span>;</td>
      </tr>
      <tr>
        <td id="L433" class="blob-num js-line-number" data-line-number="433"></td>
        <td id="LC433" class="blob-code blob-code-inner js-file-line">o.m_angularVelocity<span class="pl-k">+=</span>b<span class="pl-k">*</span>(a<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">y</span><span class="pl-k">-</span>c<span class="pl-k">*</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_impulse.<span class="pl-c1">z</span>)}<span class="pl-k">else</span> <span class="pl-v">this</span>.m_impulse.SetZero()};<span class="pl-c1">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolveVelocityConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d,h<span class="pl-k">=</span><span class="pl-c1">0</span>,l<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,j<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB,o<span class="pl-k">=</span>l.m_linearVelocity,q<span class="pl-k">=</span>l.m_angularVelocity,n<span class="pl-k">=</span>j.m_linearVelocity,a<span class="pl-k">=</span>j.m_angularVelocity,c<span class="pl-k">=</span>l.m_invMass,g<span class="pl-k">=</span>j.m_invMass,b<span class="pl-k">=</span>l.m_invI,e<span class="pl-k">=</span>j.m_invI;d<span class="pl-k">=</span>l.m_xf.R;<span class="pl-k">var</span> f<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorA.<span class="pl-c1">x</span><span class="pl-k">-</span>l.m_sweep.localCenter.<span class="pl-c1">x</span>,m<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorA.<span class="pl-c1">y</span><span class="pl-k">-</span>l.m_sweep.localCenter.<span class="pl-c1">y</span>;h<span class="pl-k">=</span>d.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>f<span class="pl-k">+</span>d.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>m;m<span class="pl-k">=</span>d.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>f<span class="pl-k">+</span>d.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>m;f<span class="pl-k">=</span>h;d<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L434" class="blob-num js-line-number" data-line-number="434"></td>
        <td id="LC434" class="blob-code blob-code-inner js-file-line">j.m_xf.R;<span class="pl-k">var</span> r<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorB.<span class="pl-c1">x</span><span class="pl-k">-</span>j.m_sweep.localCenter.<span class="pl-c1">x</span>,s<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorB.<span class="pl-c1">y</span><span class="pl-k">-</span>j.m_sweep.localCenter.<span class="pl-c1">y</span>;h<span class="pl-k">=</span>d.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>r<span class="pl-k">+</span>d.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>s;s<span class="pl-k">=</span>d.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>r<span class="pl-k">+</span>d.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>s;r<span class="pl-k">=</span>h;d<span class="pl-k">=</span>n.<span class="pl-c1">x</span><span class="pl-k">-</span>a<span class="pl-k">*</span>s<span class="pl-k">-</span>o.<span class="pl-c1">x</span><span class="pl-k">+</span>q<span class="pl-k">*</span>m;h<span class="pl-k">=</span>n.<span class="pl-c1">y</span><span class="pl-k">+</span>a<span class="pl-k">*</span>r<span class="pl-k">-</span>o.<span class="pl-c1">y</span><span class="pl-k">-</span>q<span class="pl-k">*</span>f;<span class="pl-k">var</span> v<span class="pl-k">=</span>a<span class="pl-k">-</span>q,t<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-v">this</span>.m_mass.Solve33(t,<span class="pl-k">-</span>d,<span class="pl-k">-</span>h,<span class="pl-k">-</span>v);<span class="pl-v">this</span>.m_impulse.Add(t);o.<span class="pl-c1">x</span><span class="pl-k">-=</span>c<span class="pl-k">*</span>t.<span class="pl-c1">x</span>;o.<span class="pl-c1">y</span><span class="pl-k">-=</span>c<span class="pl-k">*</span>t.<span class="pl-c1">y</span>;q<span class="pl-k">-=</span>b<span class="pl-k">*</span>(f<span class="pl-k">*</span>t.<span class="pl-c1">y</span><span class="pl-k">-</span>m<span class="pl-k">*</span>t.<span class="pl-c1">x</span><span class="pl-k">+</span>t.<span class="pl-c1">z</span>);n.<span class="pl-c1">x</span><span class="pl-k">+=</span>g<span class="pl-k">*</span>t.<span class="pl-c1">x</span>;n.<span class="pl-c1">y</span><span class="pl-k">+=</span>g<span class="pl-k">*</span>t.<span class="pl-c1">y</span>;a<span class="pl-k">+=</span>e<span class="pl-k">*</span>(r<span class="pl-k">*</span>t.<span class="pl-c1">y</span><span class="pl-k">-</span>s<span class="pl-k">*</span>t.<span class="pl-c1">x</span><span class="pl-k">+</span>t.<span class="pl-c1">z</span>);l.m_angularVelocity<span class="pl-k">=</span>q;j.m_angularVelocity<span class="pl-k">=</span>a};<span class="pl-c1">aa</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SolvePositionConstraints</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">var</span> d,h<span class="pl-k">=</span><span class="pl-c1">0</span>,l<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyA,j<span class="pl-k">=</span><span class="pl-v">this</span>.m_bodyB;d<span class="pl-k">=</span>l.m_xf.R;</td>
      </tr>
      <tr>
        <td id="L435" class="blob-num js-line-number" data-line-number="435"></td>
        <td id="LC435" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> o<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorA.<span class="pl-c1">x</span><span class="pl-k">-</span>l.m_sweep.localCenter.<span class="pl-c1">x</span>,q<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorA.<span class="pl-c1">y</span><span class="pl-k">-</span>l.m_sweep.localCenter.<span class="pl-c1">y</span>;h<span class="pl-k">=</span>d.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>o<span class="pl-k">+</span>d.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>q;q<span class="pl-k">=</span>d.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>o<span class="pl-k">+</span>d.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>q;o<span class="pl-k">=</span>h;d<span class="pl-k">=</span>j.m_xf.R;<span class="pl-k">var</span> n<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorB.<span class="pl-c1">x</span><span class="pl-k">-</span>j.m_sweep.localCenter.<span class="pl-c1">x</span>,a<span class="pl-k">=</span><span class="pl-v">this</span>.m_localAnchorB.<span class="pl-c1">y</span><span class="pl-k">-</span>j.m_sweep.localCenter.<span class="pl-c1">y</span>;h<span class="pl-k">=</span>d.col1.<span class="pl-c1">x</span><span class="pl-k">*</span>n<span class="pl-k">+</span>d.col2.<span class="pl-c1">x</span><span class="pl-k">*</span>a;a<span class="pl-k">=</span>d.col1.<span class="pl-c1">y</span><span class="pl-k">*</span>n<span class="pl-k">+</span>d.col2.<span class="pl-c1">y</span><span class="pl-k">*</span>a;n<span class="pl-k">=</span>h;d<span class="pl-k">=</span>l.m_invMass;h<span class="pl-k">=</span>j.m_invMass;<span class="pl-k">var</span> c<span class="pl-k">=</span>l.m_invI,g<span class="pl-k">=</span>j.m_invI,b<span class="pl-k">=</span>j.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+</span>n<span class="pl-k">-</span>l.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">-</span>o,e<span class="pl-k">=</span>j.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+</span>a<span class="pl-k">-</span>l.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">-</span>q,f<span class="pl-k">=</span>j.m_sweep.a<span class="pl-k">-</span>l.m_sweep.a<span class="pl-k">-</span><span class="pl-v">this</span>.m_referenceAngle,m<span class="pl-k">=</span><span class="pl-c1">10</span><span class="pl-k">*</span>F.b2_linearSlop,</td>
      </tr>
      <tr>
        <td id="L436" class="blob-num js-line-number" data-line-number="436"></td>
        <td id="LC436" class="blob-code blob-code-inner js-file-line">r<span class="pl-k">=</span><span class="pl-c1">Math</span>.<span class="pl-c1">sqrt</span>(b<span class="pl-k">*</span>b<span class="pl-k">+</span>e<span class="pl-k">*</span>e),s<span class="pl-k">=</span>y.Abs(f);<span class="pl-k">if</span>(r<span class="pl-k">&gt;</span>m){c<span class="pl-k">*=</span><span class="pl-c1">1</span>;g<span class="pl-k">*=</span><span class="pl-c1">1</span>}<span class="pl-v">this</span>.m_mass.col1.<span class="pl-c1">x</span><span class="pl-k">=</span>d<span class="pl-k">+</span>h<span class="pl-k">+</span>q<span class="pl-k">*</span>q<span class="pl-k">*</span>c<span class="pl-k">+</span>a<span class="pl-k">*</span>a<span class="pl-k">*</span>g;<span class="pl-v">this</span>.m_mass.col2.<span class="pl-c1">x</span><span class="pl-k">=-</span>q<span class="pl-k">*</span>o<span class="pl-k">*</span>c<span class="pl-k">-</span>a<span class="pl-k">*</span>n<span class="pl-k">*</span>g;<span class="pl-v">this</span>.m_mass.col3.<span class="pl-c1">x</span><span class="pl-k">=-</span>q<span class="pl-k">*</span>c<span class="pl-k">-</span>a<span class="pl-k">*</span>g;<span class="pl-v">this</span>.m_mass.col1.<span class="pl-c1">y</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_mass.col2.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_mass.col2.<span class="pl-c1">y</span><span class="pl-k">=</span>d<span class="pl-k">+</span>h<span class="pl-k">+</span>o<span class="pl-k">*</span>o<span class="pl-k">*</span>c<span class="pl-k">+</span>n<span class="pl-k">*</span>n<span class="pl-k">*</span>g;<span class="pl-v">this</span>.m_mass.col3.<span class="pl-c1">y</span><span class="pl-k">=</span>o<span class="pl-k">*</span>c<span class="pl-k">+</span>n<span class="pl-k">*</span>g;<span class="pl-v">this</span>.m_mass.col1.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_mass.col3.<span class="pl-c1">x</span>;<span class="pl-v">this</span>.m_mass.col2.<span class="pl-c1">z</span><span class="pl-k">=</span><span class="pl-v">this</span>.m_mass.col3.<span class="pl-c1">y</span>;<span class="pl-v">this</span>.m_mass.col3.<span class="pl-c1">z</span><span class="pl-k">=</span>c<span class="pl-k">+</span>g;m<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">A</span>;<span class="pl-v">this</span>.m_mass.Solve33(m,<span class="pl-k">-</span>b,<span class="pl-k">-</span>e,<span class="pl-k">-</span>f);l.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">-=</span>d<span class="pl-k">*</span>m.<span class="pl-c1">x</span>;l.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">-=</span>d<span class="pl-k">*</span>m.<span class="pl-c1">y</span>;l.m_sweep.a<span class="pl-k">-=</span>c<span class="pl-k">*</span>(o<span class="pl-k">*</span>m.<span class="pl-c1">y</span><span class="pl-k">-</span>q<span class="pl-k">*</span>m.<span class="pl-c1">x</span><span class="pl-k">+</span>m.<span class="pl-c1">z</span>);j.m_sweep.c.<span class="pl-c1">x</span><span class="pl-k">+=</span>h<span class="pl-k">*</span>m.<span class="pl-c1">x</span>;j.m_sweep.c.<span class="pl-c1">y</span><span class="pl-k">+=</span>h<span class="pl-k">*</span>m.<span class="pl-c1">y</span>;</td>
      </tr>
      <tr>
        <td id="L437" class="blob-num js-line-number" data-line-number="437"></td>
        <td id="LC437" class="blob-code blob-code-inner js-file-line">j.m_sweep.a<span class="pl-k">+=</span>g<span class="pl-k">*</span>(n<span class="pl-k">*</span>m.<span class="pl-c1">y</span><span class="pl-k">-</span>a<span class="pl-k">*</span>m.<span class="pl-c1">x</span><span class="pl-k">+</span>m.<span class="pl-c1">z</span>);l.SynchronizeTransform();j.SynchronizeTransform();<span class="pl-k">return</span> r<span class="pl-k">&lt;=</span>F.b2_linearSlop<span class="pl-k">&amp;&amp;</span>s<span class="pl-k">&lt;=</span>F.b2_angularSlop};Box2D.inherit(Z,Box2D.Dynamics.Joints.b2JointDef);<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">__super</span><span class="pl-k">=</span>Box2D.Dynamics.Joints.b2JointDef.<span class="pl-c1">prototype</span>;<span class="pl-c1">Z</span>.<span class="pl-en">b2WeldJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){Box2D.Dynamics.Joints.b2JointDef.b2JointDef.<span class="pl-c1">apply</span>(<span class="pl-v">this</span>,arguments);<span class="pl-v">this</span>.localAnchorA<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>;<span class="pl-v">this</span>.localAnchorB<span class="pl-k">=</span><span class="pl-k">new</span> <span class="pl-en">w</span>};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2WeldJointDef</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.__super.b2JointDef.<span class="pl-c1">call</span>(<span class="pl-v">this</span>);<span class="pl-v">this</span>.<span class="pl-c1">type</span><span class="pl-k">=</span>I.e_weldJoint;<span class="pl-v">this</span>.referenceAngle<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L438" class="blob-num js-line-number" data-line-number="438"></td>
        <td id="LC438" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">0</span>};<span class="pl-c1">Z</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">Initialize</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">d</span>,<span class="pl-smi">h</span>,<span class="pl-smi">l</span>){<span class="pl-v">this</span>.bodyA<span class="pl-k">=</span>d;<span class="pl-v">this</span>.bodyB<span class="pl-k">=</span>h;<span class="pl-v">this</span>.localAnchorA.SetV(<span class="pl-v">this</span>.bodyA.GetLocalPoint(l));<span class="pl-v">this</span>.localAnchorB.SetV(<span class="pl-v">this</span>.bodyB.GetLocalPoint(l));<span class="pl-v">this</span>.referenceAngle<span class="pl-k">=</span><span class="pl-v">this</span>.bodyB.GetAngle()<span class="pl-k">-</span><span class="pl-v">this</span>.bodyA.GetAngle()}})();</td>
      </tr>
      <tr>
        <td id="L439" class="blob-num js-line-number" data-line-number="439"></td>
        <td id="LC439" class="blob-code blob-code-inner js-file-line">(<span class="pl-k">function</span>(){<span class="pl-k">var</span> F<span class="pl-k">=</span>Box2D.Dynamics.b2DebugDraw;<span class="pl-c1">F</span>.<span class="pl-en">b2DebugDraw</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_xformScale<span class="pl-k">=</span><span class="pl-v">this</span>.m_fillAlpha<span class="pl-k">=</span><span class="pl-v">this</span>.m_alpha<span class="pl-k">=</span><span class="pl-v">this</span>.m_lineThickness<span class="pl-k">=</span><span class="pl-v">this</span>.m_drawScale<span class="pl-k">=</span><span class="pl-c1">1</span>;<span class="pl-k">var</span> G<span class="pl-k">=</span><span class="pl-v">this</span>;<span class="pl-v">this</span>.m_sprite<span class="pl-k">=</span>{graphics<span class="pl-k">:</span>{<span class="pl-en">clear</span><span class="pl-k">:</span><span class="pl-k">function</span>(){G.m_ctx.clearRect(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,G.m_ctx.canvas.<span class="pl-c1">width</span>,G.m_ctx.canvas.<span class="pl-c1">height</span>)}}}};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">_color</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">G</span>,<span class="pl-smi">K</span>){<span class="pl-k">return</span><span class="pl-s"><span class="pl-pds">&quot;</span>rgba(<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>((G<span class="pl-k">&amp;</span><span class="pl-c1">16711680</span>)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">16</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>((G<span class="pl-k">&amp;</span><span class="pl-c1">65280</span>)<span class="pl-k">&gt;&gt;</span><span class="pl-c1">8</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>(G<span class="pl-k">&amp;</span><span class="pl-c1">255</span>)<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>,<span class="pl-pds">&quot;</span></span><span class="pl-k">+</span>K<span class="pl-k">+</span><span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">b2DebugDraw</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-v">this</span>.m_drawFlags<span class="pl-k">=</span><span class="pl-c1">0</span>};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetFlags</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">G</span>){<span class="pl-k">if</span>(G<span class="pl-k">===</span><span class="pl-c1">undefined</span>)G<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_drawFlags<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L440" class="blob-num js-line-number" data-line-number="440"></td>
        <td id="LC440" class="blob-code blob-code-inner js-file-line">G};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFlags</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_drawFlags};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">AppendFlags</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">G</span>){<span class="pl-k">if</span>(G<span class="pl-k">===</span><span class="pl-c1">undefined</span>)G<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_drawFlags|<span class="pl-k">=</span>G};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">ClearFlags</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">G</span>){<span class="pl-k">if</span>(G<span class="pl-k">===</span><span class="pl-c1">undefined</span>)G<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_drawFlags<span class="pl-k">&amp;=~</span>G};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetSprite</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">G</span>){<span class="pl-v">this</span>.m_ctx<span class="pl-k">=</span>G};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetSprite</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_ctx};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetDrawScale</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">G</span>){<span class="pl-k">if</span>(G<span class="pl-k">===</span><span class="pl-c1">undefined</span>)G<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_drawScale<span class="pl-k">=</span>G};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetDrawScale</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_drawScale};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetLineThickness</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">G</span>){<span class="pl-k">if</span>(G<span class="pl-k">===</span></td>
      </tr>
      <tr>
        <td id="L441" class="blob-num js-line-number" data-line-number="441"></td>
        <td id="LC441" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">undefined</span>)G<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_lineThickness<span class="pl-k">=</span>G;<span class="pl-v">this</span>.m_ctx.strokeWidth<span class="pl-k">=</span>G};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetLineThickness</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_lineThickness};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">G</span>){<span class="pl-k">if</span>(G<span class="pl-k">===</span><span class="pl-c1">undefined</span>)G<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_alpha<span class="pl-k">=</span>G};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_alpha};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetFillAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">G</span>){<span class="pl-k">if</span>(G<span class="pl-k">===</span><span class="pl-c1">undefined</span>)G<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_fillAlpha<span class="pl-k">=</span>G};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetFillAlpha</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_fillAlpha};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">SetXFormScale</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">G</span>){<span class="pl-k">if</span>(G<span class="pl-k">===</span><span class="pl-c1">undefined</span>)G<span class="pl-k">=</span><span class="pl-c1">0</span>;<span class="pl-v">this</span>.m_xformScale<span class="pl-k">=</span>G};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">GetXFormScale</span><span class="pl-k">=</span><span class="pl-k">function</span>(){<span class="pl-k">return</span> <span class="pl-v">this</span>.m_xformScale};</td>
      </tr>
      <tr>
        <td id="L442" class="blob-num js-line-number" data-line-number="442"></td>
        <td id="LC442" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawPolygon</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">G</span>,<span class="pl-smi">K</span>,<span class="pl-smi">y</span>){<span class="pl-k">if</span>(K){<span class="pl-k">var</span> w<span class="pl-k">=</span><span class="pl-v">this</span>.m_ctx,A<span class="pl-k">=</span><span class="pl-v">this</span>.m_drawScale;w.beginPath();w.strokeStyle<span class="pl-k">=</span><span class="pl-v">this</span>._color(y.<span class="pl-c1">color</span>,<span class="pl-v">this</span>.m_alpha);w.<span class="pl-c1">moveTo</span>(G[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">*</span>A,G[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">*</span>A);<span class="pl-k">for</span>(y<span class="pl-k">=</span><span class="pl-c1">1</span>;y<span class="pl-k">&lt;</span>K;y<span class="pl-k">++</span>)w.lineTo(G[y].<span class="pl-c1">x</span><span class="pl-k">*</span>A,G[y].<span class="pl-c1">y</span><span class="pl-k">*</span>A);w.lineTo(G[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">*</span>A,G[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">*</span>A);w.closePath();w.stroke()}};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawSolidPolygon</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">G</span>,<span class="pl-smi">K</span>,<span class="pl-smi">y</span>){<span class="pl-k">if</span>(K){<span class="pl-k">var</span> w<span class="pl-k">=</span><span class="pl-v">this</span>.m_ctx,A<span class="pl-k">=</span><span class="pl-v">this</span>.m_drawScale;w.beginPath();w.strokeStyle<span class="pl-k">=</span><span class="pl-v">this</span>._color(y.<span class="pl-c1">color</span>,<span class="pl-v">this</span>.m_alpha);w.fillStyle<span class="pl-k">=</span><span class="pl-v">this</span>._color(y.<span class="pl-c1">color</span>,<span class="pl-v">this</span>.m_fillAlpha);w.<span class="pl-c1">moveTo</span>(G[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">*</span>A,G[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">*</span>A);<span class="pl-k">for</span>(y<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L443" class="blob-num js-line-number" data-line-number="443"></td>
        <td id="LC443" class="blob-code blob-code-inner js-file-line"><span class="pl-c1">1</span>;y<span class="pl-k">&lt;</span>K;y<span class="pl-k">++</span>)w.lineTo(G[y].<span class="pl-c1">x</span><span class="pl-k">*</span>A,G[y].<span class="pl-c1">y</span><span class="pl-k">*</span>A);w.lineTo(G[<span class="pl-c1">0</span>].<span class="pl-c1">x</span><span class="pl-k">*</span>A,G[<span class="pl-c1">0</span>].<span class="pl-c1">y</span><span class="pl-k">*</span>A);w.closePath();w.fill();w.stroke()}};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawCircle</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">G</span>,<span class="pl-smi">K</span>,<span class="pl-smi">y</span>){<span class="pl-k">if</span>(K){<span class="pl-k">var</span> w<span class="pl-k">=</span><span class="pl-v">this</span>.m_ctx,A<span class="pl-k">=</span><span class="pl-v">this</span>.m_drawScale;w.beginPath();w.strokeStyle<span class="pl-k">=</span><span class="pl-v">this</span>._color(y.<span class="pl-c1">color</span>,<span class="pl-v">this</span>.m_alpha);w.arc(G.<span class="pl-c1">x</span><span class="pl-k">*</span>A,G.<span class="pl-c1">y</span><span class="pl-k">*</span>A,K<span class="pl-k">*</span>A,<span class="pl-c1">0</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">2</span>,<span class="pl-c1">true</span>);w.closePath();w.stroke()}};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawSolidCircle</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">G</span>,<span class="pl-smi">K</span>,<span class="pl-smi">y</span>,<span class="pl-smi">w</span>){<span class="pl-k">if</span>(K){<span class="pl-k">var</span> A<span class="pl-k">=</span><span class="pl-v">this</span>.m_ctx,U<span class="pl-k">=</span><span class="pl-v">this</span>.m_drawScale,p<span class="pl-k">=</span>G.<span class="pl-c1">x</span><span class="pl-k">*</span>U,B<span class="pl-k">=</span>G.<span class="pl-c1">y</span><span class="pl-k">*</span>U;A.<span class="pl-c1">moveTo</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);A.beginPath();A.strokeStyle<span class="pl-k">=</span><span class="pl-v">this</span>._color(w.<span class="pl-c1">color</span>,<span class="pl-v">this</span>.m_alpha);A.fillStyle<span class="pl-k">=</span></td>
      </tr>
      <tr>
        <td id="L444" class="blob-num js-line-number" data-line-number="444"></td>
        <td id="LC444" class="blob-code blob-code-inner js-file-line"><span class="pl-v">this</span>._color(w.<span class="pl-c1">color</span>,<span class="pl-v">this</span>.m_fillAlpha);A.arc(p,B,K<span class="pl-k">*</span>U,<span class="pl-c1">0</span>,<span class="pl-c1">Math</span>.<span class="pl-c1">PI</span><span class="pl-k">*</span><span class="pl-c1">2</span>,<span class="pl-c1">true</span>);A.<span class="pl-c1">moveTo</span>(p,B);A.lineTo((G.<span class="pl-c1">x</span><span class="pl-k">+</span>y.<span class="pl-c1">x</span><span class="pl-k">*</span>K)<span class="pl-k">*</span>U,(G.<span class="pl-c1">y</span><span class="pl-k">+</span>y.<span class="pl-c1">y</span><span class="pl-k">*</span>K)<span class="pl-k">*</span>U);A.closePath();A.fill();A.stroke()}};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawSegment</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">G</span>,<span class="pl-smi">K</span>,<span class="pl-smi">y</span>){<span class="pl-k">var</span> w<span class="pl-k">=</span><span class="pl-v">this</span>.m_ctx,A<span class="pl-k">=</span><span class="pl-v">this</span>.m_drawScale;w.strokeStyle<span class="pl-k">=</span><span class="pl-v">this</span>._color(y.<span class="pl-c1">color</span>,<span class="pl-v">this</span>.m_alpha);w.beginPath();w.<span class="pl-c1">moveTo</span>(G.<span class="pl-c1">x</span><span class="pl-k">*</span>A,G.<span class="pl-c1">y</span><span class="pl-k">*</span>A);w.lineTo(K.<span class="pl-c1">x</span><span class="pl-k">*</span>A,K.<span class="pl-c1">y</span><span class="pl-k">*</span>A);w.closePath();w.stroke()};<span class="pl-c1">F</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">DrawTransform</span><span class="pl-k">=</span><span class="pl-k">function</span>(<span class="pl-smi">G</span>){<span class="pl-k">var</span> K<span class="pl-k">=</span><span class="pl-v">this</span>.m_ctx,y<span class="pl-k">=</span><span class="pl-v">this</span>.m_drawScale;K.beginPath();K.strokeStyle<span class="pl-k">=</span><span class="pl-v">this</span>._color(<span class="pl-c1">16711680</span>,<span class="pl-v">this</span>.m_alpha);</td>
      </tr>
      <tr>
        <td id="L445" class="blob-num js-line-number" data-line-number="445"></td>
        <td id="LC445" class="blob-code blob-code-inner js-file-line">K.<span class="pl-c1">moveTo</span>(G.position.<span class="pl-c1">x</span><span class="pl-k">*</span>y,G.position.<span class="pl-c1">y</span><span class="pl-k">*</span>y);K.lineTo((G.position.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_xformScale<span class="pl-k">*</span>G.R.col1.<span class="pl-c1">x</span>)<span class="pl-k">*</span>y,(G.position.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_xformScale<span class="pl-k">*</span>G.R.col1.<span class="pl-c1">y</span>)<span class="pl-k">*</span>y);K.strokeStyle<span class="pl-k">=</span><span class="pl-v">this</span>._color(<span class="pl-c1">65280</span>,<span class="pl-v">this</span>.m_alpha);K.<span class="pl-c1">moveTo</span>(G.position.<span class="pl-c1">x</span><span class="pl-k">*</span>y,G.position.<span class="pl-c1">y</span><span class="pl-k">*</span>y);K.lineTo((G.position.<span class="pl-c1">x</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_xformScale<span class="pl-k">*</span>G.R.col2.<span class="pl-c1">x</span>)<span class="pl-k">*</span>y,(G.position.<span class="pl-c1">y</span><span class="pl-k">+</span><span class="pl-v">this</span>.m_xformScale<span class="pl-k">*</span>G.R.col2.<span class="pl-c1">y</span>)<span class="pl-k">*</span>y);K.closePath();K.stroke()}})();<span class="pl-k">var</span> i;<span class="pl-k">for</span>(i<span class="pl-k">=</span><span class="pl-c1">0</span>;i<span class="pl-k">&lt;</span>Box2D.postDefs.<span class="pl-c1">length</span>;<span class="pl-k">++</span>i)Box2D.postDefs[i]();<span class="pl-k">delete</span> Box2D.postDefs;</td>
      </tr>
</table>

  </div>

</div>

<a href="#jump-to-line" rel="facebox[.linejump]" data-hotkey="l" style="display:none">Jump to Line</a>
<div id="jump-to-line" style="display:none">
  <!-- </textarea> --><!-- '"` --><form accept-charset="UTF-8" action="" class="js-jump-to-line-form" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
    <input class="linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" aria-label="Jump to line" autofocus>
    <button type="submit" class="btn">Go</button>
</form></div>

        </div>
      </div>
      <div class="modal-backdrop"></div>
    </div>
  </div>


    </div>

      <div class="container">
  <div class="site-footer" role="contentinfo">
    <ul class="site-footer-links right">
        <li><a href="https://status.github.com/" data-ga-click="Footer, go to status, text:status">Status</a></li>
      <li><a href="https://developer.github.com" data-ga-click="Footer, go to api, text:api">API</a></li>
      <li><a href="https://training.github.com" data-ga-click="Footer, go to training, text:training">Training</a></li>
      <li><a href="https://shop.github.com" data-ga-click="Footer, go to shop, text:shop">Shop</a></li>
        <li><a href="https://github.com/blog" data-ga-click="Footer, go to blog, text:blog">Blog</a></li>
        <li><a href="https://github.com/about" data-ga-click="Footer, go to about, text:about">About</a></li>
        <li><a href="https://github.com/pricing" data-ga-click="Footer, go to pricing, text:pricing">Pricing</a></li>

    </ul>

    <a href="https://github.com" aria-label="Homepage">
      <span class="mega-octicon octicon-mark-github" title="GitHub"></span>
</a>
    <ul class="site-footer-links">
      <li>&copy; 2015 <span title="0.09785s from github-fe142-cp1-prd.iad.github.net">GitHub</span>, Inc.</li>
        <li><a href="https://github.com/site/terms" data-ga-click="Footer, go to terms, text:terms">Terms</a></li>
        <li><a href="https://github.com/site/privacy" data-ga-click="Footer, go to privacy, text:privacy">Privacy</a></li>
        <li><a href="https://github.com/security" data-ga-click="Footer, go to security, text:security">Security</a></li>
        <li><a href="https://github.com/contact" data-ga-click="Footer, go to contact, text:contact">Contact</a></li>
        <li><a href="https://help.github.com" data-ga-click="Footer, go to help, text:help">Help</a></li>
    </ul>
  </div>
</div>



    
    
    

    <div id="ajax-error-message" class="flash flash-error">
      <span class="octicon octicon-alert"></span>
      <button type="button" class="flash-close js-flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
        <span class="octicon octicon-x"></span>
      </button>
      Something went wrong with that request. Please try again.
    </div>


      <script crossorigin="anonymous" integrity="sha256-+Ec97OckLaaiDVIxNjSIGzl1xSzrqh5sOBV8DyYYVpE=" src="https://assets-cdn.github.com/assets/frameworks-f8473dece7242da6a20d52313634881b3975c52cebaa1e6c38157c0f26185691.js"></script>
      <script async="async" crossorigin="anonymous" integrity="sha256-sMK/23WgyzYQHnhP66woMP5Jsimyc7jJ7V7DR2hCHoo=" src="https://assets-cdn.github.com/assets/github-b0c2bfdb75a0cb36101e784febac2830fe49b229b273b8c9ed5ec34768421e8a.js"></script>
      
      
    <div class="js-stale-session-flash stale-session-flash flash flash-warn flash-banner hidden">
      <span class="octicon octicon-alert"></span>
      <span class="signed-in-tab-flash">You signed in with another tab or window. <a href="">Reload</a> to refresh your session.</span>
      <span class="signed-out-tab-flash">You signed out in another tab or window. <a href="">Reload</a> to refresh your session.</span>
    </div>
  </body>
</html>

